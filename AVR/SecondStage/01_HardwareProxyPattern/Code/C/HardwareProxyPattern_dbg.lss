
HardwareProxyPattern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  0000135c  000013f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000135c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800158  00800158  00001448  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d66  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000925  00000000  00000000  0000228a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000588  00000000  00000000  00002baf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  00003138  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000624  00000000  00000000  000033d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000596  00000000  00000000  000039f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e5       	ldi	r30, 0x5C	; 92
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 35       	cpi	r26, 0x58	; 88
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a8 e5       	ldi	r26, 0x58	; 88
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 36       	cpi	r26, 0x62	; 98
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	6d d3       	rcall	.+1754   	; 0x79e <main>
      c4:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <MotorProxy_Init>:
static unsigned int marshal(const struct MotorData mData);
static struct MotorData unmarshal(unsigned int encodedMData);

//-----------------------------------------------------------------------------

void MotorProxy_Init(MotorProxy* const me) {
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	00 d0       	rcall	.+0      	; 0xd0 <MotorProxy_Init+0x6>
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
      d4:	9a 83       	std	Y+2, r25	; 0x02
      d6:	89 83       	std	Y+1, r24	; 0x01
	me->motorAddr = NULL;
      d8:	89 81       	ldd	r24, Y+1	; 0x01
      da:	9a 81       	ldd	r25, Y+2	; 0x02
      dc:	fc 01       	movw	r30, r24
      de:	11 82       	std	Z+1, r1	; 0x01
      e0:	10 82       	st	Z, r1
}
      e2:	00 00       	nop
      e4:	0f 90       	pop	r0
      e6:	0f 90       	pop	r0
      e8:	df 91       	pop	r29
      ea:	cf 91       	pop	r28
      ec:	08 95       	ret

000000ee <MotorProxy_Cleanup>:

//-----------------------------------------------------------------------------

void MotorProxy_Cleanup(MotorProxy* const me) {
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
      f2:	00 d0       	rcall	.+0      	; 0xf4 <MotorProxy_Cleanup+0x6>
      f4:	cd b7       	in	r28, 0x3d	; 61
      f6:	de b7       	in	r29, 0x3e	; 62
      f8:	9a 83       	std	Y+2, r25	; 0x02
      fa:	89 83       	std	Y+1, r24	; 0x01

}
      fc:	00 00       	nop
      fe:	0f 90       	pop	r0
     100:	0f 90       	pop	r0
     102:	df 91       	pop	r29
     104:	cf 91       	pop	r28
     106:	08 95       	ret

00000108 <MotorProxy_accessMotorDirection>:

//-----------------------------------------------------------------------------

DirectionType MotorProxy_accessMotorDirection(MotorProxy* const me) {
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
     110:	2f 97       	sbiw	r28, 0x0f	; 15
     112:	0f b6       	in	r0, 0x3f	; 63
     114:	f8 94       	cli
     116:	de bf       	out	0x3e, r29	; 62
     118:	0f be       	out	0x3f, r0	; 63
     11a:	cd bf       	out	0x3d, r28	; 61
     11c:	9f 87       	std	Y+15, r25	; 0x0f
     11e:	8e 87       	std	Y+14, r24	; 0x0e
	MotorData mData;

	if (!me->motorAddr) {
     120:	8e 85       	ldd	r24, Y+14	; 0x0e
     122:	9f 85       	ldd	r25, Y+15	; 0x0f
     124:	fc 01       	movw	r30, r24
     126:	80 81       	ld	r24, Z
     128:	91 81       	ldd	r25, Z+1	; 0x01
     12a:	89 2b       	or	r24, r25
     12c:	19 f4       	brne	.+6      	; 0x134 <MotorProxy_accessMotorDirection+0x2c>
		return NO_DIRECTION;
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	0e c0       	rjmp	.+28     	; 0x150 <MotorProxy_accessMotorDirection+0x48>
	}

mData = unmarshal(*me->motorAddr);
     134:	8e 85       	ldd	r24, Y+14	; 0x0e
     136:	9f 85       	ldd	r25, Y+15	; 0x0f
     138:	fc 01       	movw	r30, r24
     13a:	80 81       	ld	r24, Z
     13c:	91 81       	ldd	r25, Z+1	; 0x01
     13e:	fc 01       	movw	r30, r24
     140:	80 81       	ld	r24, Z
     142:	91 81       	ldd	r25, Z+1	; 0x01
     144:	bc 01       	movw	r22, r24
     146:	ce 01       	movw	r24, r28
     148:	01 96       	adiw	r24, 0x01	; 1
     14a:	a4 d2       	rcall	.+1352   	; 0x694 <unmarshal>

return mData.direction;
     14c:	8a 81       	ldd	r24, Y+2	; 0x02
     14e:	9b 81       	ldd	r25, Y+3	; 0x03
}
     150:	2f 96       	adiw	r28, 0x0f	; 15
     152:	0f b6       	in	r0, 0x3f	; 63
     154:	f8 94       	cli
     156:	de bf       	out	0x3e, r29	; 62
     158:	0f be       	out	0x3f, r0	; 63
     15a:	cd bf       	out	0x3d, r28	; 61
     15c:	df 91       	pop	r29
     15e:	cf 91       	pop	r28
     160:	08 95       	ret

00000162 <MotorProxy_accessMotorSpeed>:

//-----------------------------------------------------------------------------

unsigned int MotorProxy_accessMotorSpeed(MotorProxy* const me) {
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
     166:	cd b7       	in	r28, 0x3d	; 61
     168:	de b7       	in	r29, 0x3e	; 62
     16a:	2f 97       	sbiw	r28, 0x0f	; 15
     16c:	0f b6       	in	r0, 0x3f	; 63
     16e:	f8 94       	cli
     170:	de bf       	out	0x3e, r29	; 62
     172:	0f be       	out	0x3f, r0	; 63
     174:	cd bf       	out	0x3d, r28	; 61
     176:	9f 87       	std	Y+15, r25	; 0x0f
     178:	8e 87       	std	Y+14, r24	; 0x0e
	MotorData mData;

	if (!me->motorAddr) {
     17a:	8e 85       	ldd	r24, Y+14	; 0x0e
     17c:	9f 85       	ldd	r25, Y+15	; 0x0f
     17e:	fc 01       	movw	r30, r24
     180:	80 81       	ld	r24, Z
     182:	91 81       	ldd	r25, Z+1	; 0x01
     184:	89 2b       	or	r24, r25
     186:	19 f4       	brne	.+6      	; 0x18e <MotorProxy_accessMotorSpeed+0x2c>
		return 0;
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e c0       	rjmp	.+28     	; 0x1aa <MotorProxy_accessMotorSpeed+0x48>
	}

	mData = unmarshal(*me->motorAddr);
     18e:	8e 85       	ldd	r24, Y+14	; 0x0e
     190:	9f 85       	ldd	r25, Y+15	; 0x0f
     192:	fc 01       	movw	r30, r24
     194:	80 81       	ld	r24, Z
     196:	91 81       	ldd	r25, Z+1	; 0x01
     198:	fc 01       	movw	r30, r24
     19a:	80 81       	ld	r24, Z
     19c:	91 81       	ldd	r25, Z+1	; 0x01
     19e:	bc 01       	movw	r22, r24
     1a0:	ce 01       	movw	r24, r28
     1a2:	01 96       	adiw	r24, 0x01	; 1
     1a4:	77 d2       	rcall	.+1262   	; 0x694 <unmarshal>

	return mData.speed;
     1a6:	8c 81       	ldd	r24, Y+4	; 0x04
     1a8:	9d 81       	ldd	r25, Y+5	; 0x05
}
     1aa:	2f 96       	adiw	r28, 0x0f	; 15
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	f8 94       	cli
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	0f be       	out	0x3f, r0	; 63
     1b4:	cd bf       	out	0x3d, r28	; 61
     1b6:	df 91       	pop	r29
     1b8:	cf 91       	pop	r28
     1ba:	08 95       	ret

000001bc <MotorProxy_accessMotorState>:

//-----------------------------------------------------------------------------

unsigned int MotorProxy_accessMotorState(MotorProxy* const me) {
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
     1c4:	2f 97       	sbiw	r28, 0x0f	; 15
     1c6:	0f b6       	in	r0, 0x3f	; 63
     1c8:	f8 94       	cli
     1ca:	de bf       	out	0x3e, r29	; 62
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	cd bf       	out	0x3d, r28	; 61
     1d0:	9f 87       	std	Y+15, r25	; 0x0f
     1d2:	8e 87       	std	Y+14, r24	; 0x0e
	MotorData mData;

	if (!me->motorAddr) {
     1d4:	8e 85       	ldd	r24, Y+14	; 0x0e
     1d6:	9f 85       	ldd	r25, Y+15	; 0x0f
     1d8:	fc 01       	movw	r30, r24
     1da:	80 81       	ld	r24, Z
     1dc:	91 81       	ldd	r25, Z+1	; 0x01
     1de:	89 2b       	or	r24, r25
     1e0:	19 f4       	brne	.+6      	; 0x1e8 <MotorProxy_accessMotorState+0x2c>
		return 0;
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0f c0       	rjmp	.+30     	; 0x206 <MotorProxy_accessMotorState+0x4a>
	}

	mData = unmarshal(*me->motorAddr);
     1e8:	8e 85       	ldd	r24, Y+14	; 0x0e
     1ea:	9f 85       	ldd	r25, Y+15	; 0x0f
     1ec:	fc 01       	movw	r30, r24
     1ee:	80 81       	ld	r24, Z
     1f0:	91 81       	ldd	r25, Z+1	; 0x01
     1f2:	fc 01       	movw	r30, r24
     1f4:	80 81       	ld	r24, Z
     1f6:	91 81       	ldd	r25, Z+1	; 0x01
     1f8:	bc 01       	movw	r22, r24
     1fa:	ce 01       	movw	r24, r28
     1fc:	01 96       	adiw	r24, 0x01	; 1
     1fe:	4a d2       	rcall	.+1172   	; 0x694 <unmarshal>

	return mData.errorStatus;
     200:	8e 81       	ldd	r24, Y+6	; 0x06
     202:	88 2f       	mov	r24, r24
     204:	90 e0       	ldi	r25, 0x00	; 0
}
     206:	2f 96       	adiw	r28, 0x0f	; 15
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	f8 94       	cli
     20c:	de bf       	out	0x3e, r29	; 62
     20e:	0f be       	out	0x3f, r0	; 63
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <MotorProxy_clearErrorStatus>:

//-----------------------------------------------------------------------------

void MotorProxy_clearErrorStatus(MotorProxy* const me) {
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	00 d0       	rcall	.+0      	; 0x21e <MotorProxy_clearErrorStatus+0x6>
     21e:	cd b7       	in	r28, 0x3d	; 61
     220:	de b7       	in	r29, 0x3e	; 62
     222:	9a 83       	std	Y+2, r25	; 0x02
     224:	89 83       	std	Y+1, r24	; 0x01
	if (!me->motorAddr) {
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	9a 81       	ldd	r25, Y+2	; 0x02
     22a:	fc 01       	movw	r30, r24
     22c:	80 81       	ld	r24, Z
     22e:	91 81       	ldd	r25, Z+1	; 0x01
     230:	89 2b       	or	r24, r25
     232:	91 f0       	breq	.+36     	; 0x258 <MotorProxy_clearErrorStatus+0x40>
		return;
	}

	*me->motorAddr &= 0xFF;
     234:	89 81       	ldd	r24, Y+1	; 0x01
     236:	9a 81       	ldd	r25, Y+2	; 0x02
     238:	fc 01       	movw	r30, r24
     23a:	80 81       	ld	r24, Z
     23c:	91 81       	ldd	r25, Z+1	; 0x01
     23e:	29 81       	ldd	r18, Y+1	; 0x01
     240:	3a 81       	ldd	r19, Y+2	; 0x02
     242:	f9 01       	movw	r30, r18
     244:	20 81       	ld	r18, Z
     246:	31 81       	ldd	r19, Z+1	; 0x01
     248:	f9 01       	movw	r30, r18
     24a:	20 81       	ld	r18, Z
     24c:	31 81       	ldd	r19, Z+1	; 0x01
     24e:	33 27       	eor	r19, r19
     250:	fc 01       	movw	r30, r24
     252:	31 83       	std	Z+1, r19	; 0x01
     254:	20 83       	st	Z, r18
     256:	01 c0       	rjmp	.+2      	; 0x25a <MotorProxy_clearErrorStatus+0x42>

//-----------------------------------------------------------------------------

void MotorProxy_clearErrorStatus(MotorProxy* const me) {
	if (!me->motorAddr) {
		return;
     258:	00 00       	nop
	}

	*me->motorAddr &= 0xFF;
}
     25a:	0f 90       	pop	r0
     25c:	0f 90       	pop	r0
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	08 95       	ret

00000264 <MotorProxy_configure>:

//-----------------------------------------------------------------------------

void MotorProxy_configure(MotorProxy* const me, unsigned int length,
	unsigned int* location) {
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	00 d0       	rcall	.+0      	; 0x26a <MotorProxy_configure+0x6>
     26a:	00 d0       	rcall	.+0      	; 0x26c <MotorProxy_configure+0x8>
     26c:	00 d0       	rcall	.+0      	; 0x26e <MotorProxy_configure+0xa>
     26e:	cd b7       	in	r28, 0x3d	; 61
     270:	de b7       	in	r29, 0x3e	; 62
     272:	9a 83       	std	Y+2, r25	; 0x02
     274:	89 83       	std	Y+1, r24	; 0x01
     276:	7c 83       	std	Y+4, r23	; 0x04
     278:	6b 83       	std	Y+3, r22	; 0x03
     27a:	5e 83       	std	Y+6, r21	; 0x06
     27c:	4d 83       	std	Y+5, r20	; 0x05
	me->rotaryArmLength = length;
     27e:	89 81       	ldd	r24, Y+1	; 0x01
     280:	9a 81       	ldd	r25, Y+2	; 0x02
     282:	2b 81       	ldd	r18, Y+3	; 0x03
     284:	3c 81       	ldd	r19, Y+4	; 0x04
     286:	fc 01       	movw	r30, r24
     288:	33 83       	std	Z+3, r19	; 0x03
     28a:	22 83       	std	Z+2, r18	; 0x02
	me->motorAddr = location;
     28c:	89 81       	ldd	r24, Y+1	; 0x01
     28e:	9a 81       	ldd	r25, Y+2	; 0x02
     290:	2d 81       	ldd	r18, Y+5	; 0x05
     292:	3e 81       	ldd	r19, Y+6	; 0x06
     294:	fc 01       	movw	r30, r24
     296:	31 83       	std	Z+1, r19	; 0x01
     298:	20 83       	st	Z, r18
}
     29a:	00 00       	nop
     29c:	26 96       	adiw	r28, 0x06	; 6
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	f8 94       	cli
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	cd bf       	out	0x3d, r28	; 61
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <MotorProxy_disable>:

//-----------------------------------------------------------------------------

void MotorProxy_disable(MotorProxy* const me) {
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	00 d0       	rcall	.+0      	; 0x2b4 <MotorProxy_disable+0x6>
     2b4:	cd b7       	in	r28, 0x3d	; 61
     2b6:	de b7       	in	r29, 0x3e	; 62
     2b8:	9a 83       	std	Y+2, r25	; 0x02
     2ba:	89 83       	std	Y+1, r24	; 0x01
	if (!me->motorAddr) {
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	9a 81       	ldd	r25, Y+2	; 0x02
     2c0:	fc 01       	movw	r30, r24
     2c2:	80 81       	ld	r24, Z
     2c4:	91 81       	ldd	r25, Z+1	; 0x01
     2c6:	89 2b       	or	r24, r25
     2c8:	91 f0       	breq	.+36     	; 0x2ee <MotorProxy_disable+0x40>
		return;
	}

	*me->motorAddr &= 0xFFFE;
     2ca:	89 81       	ldd	r24, Y+1	; 0x01
     2cc:	9a 81       	ldd	r25, Y+2	; 0x02
     2ce:	fc 01       	movw	r30, r24
     2d0:	80 81       	ld	r24, Z
     2d2:	91 81       	ldd	r25, Z+1	; 0x01
     2d4:	29 81       	ldd	r18, Y+1	; 0x01
     2d6:	3a 81       	ldd	r19, Y+2	; 0x02
     2d8:	f9 01       	movw	r30, r18
     2da:	20 81       	ld	r18, Z
     2dc:	31 81       	ldd	r19, Z+1	; 0x01
     2de:	f9 01       	movw	r30, r18
     2e0:	20 81       	ld	r18, Z
     2e2:	31 81       	ldd	r19, Z+1	; 0x01
     2e4:	2e 7f       	andi	r18, 0xFE	; 254
     2e6:	fc 01       	movw	r30, r24
     2e8:	31 83       	std	Z+1, r19	; 0x01
     2ea:	20 83       	st	Z, r18
     2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <MotorProxy_disable+0x42>

//-----------------------------------------------------------------------------

void MotorProxy_disable(MotorProxy* const me) {
	if (!me->motorAddr) {
		return;
     2ee:	00 00       	nop
	}

	*me->motorAddr &= 0xFFFE;
}
     2f0:	0f 90       	pop	r0
     2f2:	0f 90       	pop	r0
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret

000002fa <MotorProxy_enable>:

//-----------------------------------------------------------------------------

void MotorProxy_enable(MotorProxy* const me) {
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	00 d0       	rcall	.+0      	; 0x300 <MotorProxy_enable+0x6>
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	9a 83       	std	Y+2, r25	; 0x02
     306:	89 83       	std	Y+1, r24	; 0x01
	if (!me->motorAddr) {
     308:	89 81       	ldd	r24, Y+1	; 0x01
     30a:	9a 81       	ldd	r25, Y+2	; 0x02
     30c:	fc 01       	movw	r30, r24
     30e:	80 81       	ld	r24, Z
     310:	91 81       	ldd	r25, Z+1	; 0x01
     312:	89 2b       	or	r24, r25
     314:	91 f0       	breq	.+36     	; 0x33a <MotorProxy_enable+0x40>
		return;
	}

	*me->motorAddr |= 1;
     316:	89 81       	ldd	r24, Y+1	; 0x01
     318:	9a 81       	ldd	r25, Y+2	; 0x02
     31a:	fc 01       	movw	r30, r24
     31c:	80 81       	ld	r24, Z
     31e:	91 81       	ldd	r25, Z+1	; 0x01
     320:	29 81       	ldd	r18, Y+1	; 0x01
     322:	3a 81       	ldd	r19, Y+2	; 0x02
     324:	f9 01       	movw	r30, r18
     326:	20 81       	ld	r18, Z
     328:	31 81       	ldd	r19, Z+1	; 0x01
     32a:	f9 01       	movw	r30, r18
     32c:	20 81       	ld	r18, Z
     32e:	31 81       	ldd	r19, Z+1	; 0x01
     330:	21 60       	ori	r18, 0x01	; 1
     332:	fc 01       	movw	r30, r24
     334:	31 83       	std	Z+1, r19	; 0x01
     336:	20 83       	st	Z, r18
     338:	01 c0       	rjmp	.+2      	; 0x33c <MotorProxy_enable+0x42>

//-----------------------------------------------------------------------------

void MotorProxy_enable(MotorProxy* const me) {
	if (!me->motorAddr) {
		return;
     33a:	00 00       	nop
	}

	*me->motorAddr |= 1;
}
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <MotorProxy_initialize>:

//-----------------------------------------------------------------------------

void MotorProxy_initialize(MotorProxy* const me) {
     346:	af 92       	push	r10
     348:	bf 92       	push	r11
     34a:	cf 92       	push	r12
     34c:	df 92       	push	r13
     34e:	ef 92       	push	r14
     350:	ff 92       	push	r15
     352:	0f 93       	push	r16
     354:	1f 93       	push	r17
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	cd b7       	in	r28, 0x3d	; 61
     35c:	de b7       	in	r29, 0x3e	; 62
     35e:	2f 97       	sbiw	r28, 0x0f	; 15
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	f8 94       	cli
     364:	de bf       	out	0x3e, r29	; 62
     366:	0f be       	out	0x3f, r0	; 63
     368:	cd bf       	out	0x3d, r28	; 61
     36a:	9f 87       	std	Y+15, r25	; 0x0f
     36c:	8e 87       	std	Y+14, r24	; 0x0e
	MotorData mData;

	if (!me->motorAddr) {
     36e:	8e 85       	ldd	r24, Y+14	; 0x0e
     370:	9f 85       	ldd	r25, Y+15	; 0x0f
     372:	fc 01       	movw	r30, r24
     374:	80 81       	ld	r24, Z
     376:	91 81       	ldd	r25, Z+1	; 0x01
     378:	89 2b       	or	r24, r25
     37a:	29 f1       	breq	.+74     	; 0x3c6 <MotorProxy_initialize+0x80>
		return;
	}

	mData.on_off = 1;
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	89 83       	std	Y+1, r24	; 0x01
	mData.direction = NO_DIRECTION;
     380:	1b 82       	std	Y+3, r1	; 0x03
     382:	1a 82       	std	Y+2, r1	; 0x02
	mData.speed = 0;
     384:	1d 82       	std	Y+5, r1	; 0x05
     386:	1c 82       	std	Y+4, r1	; 0x04
	mData.errorStatus = 0;
     388:	1e 82       	std	Y+6, r1	; 0x06
	mData.noPowerError = 0;
     38a:	1f 82       	std	Y+7, r1	; 0x07
	mData.noTorqueError = 0;
     38c:	18 86       	std	Y+8, r1	; 0x08
	mData.BITError = 0;
     38e:	19 86       	std	Y+9, r1	; 0x09
	mData.overTemperatureError = 0;
     390:	1a 86       	std	Y+10, r1	; 0x0a
	mData.reservedError1 = 0;
     392:	1b 86       	std	Y+11, r1	; 0x0b
	mData.reservedError2 = 0;
     394:	1c 86       	std	Y+12, r1	; 0x0c
	mData.unknownError = 0;
     396:	1d 86       	std	Y+13, r1	; 0x0d

	*me->motorAddr = marshal(mData);
     398:	8e 85       	ldd	r24, Y+14	; 0x0e
     39a:	9f 85       	ldd	r25, Y+15	; 0x0f
     39c:	fc 01       	movw	r30, r24
     39e:	a0 80       	ld	r10, Z
     3a0:	b1 80       	ldd	r11, Z+1	; 0x01
     3a2:	c9 80       	ldd	r12, Y+1	; 0x01
     3a4:	da 80       	ldd	r13, Y+2	; 0x02
     3a6:	eb 80       	ldd	r14, Y+3	; 0x03
     3a8:	fc 80       	ldd	r15, Y+4	; 0x04
     3aa:	0d 81       	ldd	r16, Y+5	; 0x05
     3ac:	1e 81       	ldd	r17, Y+6	; 0x06
     3ae:	2f 81       	ldd	r18, Y+7	; 0x07
     3b0:	38 85       	ldd	r19, Y+8	; 0x08
     3b2:	49 85       	ldd	r20, Y+9	; 0x09
     3b4:	5a 85       	ldd	r21, Y+10	; 0x0a
     3b6:	6b 85       	ldd	r22, Y+11	; 0x0b
     3b8:	7c 85       	ldd	r23, Y+12	; 0x0c
     3ba:	8d 85       	ldd	r24, Y+13	; 0x0d
     3bc:	ce d0       	rcall	.+412    	; 0x55a <marshal>
     3be:	f5 01       	movw	r30, r10
     3c0:	91 83       	std	Z+1, r25	; 0x01
     3c2:	80 83       	st	Z, r24
     3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <MotorProxy_initialize+0x82>

void MotorProxy_initialize(MotorProxy* const me) {
	MotorData mData;

	if (!me->motorAddr) {
		return;
     3c6:	00 00       	nop
	mData.reservedError1 = 0;
	mData.reservedError2 = 0;
	mData.unknownError = 0;

	*me->motorAddr = marshal(mData);
}
     3c8:	2f 96       	adiw	r28, 0x0f	; 15
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	de bf       	out	0x3e, r29	; 62
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	cd bf       	out	0x3d, r28	; 61
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	ef 90       	pop	r14
     3e0:	df 90       	pop	r13
     3e2:	cf 90       	pop	r12
     3e4:	bf 90       	pop	r11
     3e6:	af 90       	pop	r10
     3e8:	08 95       	ret

000003ea <MotorProxy_writeMotorSpeed>:

//-----------------------------------------------------------------------------

void MotorProxy_writeMotorSpeed(MotorProxy* const me,
	const DirectionType direction,
	unsigned int speed) {
     3ea:	af 92       	push	r10
     3ec:	bf 92       	push	r11
     3ee:	cf 92       	push	r12
     3f0:	df 92       	push	r13
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	6f 97       	sbiw	r28, 0x1f	; 31
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	9b 8f       	std	Y+27, r25	; 0x1b
     410:	8a 8f       	std	Y+26, r24	; 0x1a
     412:	7d 8f       	std	Y+29, r23	; 0x1d
     414:	6c 8f       	std	Y+28, r22	; 0x1c
     416:	5f 8f       	std	Y+31, r21	; 0x1f
     418:	4e 8f       	std	Y+30, r20	; 0x1e
	double dPi;
	double dArmLength;
	double dSpeed;
	double dAdjSpeed;

	if (!me->motorAddr) {
     41a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     41c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     41e:	fc 01       	movw	r30, r24
     420:	80 81       	ld	r24, Z
     422:	91 81       	ldd	r25, Z+1	; 0x01
     424:	89 2b       	or	r24, r25
     426:	09 f4       	brne	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     428:	86 c0       	rjmp	.+268    	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
		return;
	}

	mData = unmarshal(*me->motorAddr);
     42a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     42c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     42e:	fc 01       	movw	r30, r24
     430:	80 81       	ld	r24, Z
     432:	91 81       	ldd	r25, Z+1	; 0x01
     434:	fc 01       	movw	r30, r24
     436:	20 81       	ld	r18, Z
     438:	31 81       	ldd	r19, Z+1	; 0x01
     43a:	ce 01       	movw	r24, r28
     43c:	0d 96       	adiw	r24, 0x0d	; 13
     43e:	b9 01       	movw	r22, r18
     440:	29 d1       	rcall	.+594    	; 0x694 <unmarshal>
	mData.direction = direction;
     442:	8c 8d       	ldd	r24, Y+28	; 0x1c
     444:	9d 8d       	ldd	r25, Y+29	; 0x1d
     446:	9f 87       	std	Y+15, r25	; 0x0f
     448:	8e 87       	std	Y+14, r24	; 0x0e

	if (me->rotaryArmLength > 0) {
     44a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     44c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     44e:	fc 01       	movw	r30, r24
     450:	82 81       	ldd	r24, Z+2	; 0x02
     452:	93 81       	ldd	r25, Z+3	; 0x03
     454:	89 2b       	or	r24, r25
     456:	09 f4       	brne	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     458:	53 c0       	rjmp	.+166    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		dSpeed = speed;
     45a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     45c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     45e:	cc 01       	movw	r24, r24
     460:	a0 e0       	ldi	r26, 0x00	; 0
     462:	b0 e0       	ldi	r27, 0x00	; 0
     464:	bc 01       	movw	r22, r24
     466:	cd 01       	movw	r24, r26
     468:	a5 d2       	rcall	.+1354   	; 0x9b4 <__floatunsisf>
     46a:	dc 01       	movw	r26, r24
     46c:	cb 01       	movw	r24, r22
     46e:	89 83       	std	Y+1, r24	; 0x01
     470:	9a 83       	std	Y+2, r25	; 0x02
     472:	ab 83       	std	Y+3, r26	; 0x03
     474:	bc 83       	std	Y+4, r27	; 0x04
		dArmLength = me->rotaryArmLength;
     476:	8a 8d       	ldd	r24, Y+26	; 0x1a
     478:	9b 8d       	ldd	r25, Y+27	; 0x1b
     47a:	fc 01       	movw	r30, r24
     47c:	82 81       	ldd	r24, Z+2	; 0x02
     47e:	93 81       	ldd	r25, Z+3	; 0x03
     480:	cc 01       	movw	r24, r24
     482:	a0 e0       	ldi	r26, 0x00	; 0
     484:	b0 e0       	ldi	r27, 0x00	; 0
     486:	bc 01       	movw	r22, r24
     488:	cd 01       	movw	r24, r26
     48a:	94 d2       	rcall	.+1320   	; 0x9b4 <__floatunsisf>
     48c:	dc 01       	movw	r26, r24
     48e:	cb 01       	movw	r24, r22
     490:	8d 83       	std	Y+5, r24	; 0x05
     492:	9e 83       	std	Y+6, r25	; 0x06
     494:	af 83       	std	Y+7, r26	; 0x07
     496:	b8 87       	std	Y+8, r27	; 0x08
		dAdjSpeed = dSpeed / 2.0 / 3.14159 / dArmLength * 10.0;
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	40 e0       	ldi	r20, 0x00	; 0
     49e:	50 e4       	ldi	r21, 0x40	; 64
     4a0:	69 81       	ldd	r22, Y+1	; 0x01
     4a2:	7a 81       	ldd	r23, Y+2	; 0x02
     4a4:	8b 81       	ldd	r24, Y+3	; 0x03
     4a6:	9c 81       	ldd	r25, Y+4	; 0x04
     4a8:	ec d1       	rcall	.+984    	; 0x882 <__divsf3>
     4aa:	dc 01       	movw	r26, r24
     4ac:	cb 01       	movw	r24, r22
     4ae:	20 ed       	ldi	r18, 0xD0	; 208
     4b0:	3f e0       	ldi	r19, 0x0F	; 15
     4b2:	49 e4       	ldi	r20, 0x49	; 73
     4b4:	50 e4       	ldi	r21, 0x40	; 64
     4b6:	bc 01       	movw	r22, r24
     4b8:	cd 01       	movw	r24, r26
     4ba:	e3 d1       	rcall	.+966    	; 0x882 <__divsf3>
     4bc:	dc 01       	movw	r26, r24
     4be:	cb 01       	movw	r24, r22
     4c0:	2d 81       	ldd	r18, Y+5	; 0x05
     4c2:	3e 81       	ldd	r19, Y+6	; 0x06
     4c4:	4f 81       	ldd	r20, Y+7	; 0x07
     4c6:	58 85       	ldd	r21, Y+8	; 0x08
     4c8:	bc 01       	movw	r22, r24
     4ca:	cd 01       	movw	r24, r26
     4cc:	da d1       	rcall	.+948    	; 0x882 <__divsf3>
     4ce:	dc 01       	movw	r26, r24
     4d0:	cb 01       	movw	r24, r22
     4d2:	20 e0       	ldi	r18, 0x00	; 0
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	40 e2       	ldi	r20, 0x20	; 32
     4d8:	51 e4       	ldi	r21, 0x41	; 65
     4da:	bc 01       	movw	r22, r24
     4dc:	cd 01       	movw	r24, r26
     4de:	f8 d2       	rcall	.+1520   	; 0xad0 <__mulsf3>
     4e0:	dc 01       	movw	r26, r24
     4e2:	cb 01       	movw	r24, r22
     4e4:	89 87       	std	Y+9, r24	; 0x09
     4e6:	9a 87       	std	Y+10, r25	; 0x0a
     4e8:	ab 87       	std	Y+11, r26	; 0x0b
		mData.speed = (int)dAdjSpeed;
     4ea:	bc 87       	std	Y+12, r27	; 0x0c
     4ec:	69 85       	ldd	r22, Y+9	; 0x09
     4ee:	7a 85       	ldd	r23, Y+10	; 0x0a
     4f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     4f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     4f4:	2e d2       	rcall	.+1116   	; 0x952 <__fixsfsi>
     4f6:	dc 01       	movw	r26, r24
     4f8:	cb 01       	movw	r24, r22
     4fa:	99 8b       	std	Y+17, r25	; 0x11
     4fc:	88 8b       	std	Y+16, r24	; 0x10
     4fe:	04 c0       	rjmp	.+8      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
	}
	else {
		mData.speed = speed;
     500:	8e 8d       	ldd	r24, Y+30	; 0x1e
     502:	9f 8d       	ldd	r25, Y+31	; 0x1f
     504:	99 8b       	std	Y+17, r25	; 0x11
     506:	88 8b       	std	Y+16, r24	; 0x10
	}

	*me->motorAddr = marshal(mData);
     508:	8a 8d       	ldd	r24, Y+26	; 0x1a
     50a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     50c:	fc 01       	movw	r30, r24
     50e:	a0 80       	ld	r10, Z
     510:	b1 80       	ldd	r11, Z+1	; 0x01
     512:	cd 84       	ldd	r12, Y+13	; 0x0d
     514:	de 84       	ldd	r13, Y+14	; 0x0e
     516:	ef 84       	ldd	r14, Y+15	; 0x0f
     518:	f8 88       	ldd	r15, Y+16	; 0x10
     51a:	09 89       	ldd	r16, Y+17	; 0x11
     51c:	1a 89       	ldd	r17, Y+18	; 0x12
     51e:	2b 89       	ldd	r18, Y+19	; 0x13
     520:	3c 89       	ldd	r19, Y+20	; 0x14
     522:	4d 89       	ldd	r20, Y+21	; 0x15
     524:	5e 89       	ldd	r21, Y+22	; 0x16
     526:	6f 89       	ldd	r22, Y+23	; 0x17
     528:	78 8d       	ldd	r23, Y+24	; 0x18
     52a:	89 8d       	ldd	r24, Y+25	; 0x19
     52c:	16 d0       	rcall	.+44     	; 0x55a <marshal>
     52e:	f5 01       	movw	r30, r10
     530:	91 83       	std	Z+1, r25	; 0x01
     532:	80 83       	st	Z, r24
     534:	01 c0       	rjmp	.+2      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
	double dArmLength;
	double dSpeed;
	double dAdjSpeed;

	if (!me->motorAddr) {
		return;
     536:	00 00       	nop
	else {
		mData.speed = speed;
	}

	*me->motorAddr = marshal(mData);
}
     538:	6f 96       	adiw	r28, 0x1f	; 31
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	f8 94       	cli
     53e:	de bf       	out	0x3e, r29	; 62
     540:	0f be       	out	0x3f, r0	; 63
     542:	cd bf       	out	0x3d, r28	; 61
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	ff 90       	pop	r15
     54e:	ef 90       	pop	r14
     550:	df 90       	pop	r13
     552:	cf 90       	pop	r12
     554:	bf 90       	pop	r11
     556:	af 90       	pop	r10
     558:	08 95       	ret

0000055a <marshal>:

//-----------------------------------------------------------------------------

static unsigned int marshal(const struct MotorData mData) {
     55a:	cf 92       	push	r12
     55c:	df 92       	push	r13
     55e:	ef 92       	push	r14
     560:	ff 92       	push	r15
     562:	0f 93       	push	r16
     564:	1f 93       	push	r17
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
     56e:	2f 97       	sbiw	r28, 0x0f	; 15
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	f8 94       	cli
     574:	de bf       	out	0x3e, r29	; 62
     576:	0f be       	out	0x3f, r0	; 63
     578:	cd bf       	out	0x3d, r28	; 61
     57a:	cb 82       	std	Y+3, r12	; 0x03
     57c:	dc 82       	std	Y+4, r13	; 0x04
     57e:	ed 82       	std	Y+5, r14	; 0x05
     580:	fe 82       	std	Y+6, r15	; 0x06
     582:	0f 83       	std	Y+7, r16	; 0x07
     584:	18 87       	std	Y+8, r17	; 0x08
     586:	29 87       	std	Y+9, r18	; 0x09
     588:	3a 87       	std	Y+10, r19	; 0x0a
     58a:	4b 87       	std	Y+11, r20	; 0x0b
     58c:	5c 87       	std	Y+12, r21	; 0x0c
     58e:	6d 87       	std	Y+13, r22	; 0x0d
     590:	7e 87       	std	Y+14, r23	; 0x0e
     592:	8f 87       	std	Y+15, r24	; 0x0f
	unsigned int deviceCmd;

	deviceCmd = 0;
     594:	1a 82       	std	Y+2, r1	; 0x02
     596:	19 82       	std	Y+1, r1	; 0x01
	if (mData.on_off) {
     598:	8b 81       	ldd	r24, Y+3	; 0x03
     59a:	88 23       	and	r24, r24
     59c:	29 f0       	breq	.+10     	; 0x5a8 <marshal+0x4e>
		deviceCmd |= 1;
     59e:	89 81       	ldd	r24, Y+1	; 0x01
     5a0:	9a 81       	ldd	r25, Y+2	; 0x02
     5a2:	81 60       	ori	r24, 0x01	; 1
     5a4:	9a 83       	std	Y+2, r25	; 0x02
     5a6:	89 83       	std	Y+1, r24	; 0x01
	}

	if (mData.direction == FORWARD) {
     5a8:	8c 81       	ldd	r24, Y+4	; 0x04
     5aa:	9d 81       	ldd	r25, Y+5	; 0x05
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	31 f4       	brne	.+12     	; 0x5bc <marshal+0x62>
		deviceCmd |= (1 << 2);
     5b0:	89 81       	ldd	r24, Y+1	; 0x01
     5b2:	9a 81       	ldd	r25, Y+2	; 0x02
     5b4:	84 60       	ori	r24, 0x04	; 4
     5b6:	9a 83       	std	Y+2, r25	; 0x02
     5b8:	89 83       	std	Y+1, r24	; 0x01
     5ba:	09 c0       	rjmp	.+18     	; 0x5ce <marshal+0x74>
	}
	else if (mData.direction == REVERSE) {
     5bc:	8c 81       	ldd	r24, Y+4	; 0x04
     5be:	9d 81       	ldd	r25, Y+5	; 0x05
     5c0:	02 97       	sbiw	r24, 0x02	; 2
     5c2:	29 f4       	brne	.+10     	; 0x5ce <marshal+0x74>
		deviceCmd |= (1 << 1);
     5c4:	89 81       	ldd	r24, Y+1	; 0x01
     5c6:	9a 81       	ldd	r25, Y+2	; 0x02
     5c8:	82 60       	ori	r24, 0x02	; 2
     5ca:	9a 83       	std	Y+2, r25	; 0x02
     5cc:	89 83       	std	Y+1, r24	; 0x01
	}

	if (mData.speed < 32 && mData.speed >= 0) {
     5ce:	8e 81       	ldd	r24, Y+6	; 0x06
     5d0:	9f 81       	ldd	r25, Y+7	; 0x07
     5d2:	80 97       	sbiw	r24, 0x20	; 32
     5d4:	70 f4       	brcc	.+28     	; 0x5f2 <marshal+0x98>
		deviceCmd |= (mData.speed << 3);
     5d6:	8e 81       	ldd	r24, Y+6	; 0x06
     5d8:	9f 81       	ldd	r25, Y+7	; 0x07
     5da:	88 0f       	add	r24, r24
     5dc:	99 1f       	adc	r25, r25
     5de:	88 0f       	add	r24, r24
     5e0:	99 1f       	adc	r25, r25
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	29 81       	ldd	r18, Y+1	; 0x01
     5e8:	3a 81       	ldd	r19, Y+2	; 0x02
     5ea:	82 2b       	or	r24, r18
     5ec:	93 2b       	or	r25, r19
     5ee:	9a 83       	std	Y+2, r25	; 0x02
     5f0:	89 83       	std	Y+1, r24	; 0x01
	}

	if (mData.errorStatus) {
     5f2:	88 85       	ldd	r24, Y+8	; 0x08
     5f4:	88 23       	and	r24, r24
     5f6:	29 f0       	breq	.+10     	; 0x602 <marshal+0xa8>
		deviceCmd |= (1 << 8);
     5f8:	89 81       	ldd	r24, Y+1	; 0x01
     5fa:	9a 81       	ldd	r25, Y+2	; 0x02
     5fc:	91 60       	ori	r25, 0x01	; 1
     5fe:	9a 83       	std	Y+2, r25	; 0x02
     600:	89 83       	std	Y+1, r24	; 0x01
	}

	if (mData.noPowerError) {
     602:	89 85       	ldd	r24, Y+9	; 0x09
     604:	88 23       	and	r24, r24
     606:	29 f0       	breq	.+10     	; 0x612 <marshal+0xb8>
		deviceCmd |= (1 << 9);
     608:	89 81       	ldd	r24, Y+1	; 0x01
     60a:	9a 81       	ldd	r25, Y+2	; 0x02
     60c:	92 60       	ori	r25, 0x02	; 2
     60e:	9a 83       	std	Y+2, r25	; 0x02
     610:	89 83       	std	Y+1, r24	; 0x01
	}

	if (mData.noTorqueError) {
     612:	8a 85       	ldd	r24, Y+10	; 0x0a
     614:	88 23       	and	r24, r24
     616:	29 f0       	breq	.+10     	; 0x622 <marshal+0xc8>
		deviceCmd |= (1 << 10);
     618:	89 81       	ldd	r24, Y+1	; 0x01
     61a:	9a 81       	ldd	r25, Y+2	; 0x02
     61c:	94 60       	ori	r25, 0x04	; 4
     61e:	9a 83       	std	Y+2, r25	; 0x02
     620:	89 83       	std	Y+1, r24	; 0x01
	}

	if (mData.BITError) {
     622:	8b 85       	ldd	r24, Y+11	; 0x0b
     624:	88 23       	and	r24, r24
     626:	29 f0       	breq	.+10     	; 0x632 <marshal+0xd8>
		deviceCmd |= (1 << 11);
     628:	89 81       	ldd	r24, Y+1	; 0x01
     62a:	9a 81       	ldd	r25, Y+2	; 0x02
     62c:	98 60       	ori	r25, 0x08	; 8
     62e:	9a 83       	std	Y+2, r25	; 0x02
     630:	89 83       	std	Y+1, r24	; 0x01
	}

	if (mData.overTemperatureError) {
     632:	8c 85       	ldd	r24, Y+12	; 0x0c
     634:	88 23       	and	r24, r24
     636:	29 f0       	breq	.+10     	; 0x642 <marshal+0xe8>
		deviceCmd |= (1 << 12);
     638:	89 81       	ldd	r24, Y+1	; 0x01
     63a:	9a 81       	ldd	r25, Y+2	; 0x02
     63c:	90 61       	ori	r25, 0x10	; 16
     63e:	9a 83       	std	Y+2, r25	; 0x02
     640:	89 83       	std	Y+1, r24	; 0x01
	}

	if (mData.reservedError1) {
     642:	8d 85       	ldd	r24, Y+13	; 0x0d
     644:	88 23       	and	r24, r24
     646:	29 f0       	breq	.+10     	; 0x652 <marshal+0xf8>
		deviceCmd |= (1 << 13);
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	9a 81       	ldd	r25, Y+2	; 0x02
     64c:	90 62       	ori	r25, 0x20	; 32
     64e:	9a 83       	std	Y+2, r25	; 0x02
     650:	89 83       	std	Y+1, r24	; 0x01
	}

	if (mData.reservedError2) {
     652:	8e 85       	ldd	r24, Y+14	; 0x0e
     654:	88 23       	and	r24, r24
     656:	29 f0       	breq	.+10     	; 0x662 <marshal+0x108>
		deviceCmd |= (1 << 14);
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	9a 81       	ldd	r25, Y+2	; 0x02
     65c:	90 64       	ori	r25, 0x40	; 64
     65e:	9a 83       	std	Y+2, r25	; 0x02
     660:	89 83       	std	Y+1, r24	; 0x01
	}

	if (mData.unknownError) {
     662:	8f 85       	ldd	r24, Y+15	; 0x0f
     664:	88 23       	and	r24, r24
     666:	29 f0       	breq	.+10     	; 0x672 <marshal+0x118>
		deviceCmd |= (1 << 15);
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	9a 81       	ldd	r25, Y+2	; 0x02
     66c:	90 68       	ori	r25, 0x80	; 128
     66e:	9a 83       	std	Y+2, r25	; 0x02
     670:	89 83       	std	Y+1, r24	; 0x01
	}

	return deviceCmd;
     672:	89 81       	ldd	r24, Y+1	; 0x01
     674:	9a 81       	ldd	r25, Y+2	; 0x02
}
     676:	2f 96       	adiw	r28, 0x0f	; 15
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	ff 90       	pop	r15
     68c:	ef 90       	pop	r14
     68e:	df 90       	pop	r13
     690:	cf 90       	pop	r12
     692:	08 95       	ret

00000694 <unmarshal>:

//-----------------------------------------------------------------------------

static struct MotorData unmarshal(unsigned int encodedMData) {
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	63 97       	sbiw	r28, 0x13	; 19
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
     6a8:	99 8b       	std	Y+17, r25	; 0x11
     6aa:	88 8b       	std	Y+16, r24	; 0x10
     6ac:	7b 8b       	std	Y+19, r23	; 0x13
     6ae:	6a 8b       	std	Y+18, r22	; 0x12
	MotorData mData;
	int temp;

	mData.on_off = encodedMData & 1;
     6b0:	8a 89       	ldd	r24, Y+18	; 0x12
     6b2:	81 70       	andi	r24, 0x01	; 1
     6b4:	8b 83       	std	Y+3, r24	; 0x03
	temp = (encodedMData & (3 << 1)) >> 1;
     6b6:	8a 89       	ldd	r24, Y+18	; 0x12
     6b8:	9b 89       	ldd	r25, Y+19	; 0x13
     6ba:	86 70       	andi	r24, 0x06	; 6
     6bc:	99 27       	eor	r25, r25
     6be:	96 95       	lsr	r25
     6c0:	87 95       	ror	r24
     6c2:	9a 83       	std	Y+2, r25	; 0x02
     6c4:	89 83       	std	Y+1, r24	; 0x01

	if (temp == 1) {
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
     6c8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ca:	01 97       	sbiw	r24, 0x01	; 1
     6cc:	29 f4       	brne	.+10     	; 0x6d8 <unmarshal+0x44>
		mData.direction = REVERSE;
     6ce:	82 e0       	ldi	r24, 0x02	; 2
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	9d 83       	std	Y+5, r25	; 0x05
     6d4:	8c 83       	std	Y+4, r24	; 0x04
     6d6:	0b c0       	rjmp	.+22     	; 0x6ee <unmarshal+0x5a>
	}
	else if (temp == 2) {
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	9a 81       	ldd	r25, Y+2	; 0x02
     6dc:	02 97       	sbiw	r24, 0x02	; 2
     6de:	29 f4       	brne	.+10     	; 0x6ea <unmarshal+0x56>
		mData.direction = FORWARD;
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	9d 83       	std	Y+5, r25	; 0x05
     6e6:	8c 83       	std	Y+4, r24	; 0x04
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <unmarshal+0x5a>
	}
	else {
		mData.direction = NO_DIRECTION;
     6ea:	1d 82       	std	Y+5, r1	; 0x05
     6ec:	1c 82       	std	Y+4, r1	; 0x04
	}

	mData.speed = (encodedMData & (31 << 3)) >> 3;
     6ee:	8a 89       	ldd	r24, Y+18	; 0x12
     6f0:	9b 89       	ldd	r25, Y+19	; 0x13
     6f2:	88 7f       	andi	r24, 0xF8	; 248
     6f4:	99 27       	eor	r25, r25
     6f6:	96 95       	lsr	r25
     6f8:	87 95       	ror	r24
     6fa:	96 95       	lsr	r25
     6fc:	87 95       	ror	r24
     6fe:	96 95       	lsr	r25
     700:	87 95       	ror	r24
     702:	9f 83       	std	Y+7, r25	; 0x07
     704:	8e 83       	std	Y+6, r24	; 0x06
	mData.errorStatus = (encodedMData & (1 << 8));
     706:	18 86       	std	Y+8, r1	; 0x08
	mData.noPowerError = (encodedMData & (1 << 9));
     708:	19 86       	std	Y+9, r1	; 0x09
	mData.noTorqueError = (encodedMData & (1 << 10));
     70a:	1a 86       	std	Y+10, r1	; 0x0a
	mData.BITError = (encodedMData & (1 << 11));
     70c:	1b 86       	std	Y+11, r1	; 0x0b
	mData.overTemperatureError = (encodedMData & (1 << 12));
     70e:	1c 86       	std	Y+12, r1	; 0x0c
	mData.reservedError1 = (encodedMData & (1 << 13));
     710:	1d 86       	std	Y+13, r1	; 0x0d
	mData.reservedError2 = (encodedMData & (1 << 14));
     712:	1e 86       	std	Y+14, r1	; 0x0e
	mData.unknownError = (encodedMData & (1 << 15));
     714:	1f 86       	std	Y+15, r1	; 0x0f

	return mData;
     716:	88 89       	ldd	r24, Y+16	; 0x10
     718:	99 89       	ldd	r25, Y+17	; 0x11
     71a:	2d e0       	ldi	r18, 0x0D	; 13
     71c:	fe 01       	movw	r30, r28
     71e:	33 96       	adiw	r30, 0x03	; 3
     720:	dc 01       	movw	r26, r24
     722:	01 90       	ld	r0, Z+
     724:	0d 92       	st	X+, r0
     726:	2a 95       	dec	r18
     728:	e1 f7       	brne	.-8      	; 0x722 <unmarshal+0x8e>
}
     72a:	88 89       	ldd	r24, Y+16	; 0x10
     72c:	99 89       	ldd	r25, Y+17	; 0x11
     72e:	63 96       	adiw	r28, 0x13	; 19
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	f8 94       	cli
     734:	de bf       	out	0x3e, r29	; 62
     736:	0f be       	out	0x3f, r0	; 63
     738:	cd bf       	out	0x3d, r28	; 61
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28

//-----------------------------------------------------------------------------

MotorProxy* MotorProxy_Create(void) {
     73e:	08 95       	ret

00000740 <MotorProxy_Create>:
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	00 d0       	rcall	.+0      	; 0x746 <MotorProxy_Create+0x6>
	MotorProxy* me = (MotorProxy*)malloc(sizeof(MotorProxy));
     746:	cd b7       	in	r28, 0x3d	; 61
     748:	de b7       	in	r29, 0x3e	; 62
     74a:	84 e0       	ldi	r24, 0x04	; 4
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	23 d2       	rcall	.+1094   	; 0xb96 <malloc>
     750:	9a 83       	std	Y+2, r25	; 0x02

	if (me != NULL) {
     752:	89 83       	std	Y+1, r24	; 0x01
     754:	89 81       	ldd	r24, Y+1	; 0x01
     756:	9a 81       	ldd	r25, Y+2	; 0x02
     758:	89 2b       	or	r24, r25
		MotorProxy_Init(me);
     75a:	19 f0       	breq	.+6      	; 0x762 <MotorProxy_Create+0x22>
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	9a 81       	ldd	r25, Y+2	; 0x02
     760:	b4 dc       	rcall	.-1688   	; 0xca <MotorProxy_Init>
	}

	return me;
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	9a 81       	ldd	r25, Y+2	; 0x02
}
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28

//-----------------------------------------------------------------------------

void MotorProxy_Destroy(MotorProxy* const me) {
     76e:	08 95       	ret

00000770 <MotorProxy_Destroy>:
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	00 d0       	rcall	.+0      	; 0x776 <MotorProxy_Destroy+0x6>
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
	if (me != NULL) {
     77a:	9a 83       	std	Y+2, r25	; 0x02
     77c:	89 83       	std	Y+1, r24	; 0x01
     77e:	89 81       	ldd	r24, Y+1	; 0x01
     780:	9a 81       	ldd	r25, Y+2	; 0x02
		MotorProxy_Cleanup(me);
     782:	89 2b       	or	r24, r25
     784:	19 f0       	breq	.+6      	; 0x78c <MotorProxy_Destroy+0x1c>
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	free(me);
     78a:	b1 dc       	rcall	.-1694   	; 0xee <MotorProxy_Cleanup>
     78c:	89 81       	ldd	r24, Y+1	; 0x01
     78e:	9a 81       	ldd	r25, Y+2	; 0x02
     790:	9a d2       	rcall	.+1332   	; 0xcc6 <free>
}
     792:	00 00       	nop
     794:	0f 90       	pop	r0
     796:	0f 90       	pop	r0
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	08 95       	ret

0000079e <main>:
#include <stdlib.h>
#include <stdio.h>
#include "MotorProxy.h"

int main(void) {
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
     7a6:	28 97       	sbiw	r28, 0x08	; 8
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	cd bf       	out	0x3d, r28	; 61
	MotorProxy motor;
	MotorProxy* myMotor = &motor;
     7b2:	ce 01       	movw	r24, r28
     7b4:	03 96       	adiw	r24, 0x03	; 3
     7b6:	9a 83       	std	Y+2, r25	; 0x02
     7b8:	89 83       	std	Y+1, r24	; 0x01
	unsigned int hwAddr;

	MotorProxy_configure(myMotor, 0, &hwAddr);
     7ba:	9e 01       	movw	r18, r28
     7bc:	29 5f       	subi	r18, 0xF9	; 249
     7be:	3f 4f       	sbci	r19, 0xFF	; 255
     7c0:	89 81       	ldd	r24, Y+1	; 0x01
     7c2:	9a 81       	ldd	r25, Y+2	; 0x02
     7c4:	a9 01       	movw	r20, r18
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	4c dd       	rcall	.-1384   	; 0x264 <MotorProxy_configure>
	MotorProxy_initialize(myMotor);
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	9a 81       	ldd	r25, Y+2	; 0x02
     7d0:	ba dd       	rcall	.-1164   	; 0x346 <MotorProxy_initialize>

	MotorProxy_writeMotorSpeed(myMotor, FORWARD, 10);
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	9a 81       	ldd	r25, Y+2	; 0x02
     7d6:	4a e0       	ldi	r20, 0x0A	; 10
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	61 e0       	ldi	r22, 0x01	; 1
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	05 de       	rcall	.-1014   	; 0x3ea <MotorProxy_writeMotorSpeed>

	printf("Motor address: 0x%X\n", myMotor->motorAddr);
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	9a 81       	ldd	r25, Y+2	; 0x02
     7e4:	fc 01       	movw	r30, r24
     7e6:	80 81       	ld	r24, Z
     7e8:	91 81       	ldd	r25, Z+1	; 0x01
     7ea:	29 2f       	mov	r18, r25
     7ec:	2f 93       	push	r18
     7ee:	8f 93       	push	r24
     7f0:	86 e0       	ldi	r24, 0x06	; 6
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	89 2f       	mov	r24, r25
     7f6:	8f 93       	push	r24
     7f8:	86 e0       	ldi	r24, 0x06	; 6
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	8f 93       	push	r24
     7fe:	ec d2       	rcall	.+1496   	; 0xdd8 <printf>
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
	printf("Motor direction: %d\n", MotorProxy_accessMotorDirection(myMotor));
     806:	0f 90       	pop	r0
     808:	89 81       	ldd	r24, Y+1	; 0x01
     80a:	9a 81       	ldd	r25, Y+2	; 0x02
     80c:	7d dc       	rcall	.-1798   	; 0x108 <MotorProxy_accessMotorDirection>
     80e:	29 2f       	mov	r18, r25
     810:	2f 93       	push	r18
     812:	8f 93       	push	r24
     814:	8b e1       	ldi	r24, 0x1B	; 27
     816:	91 e0       	ldi	r25, 0x01	; 1
     818:	89 2f       	mov	r24, r25
     81a:	8f 93       	push	r24
     81c:	8b e1       	ldi	r24, 0x1B	; 27
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	8f 93       	push	r24
     822:	da d2       	rcall	.+1460   	; 0xdd8 <printf>
     824:	0f 90       	pop	r0
     826:	0f 90       	pop	r0
     828:	0f 90       	pop	r0
	printf("Motor speed: %d\n", MotorProxy_accessMotorSpeed(myMotor));
     82a:	0f 90       	pop	r0
     82c:	89 81       	ldd	r24, Y+1	; 0x01
     82e:	9a 81       	ldd	r25, Y+2	; 0x02
     830:	98 dc       	rcall	.-1744   	; 0x162 <MotorProxy_accessMotorSpeed>
     832:	29 2f       	mov	r18, r25
     834:	2f 93       	push	r18
     836:	8f 93       	push	r24
     838:	80 e3       	ldi	r24, 0x30	; 48
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	89 2f       	mov	r24, r25
     83e:	8f 93       	push	r24
     840:	80 e3       	ldi	r24, 0x30	; 48
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	8f 93       	push	r24
     846:	c8 d2       	rcall	.+1424   	; 0xdd8 <printf>
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
	printf("Motor error state: %d\n", MotorProxy_accessMotorState(myMotor));
     84e:	0f 90       	pop	r0
     850:	89 81       	ldd	r24, Y+1	; 0x01
     852:	9a 81       	ldd	r25, Y+2	; 0x02
     854:	b3 dc       	rcall	.-1690   	; 0x1bc <MotorProxy_accessMotorState>
     856:	29 2f       	mov	r18, r25
     858:	2f 93       	push	r18
     85a:	8f 93       	push	r24
     85c:	81 e4       	ldi	r24, 0x41	; 65
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	89 2f       	mov	r24, r25
     862:	8f 93       	push	r24
     864:	81 e4       	ldi	r24, 0x41	; 65
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	8f 93       	push	r24
     86a:	b6 d2       	rcall	.+1388   	; 0xdd8 <printf>
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0

	MotorProxy_disable(myMotor);
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	89 81       	ldd	r24, Y+1	; 0x01
     876:	9a 81       	ldd	r25, Y+2	; 0x02

	MotorProxy_enable(myMotor);
     878:	1a dd       	rcall	.-1484   	; 0x2ae <MotorProxy_disable>
     87a:	89 81       	ldd	r24, Y+1	; 0x01
     87c:	9a 81       	ldd	r25, Y+2	; 0x02
     87e:	3d dd       	rcall	.-1414   	; 0x2fa <MotorProxy_enable>

	while (1) {

	}
     880:	ff cf       	rjmp	.-2      	; 0x880 <main+0xe2>

00000882 <__divsf3>:
     882:	0c d0       	rcall	.+24     	; 0x89c <__divsf3x>
     884:	eb c0       	rjmp	.+470    	; 0xa5c <__fp_round>
     886:	e3 d0       	rcall	.+454    	; 0xa4e <__fp_pscB>
     888:	40 f0       	brcs	.+16     	; 0x89a <__divsf3+0x18>
     88a:	da d0       	rcall	.+436    	; 0xa40 <__fp_pscA>
     88c:	30 f0       	brcs	.+12     	; 0x89a <__divsf3+0x18>
     88e:	21 f4       	brne	.+8      	; 0x898 <__divsf3+0x16>
     890:	5f 3f       	cpi	r21, 0xFF	; 255
     892:	19 f0       	breq	.+6      	; 0x89a <__divsf3+0x18>
     894:	cc c0       	rjmp	.+408    	; 0xa2e <__fp_inf>
     896:	51 11       	cpse	r21, r1
     898:	15 c1       	rjmp	.+554    	; 0xac4 <__fp_szero>
     89a:	cf c0       	rjmp	.+414    	; 0xa3a <__fp_nan>

0000089c <__divsf3x>:
     89c:	f0 d0       	rcall	.+480    	; 0xa7e <__fp_split3>
     89e:	98 f3       	brcs	.-26     	; 0x886 <__divsf3+0x4>

000008a0 <__divsf3_pse>:
     8a0:	99 23       	and	r25, r25
     8a2:	c9 f3       	breq	.-14     	; 0x896 <__divsf3+0x14>
     8a4:	55 23       	and	r21, r21
     8a6:	b1 f3       	breq	.-20     	; 0x894 <__divsf3+0x12>
     8a8:	95 1b       	sub	r25, r21
     8aa:	55 0b       	sbc	r21, r21
     8ac:	bb 27       	eor	r27, r27
     8ae:	aa 27       	eor	r26, r26
     8b0:	62 17       	cp	r22, r18
     8b2:	73 07       	cpc	r23, r19
     8b4:	84 07       	cpc	r24, r20
     8b6:	38 f0       	brcs	.+14     	; 0x8c6 <__divsf3_pse+0x26>
     8b8:	9f 5f       	subi	r25, 0xFF	; 255
     8ba:	5f 4f       	sbci	r21, 0xFF	; 255
     8bc:	22 0f       	add	r18, r18
     8be:	33 1f       	adc	r19, r19
     8c0:	44 1f       	adc	r20, r20
     8c2:	aa 1f       	adc	r26, r26
     8c4:	a9 f3       	breq	.-22     	; 0x8b0 <__divsf3_pse+0x10>
     8c6:	33 d0       	rcall	.+102    	; 0x92e <__divsf3_pse+0x8e>
     8c8:	0e 2e       	mov	r0, r30
     8ca:	3a f0       	brmi	.+14     	; 0x8da <__divsf3_pse+0x3a>
     8cc:	e0 e8       	ldi	r30, 0x80	; 128
     8ce:	30 d0       	rcall	.+96     	; 0x930 <__divsf3_pse+0x90>
     8d0:	91 50       	subi	r25, 0x01	; 1
     8d2:	50 40       	sbci	r21, 0x00	; 0
     8d4:	e6 95       	lsr	r30
     8d6:	00 1c       	adc	r0, r0
     8d8:	ca f7       	brpl	.-14     	; 0x8cc <__divsf3_pse+0x2c>
     8da:	29 d0       	rcall	.+82     	; 0x92e <__divsf3_pse+0x8e>
     8dc:	fe 2f       	mov	r31, r30
     8de:	27 d0       	rcall	.+78     	; 0x92e <__divsf3_pse+0x8e>
     8e0:	66 0f       	add	r22, r22
     8e2:	77 1f       	adc	r23, r23
     8e4:	88 1f       	adc	r24, r24
     8e6:	bb 1f       	adc	r27, r27
     8e8:	26 17       	cp	r18, r22
     8ea:	37 07       	cpc	r19, r23
     8ec:	48 07       	cpc	r20, r24
     8ee:	ab 07       	cpc	r26, r27
     8f0:	b0 e8       	ldi	r27, 0x80	; 128
     8f2:	09 f0       	breq	.+2      	; 0x8f6 <__divsf3_pse+0x56>
     8f4:	bb 0b       	sbc	r27, r27
     8f6:	80 2d       	mov	r24, r0
     8f8:	bf 01       	movw	r22, r30
     8fa:	ff 27       	eor	r31, r31
     8fc:	93 58       	subi	r25, 0x83	; 131
     8fe:	5f 4f       	sbci	r21, 0xFF	; 255
     900:	2a f0       	brmi	.+10     	; 0x90c <__divsf3_pse+0x6c>
     902:	9e 3f       	cpi	r25, 0xFE	; 254
     904:	51 05       	cpc	r21, r1
     906:	68 f0       	brcs	.+26     	; 0x922 <__divsf3_pse+0x82>
     908:	92 c0       	rjmp	.+292    	; 0xa2e <__fp_inf>
     90a:	dc c0       	rjmp	.+440    	; 0xac4 <__fp_szero>
     90c:	5f 3f       	cpi	r21, 0xFF	; 255
     90e:	ec f3       	brlt	.-6      	; 0x90a <__divsf3_pse+0x6a>
     910:	98 3e       	cpi	r25, 0xE8	; 232
     912:	dc f3       	brlt	.-10     	; 0x90a <__divsf3_pse+0x6a>
     914:	86 95       	lsr	r24
     916:	77 95       	ror	r23
     918:	67 95       	ror	r22
     91a:	b7 95       	ror	r27
     91c:	f7 95       	ror	r31
     91e:	9f 5f       	subi	r25, 0xFF	; 255
     920:	c9 f7       	brne	.-14     	; 0x914 <__divsf3_pse+0x74>
     922:	88 0f       	add	r24, r24
     924:	91 1d       	adc	r25, r1
     926:	96 95       	lsr	r25
     928:	87 95       	ror	r24
     92a:	97 f9       	bld	r25, 7
     92c:	08 95       	ret
     92e:	e1 e0       	ldi	r30, 0x01	; 1
     930:	66 0f       	add	r22, r22
     932:	77 1f       	adc	r23, r23
     934:	88 1f       	adc	r24, r24
     936:	bb 1f       	adc	r27, r27
     938:	62 17       	cp	r22, r18
     93a:	73 07       	cpc	r23, r19
     93c:	84 07       	cpc	r24, r20
     93e:	ba 07       	cpc	r27, r26
     940:	20 f0       	brcs	.+8      	; 0x94a <__divsf3_pse+0xaa>
     942:	62 1b       	sub	r22, r18
     944:	73 0b       	sbc	r23, r19
     946:	84 0b       	sbc	r24, r20
     948:	ba 0b       	sbc	r27, r26
     94a:	ee 1f       	adc	r30, r30
     94c:	88 f7       	brcc	.-30     	; 0x930 <__divsf3_pse+0x90>
     94e:	e0 95       	com	r30
     950:	08 95       	ret

00000952 <__fixsfsi>:
     952:	04 d0       	rcall	.+8      	; 0x95c <__fixunssfsi>
     954:	68 94       	set
     956:	b1 11       	cpse	r27, r1
     958:	b5 c0       	rjmp	.+362    	; 0xac4 <__fp_szero>
     95a:	08 95       	ret

0000095c <__fixunssfsi>:
     95c:	98 d0       	rcall	.+304    	; 0xa8e <__fp_splitA>
     95e:	88 f0       	brcs	.+34     	; 0x982 <__fixunssfsi+0x26>
     960:	9f 57       	subi	r25, 0x7F	; 127
     962:	90 f0       	brcs	.+36     	; 0x988 <__fixunssfsi+0x2c>
     964:	b9 2f       	mov	r27, r25
     966:	99 27       	eor	r25, r25
     968:	b7 51       	subi	r27, 0x17	; 23
     96a:	a0 f0       	brcs	.+40     	; 0x994 <__fixunssfsi+0x38>
     96c:	d1 f0       	breq	.+52     	; 0x9a2 <__fixunssfsi+0x46>
     96e:	66 0f       	add	r22, r22
     970:	77 1f       	adc	r23, r23
     972:	88 1f       	adc	r24, r24
     974:	99 1f       	adc	r25, r25
     976:	1a f0       	brmi	.+6      	; 0x97e <__fixunssfsi+0x22>
     978:	ba 95       	dec	r27
     97a:	c9 f7       	brne	.-14     	; 0x96e <__fixunssfsi+0x12>
     97c:	12 c0       	rjmp	.+36     	; 0x9a2 <__fixunssfsi+0x46>
     97e:	b1 30       	cpi	r27, 0x01	; 1
     980:	81 f0       	breq	.+32     	; 0x9a2 <__fixunssfsi+0x46>
     982:	9f d0       	rcall	.+318    	; 0xac2 <__fp_zero>
     984:	b1 e0       	ldi	r27, 0x01	; 1
     986:	08 95       	ret
     988:	9c c0       	rjmp	.+312    	; 0xac2 <__fp_zero>
     98a:	67 2f       	mov	r22, r23
     98c:	78 2f       	mov	r23, r24
     98e:	88 27       	eor	r24, r24
     990:	b8 5f       	subi	r27, 0xF8	; 248
     992:	39 f0       	breq	.+14     	; 0x9a2 <__fixunssfsi+0x46>
     994:	b9 3f       	cpi	r27, 0xF9	; 249
     996:	cc f3       	brlt	.-14     	; 0x98a <__fixunssfsi+0x2e>
     998:	86 95       	lsr	r24
     99a:	77 95       	ror	r23
     99c:	67 95       	ror	r22
     99e:	b3 95       	inc	r27
     9a0:	d9 f7       	brne	.-10     	; 0x998 <__fixunssfsi+0x3c>
     9a2:	3e f4       	brtc	.+14     	; 0x9b2 <__fixunssfsi+0x56>
     9a4:	90 95       	com	r25
     9a6:	80 95       	com	r24
     9a8:	70 95       	com	r23
     9aa:	61 95       	neg	r22
     9ac:	7f 4f       	sbci	r23, 0xFF	; 255
     9ae:	8f 4f       	sbci	r24, 0xFF	; 255
     9b0:	9f 4f       	sbci	r25, 0xFF	; 255
     9b2:	08 95       	ret

000009b4 <__floatunsisf>:
     9b4:	e8 94       	clt
     9b6:	09 c0       	rjmp	.+18     	; 0x9ca <__floatsisf+0x12>

000009b8 <__floatsisf>:
     9b8:	97 fb       	bst	r25, 7
     9ba:	3e f4       	brtc	.+14     	; 0x9ca <__floatsisf+0x12>
     9bc:	90 95       	com	r25
     9be:	80 95       	com	r24
     9c0:	70 95       	com	r23
     9c2:	61 95       	neg	r22
     9c4:	7f 4f       	sbci	r23, 0xFF	; 255
     9c6:	8f 4f       	sbci	r24, 0xFF	; 255
     9c8:	9f 4f       	sbci	r25, 0xFF	; 255
     9ca:	99 23       	and	r25, r25
     9cc:	a9 f0       	breq	.+42     	; 0x9f8 <__floatsisf+0x40>
     9ce:	f9 2f       	mov	r31, r25
     9d0:	96 e9       	ldi	r25, 0x96	; 150
     9d2:	bb 27       	eor	r27, r27
     9d4:	93 95       	inc	r25
     9d6:	f6 95       	lsr	r31
     9d8:	87 95       	ror	r24
     9da:	77 95       	ror	r23
     9dc:	67 95       	ror	r22
     9de:	b7 95       	ror	r27
     9e0:	f1 11       	cpse	r31, r1
     9e2:	f8 cf       	rjmp	.-16     	; 0x9d4 <__floatsisf+0x1c>
     9e4:	fa f4       	brpl	.+62     	; 0xa24 <__floatsisf+0x6c>
     9e6:	bb 0f       	add	r27, r27
     9e8:	11 f4       	brne	.+4      	; 0x9ee <__floatsisf+0x36>
     9ea:	60 ff       	sbrs	r22, 0
     9ec:	1b c0       	rjmp	.+54     	; 0xa24 <__floatsisf+0x6c>
     9ee:	6f 5f       	subi	r22, 0xFF	; 255
     9f0:	7f 4f       	sbci	r23, 0xFF	; 255
     9f2:	8f 4f       	sbci	r24, 0xFF	; 255
     9f4:	9f 4f       	sbci	r25, 0xFF	; 255
     9f6:	16 c0       	rjmp	.+44     	; 0xa24 <__floatsisf+0x6c>
     9f8:	88 23       	and	r24, r24
     9fa:	11 f0       	breq	.+4      	; 0xa00 <__floatsisf+0x48>
     9fc:	96 e9       	ldi	r25, 0x96	; 150
     9fe:	11 c0       	rjmp	.+34     	; 0xa22 <__floatsisf+0x6a>
     a00:	77 23       	and	r23, r23
     a02:	21 f0       	breq	.+8      	; 0xa0c <__floatsisf+0x54>
     a04:	9e e8       	ldi	r25, 0x8E	; 142
     a06:	87 2f       	mov	r24, r23
     a08:	76 2f       	mov	r23, r22
     a0a:	05 c0       	rjmp	.+10     	; 0xa16 <__floatsisf+0x5e>
     a0c:	66 23       	and	r22, r22
     a0e:	71 f0       	breq	.+28     	; 0xa2c <__floatsisf+0x74>
     a10:	96 e8       	ldi	r25, 0x86	; 134
     a12:	86 2f       	mov	r24, r22
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	60 e0       	ldi	r22, 0x00	; 0
     a18:	2a f0       	brmi	.+10     	; 0xa24 <__floatsisf+0x6c>
     a1a:	9a 95       	dec	r25
     a1c:	66 0f       	add	r22, r22
     a1e:	77 1f       	adc	r23, r23
     a20:	88 1f       	adc	r24, r24
     a22:	da f7       	brpl	.-10     	; 0xa1a <__floatsisf+0x62>
     a24:	88 0f       	add	r24, r24
     a26:	96 95       	lsr	r25
     a28:	87 95       	ror	r24
     a2a:	97 f9       	bld	r25, 7
     a2c:	08 95       	ret

00000a2e <__fp_inf>:
     a2e:	97 f9       	bld	r25, 7
     a30:	9f 67       	ori	r25, 0x7F	; 127
     a32:	80 e8       	ldi	r24, 0x80	; 128
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	08 95       	ret

00000a3a <__fp_nan>:
     a3a:	9f ef       	ldi	r25, 0xFF	; 255
     a3c:	80 ec       	ldi	r24, 0xC0	; 192
     a3e:	08 95       	ret

00000a40 <__fp_pscA>:
     a40:	00 24       	eor	r0, r0
     a42:	0a 94       	dec	r0
     a44:	16 16       	cp	r1, r22
     a46:	17 06       	cpc	r1, r23
     a48:	18 06       	cpc	r1, r24
     a4a:	09 06       	cpc	r0, r25
     a4c:	08 95       	ret

00000a4e <__fp_pscB>:
     a4e:	00 24       	eor	r0, r0
     a50:	0a 94       	dec	r0
     a52:	12 16       	cp	r1, r18
     a54:	13 06       	cpc	r1, r19
     a56:	14 06       	cpc	r1, r20
     a58:	05 06       	cpc	r0, r21
     a5a:	08 95       	ret

00000a5c <__fp_round>:
     a5c:	09 2e       	mov	r0, r25
     a5e:	03 94       	inc	r0
     a60:	00 0c       	add	r0, r0
     a62:	11 f4       	brne	.+4      	; 0xa68 <__fp_round+0xc>
     a64:	88 23       	and	r24, r24
     a66:	52 f0       	brmi	.+20     	; 0xa7c <__fp_round+0x20>
     a68:	bb 0f       	add	r27, r27
     a6a:	40 f4       	brcc	.+16     	; 0xa7c <__fp_round+0x20>
     a6c:	bf 2b       	or	r27, r31
     a6e:	11 f4       	brne	.+4      	; 0xa74 <__fp_round+0x18>
     a70:	60 ff       	sbrs	r22, 0
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <__fp_round+0x20>
     a74:	6f 5f       	subi	r22, 0xFF	; 255
     a76:	7f 4f       	sbci	r23, 0xFF	; 255
     a78:	8f 4f       	sbci	r24, 0xFF	; 255
     a7a:	9f 4f       	sbci	r25, 0xFF	; 255
     a7c:	08 95       	ret

00000a7e <__fp_split3>:
     a7e:	57 fd       	sbrc	r21, 7
     a80:	90 58       	subi	r25, 0x80	; 128
     a82:	44 0f       	add	r20, r20
     a84:	55 1f       	adc	r21, r21
     a86:	59 f0       	breq	.+22     	; 0xa9e <__fp_splitA+0x10>
     a88:	5f 3f       	cpi	r21, 0xFF	; 255
     a8a:	71 f0       	breq	.+28     	; 0xaa8 <__fp_splitA+0x1a>
     a8c:	47 95       	ror	r20

00000a8e <__fp_splitA>:
     a8e:	88 0f       	add	r24, r24
     a90:	97 fb       	bst	r25, 7
     a92:	99 1f       	adc	r25, r25
     a94:	61 f0       	breq	.+24     	; 0xaae <__fp_splitA+0x20>
     a96:	9f 3f       	cpi	r25, 0xFF	; 255
     a98:	79 f0       	breq	.+30     	; 0xab8 <__fp_splitA+0x2a>
     a9a:	87 95       	ror	r24
     a9c:	08 95       	ret
     a9e:	12 16       	cp	r1, r18
     aa0:	13 06       	cpc	r1, r19
     aa2:	14 06       	cpc	r1, r20
     aa4:	55 1f       	adc	r21, r21
     aa6:	f2 cf       	rjmp	.-28     	; 0xa8c <__fp_split3+0xe>
     aa8:	46 95       	lsr	r20
     aaa:	f1 df       	rcall	.-30     	; 0xa8e <__fp_splitA>
     aac:	08 c0       	rjmp	.+16     	; 0xabe <__fp_splitA+0x30>
     aae:	16 16       	cp	r1, r22
     ab0:	17 06       	cpc	r1, r23
     ab2:	18 06       	cpc	r1, r24
     ab4:	99 1f       	adc	r25, r25
     ab6:	f1 cf       	rjmp	.-30     	; 0xa9a <__fp_splitA+0xc>
     ab8:	86 95       	lsr	r24
     aba:	71 05       	cpc	r23, r1
     abc:	61 05       	cpc	r22, r1
     abe:	08 94       	sec
     ac0:	08 95       	ret

00000ac2 <__fp_zero>:
     ac2:	e8 94       	clt

00000ac4 <__fp_szero>:
     ac4:	bb 27       	eor	r27, r27
     ac6:	66 27       	eor	r22, r22
     ac8:	77 27       	eor	r23, r23
     aca:	cb 01       	movw	r24, r22
     acc:	97 f9       	bld	r25, 7
     ace:	08 95       	ret

00000ad0 <__mulsf3>:
     ad0:	0b d0       	rcall	.+22     	; 0xae8 <__mulsf3x>
     ad2:	c4 cf       	rjmp	.-120    	; 0xa5c <__fp_round>
     ad4:	b5 df       	rcall	.-150    	; 0xa40 <__fp_pscA>
     ad6:	28 f0       	brcs	.+10     	; 0xae2 <__mulsf3+0x12>
     ad8:	ba df       	rcall	.-140    	; 0xa4e <__fp_pscB>
     ada:	18 f0       	brcs	.+6      	; 0xae2 <__mulsf3+0x12>
     adc:	95 23       	and	r25, r21
     ade:	09 f0       	breq	.+2      	; 0xae2 <__mulsf3+0x12>
     ae0:	a6 cf       	rjmp	.-180    	; 0xa2e <__fp_inf>
     ae2:	ab cf       	rjmp	.-170    	; 0xa3a <__fp_nan>
     ae4:	11 24       	eor	r1, r1
     ae6:	ee cf       	rjmp	.-36     	; 0xac4 <__fp_szero>

00000ae8 <__mulsf3x>:
     ae8:	ca df       	rcall	.-108    	; 0xa7e <__fp_split3>
     aea:	a0 f3       	brcs	.-24     	; 0xad4 <__mulsf3+0x4>

00000aec <__mulsf3_pse>:
     aec:	95 9f       	mul	r25, r21
     aee:	d1 f3       	breq	.-12     	; 0xae4 <__mulsf3+0x14>
     af0:	95 0f       	add	r25, r21
     af2:	50 e0       	ldi	r21, 0x00	; 0
     af4:	55 1f       	adc	r21, r21
     af6:	62 9f       	mul	r22, r18
     af8:	f0 01       	movw	r30, r0
     afa:	72 9f       	mul	r23, r18
     afc:	bb 27       	eor	r27, r27
     afe:	f0 0d       	add	r31, r0
     b00:	b1 1d       	adc	r27, r1
     b02:	63 9f       	mul	r22, r19
     b04:	aa 27       	eor	r26, r26
     b06:	f0 0d       	add	r31, r0
     b08:	b1 1d       	adc	r27, r1
     b0a:	aa 1f       	adc	r26, r26
     b0c:	64 9f       	mul	r22, r20
     b0e:	66 27       	eor	r22, r22
     b10:	b0 0d       	add	r27, r0
     b12:	a1 1d       	adc	r26, r1
     b14:	66 1f       	adc	r22, r22
     b16:	82 9f       	mul	r24, r18
     b18:	22 27       	eor	r18, r18
     b1a:	b0 0d       	add	r27, r0
     b1c:	a1 1d       	adc	r26, r1
     b1e:	62 1f       	adc	r22, r18
     b20:	73 9f       	mul	r23, r19
     b22:	b0 0d       	add	r27, r0
     b24:	a1 1d       	adc	r26, r1
     b26:	62 1f       	adc	r22, r18
     b28:	83 9f       	mul	r24, r19
     b2a:	a0 0d       	add	r26, r0
     b2c:	61 1d       	adc	r22, r1
     b2e:	22 1f       	adc	r18, r18
     b30:	74 9f       	mul	r23, r20
     b32:	33 27       	eor	r19, r19
     b34:	a0 0d       	add	r26, r0
     b36:	61 1d       	adc	r22, r1
     b38:	23 1f       	adc	r18, r19
     b3a:	84 9f       	mul	r24, r20
     b3c:	60 0d       	add	r22, r0
     b3e:	21 1d       	adc	r18, r1
     b40:	82 2f       	mov	r24, r18
     b42:	76 2f       	mov	r23, r22
     b44:	6a 2f       	mov	r22, r26
     b46:	11 24       	eor	r1, r1
     b48:	9f 57       	subi	r25, 0x7F	; 127
     b4a:	50 40       	sbci	r21, 0x00	; 0
     b4c:	8a f0       	brmi	.+34     	; 0xb70 <__mulsf3_pse+0x84>
     b4e:	e1 f0       	breq	.+56     	; 0xb88 <__mulsf3_pse+0x9c>
     b50:	88 23       	and	r24, r24
     b52:	4a f0       	brmi	.+18     	; 0xb66 <__mulsf3_pse+0x7a>
     b54:	ee 0f       	add	r30, r30
     b56:	ff 1f       	adc	r31, r31
     b58:	bb 1f       	adc	r27, r27
     b5a:	66 1f       	adc	r22, r22
     b5c:	77 1f       	adc	r23, r23
     b5e:	88 1f       	adc	r24, r24
     b60:	91 50       	subi	r25, 0x01	; 1
     b62:	50 40       	sbci	r21, 0x00	; 0
     b64:	a9 f7       	brne	.-22     	; 0xb50 <__mulsf3_pse+0x64>
     b66:	9e 3f       	cpi	r25, 0xFE	; 254
     b68:	51 05       	cpc	r21, r1
     b6a:	70 f0       	brcs	.+28     	; 0xb88 <__mulsf3_pse+0x9c>
     b6c:	60 cf       	rjmp	.-320    	; 0xa2e <__fp_inf>
     b6e:	aa cf       	rjmp	.-172    	; 0xac4 <__fp_szero>
     b70:	5f 3f       	cpi	r21, 0xFF	; 255
     b72:	ec f3       	brlt	.-6      	; 0xb6e <__mulsf3_pse+0x82>
     b74:	98 3e       	cpi	r25, 0xE8	; 232
     b76:	dc f3       	brlt	.-10     	; 0xb6e <__mulsf3_pse+0x82>
     b78:	86 95       	lsr	r24
     b7a:	77 95       	ror	r23
     b7c:	67 95       	ror	r22
     b7e:	b7 95       	ror	r27
     b80:	f7 95       	ror	r31
     b82:	e7 95       	ror	r30
     b84:	9f 5f       	subi	r25, 0xFF	; 255
     b86:	c1 f7       	brne	.-16     	; 0xb78 <__mulsf3_pse+0x8c>
     b88:	fe 2b       	or	r31, r30
     b8a:	88 0f       	add	r24, r24
     b8c:	91 1d       	adc	r25, r1
     b8e:	96 95       	lsr	r25
     b90:	87 95       	ror	r24
     b92:	97 f9       	bld	r25, 7
     b94:	08 95       	ret

00000b96 <malloc>:
     b96:	0f 93       	push	r16
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	82 30       	cpi	r24, 0x02	; 2
     ba0:	91 05       	cpc	r25, r1
     ba2:	10 f4       	brcc	.+4      	; 0xba8 <malloc+0x12>
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <__flp>
     bac:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <__flp+0x1>
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	a0 e0       	ldi	r26, 0x00	; 0
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	30 97       	sbiw	r30, 0x00	; 0
     bba:	19 f1       	breq	.+70     	; 0xc02 <malloc+0x6c>
     bbc:	40 81       	ld	r20, Z
     bbe:	51 81       	ldd	r21, Z+1	; 0x01
     bc0:	02 81       	ldd	r16, Z+2	; 0x02
     bc2:	13 81       	ldd	r17, Z+3	; 0x03
     bc4:	48 17       	cp	r20, r24
     bc6:	59 07       	cpc	r21, r25
     bc8:	c8 f0       	brcs	.+50     	; 0xbfc <malloc+0x66>
     bca:	84 17       	cp	r24, r20
     bcc:	95 07       	cpc	r25, r21
     bce:	69 f4       	brne	.+26     	; 0xbea <malloc+0x54>
     bd0:	10 97       	sbiw	r26, 0x00	; 0
     bd2:	31 f0       	breq	.+12     	; 0xbe0 <malloc+0x4a>
     bd4:	12 96       	adiw	r26, 0x02	; 2
     bd6:	0c 93       	st	X, r16
     bd8:	12 97       	sbiw	r26, 0x02	; 2
     bda:	13 96       	adiw	r26, 0x03	; 3
     bdc:	1c 93       	st	X, r17
     bde:	27 c0       	rjmp	.+78     	; 0xc2e <malloc+0x98>
     be0:	00 93 5a 01 	sts	0x015A, r16	; 0x80015a <__flp>
     be4:	10 93 5b 01 	sts	0x015B, r17	; 0x80015b <__flp+0x1>
     be8:	22 c0       	rjmp	.+68     	; 0xc2e <malloc+0x98>
     bea:	21 15       	cp	r18, r1
     bec:	31 05       	cpc	r19, r1
     bee:	19 f0       	breq	.+6      	; 0xbf6 <malloc+0x60>
     bf0:	42 17       	cp	r20, r18
     bf2:	53 07       	cpc	r21, r19
     bf4:	18 f4       	brcc	.+6      	; 0xbfc <malloc+0x66>
     bf6:	9a 01       	movw	r18, r20
     bf8:	bd 01       	movw	r22, r26
     bfa:	ef 01       	movw	r28, r30
     bfc:	df 01       	movw	r26, r30
     bfe:	f8 01       	movw	r30, r16
     c00:	db cf       	rjmp	.-74     	; 0xbb8 <malloc+0x22>
     c02:	21 15       	cp	r18, r1
     c04:	31 05       	cpc	r19, r1
     c06:	f9 f0       	breq	.+62     	; 0xc46 <malloc+0xb0>
     c08:	28 1b       	sub	r18, r24
     c0a:	39 0b       	sbc	r19, r25
     c0c:	24 30       	cpi	r18, 0x04	; 4
     c0e:	31 05       	cpc	r19, r1
     c10:	80 f4       	brcc	.+32     	; 0xc32 <malloc+0x9c>
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	9b 81       	ldd	r25, Y+3	; 0x03
     c16:	61 15       	cp	r22, r1
     c18:	71 05       	cpc	r23, r1
     c1a:	21 f0       	breq	.+8      	; 0xc24 <malloc+0x8e>
     c1c:	fb 01       	movw	r30, r22
     c1e:	93 83       	std	Z+3, r25	; 0x03
     c20:	82 83       	std	Z+2, r24	; 0x02
     c22:	04 c0       	rjmp	.+8      	; 0xc2c <malloc+0x96>
     c24:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <__flp+0x1>
     c28:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__flp>
     c2c:	fe 01       	movw	r30, r28
     c2e:	32 96       	adiw	r30, 0x02	; 2
     c30:	44 c0       	rjmp	.+136    	; 0xcba <malloc+0x124>
     c32:	fe 01       	movw	r30, r28
     c34:	e2 0f       	add	r30, r18
     c36:	f3 1f       	adc	r31, r19
     c38:	81 93       	st	Z+, r24
     c3a:	91 93       	st	Z+, r25
     c3c:	22 50       	subi	r18, 0x02	; 2
     c3e:	31 09       	sbc	r19, r1
     c40:	39 83       	std	Y+1, r19	; 0x01
     c42:	28 83       	st	Y, r18
     c44:	3a c0       	rjmp	.+116    	; 0xcba <malloc+0x124>
     c46:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <__data_end>
     c4a:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <__data_end+0x1>
     c4e:	23 2b       	or	r18, r19
     c50:	41 f4       	brne	.+16     	; 0xc62 <malloc+0xcc>
     c52:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     c56:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     c5a:	30 93 59 01 	sts	0x0159, r19	; 0x800159 <__data_end+0x1>
     c5e:	20 93 58 01 	sts	0x0158, r18	; 0x800158 <__data_end>
     c62:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     c66:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     c6a:	21 15       	cp	r18, r1
     c6c:	31 05       	cpc	r19, r1
     c6e:	41 f4       	brne	.+16     	; 0xc80 <malloc+0xea>
     c70:	2d b7       	in	r18, 0x3d	; 61
     c72:	3e b7       	in	r19, 0x3e	; 62
     c74:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     c78:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     c7c:	24 1b       	sub	r18, r20
     c7e:	35 0b       	sbc	r19, r21
     c80:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <__data_end>
     c84:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <__data_end+0x1>
     c88:	e2 17       	cp	r30, r18
     c8a:	f3 07       	cpc	r31, r19
     c8c:	a0 f4       	brcc	.+40     	; 0xcb6 <malloc+0x120>
     c8e:	2e 1b       	sub	r18, r30
     c90:	3f 0b       	sbc	r19, r31
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	78 f0       	brcs	.+30     	; 0xcb6 <malloc+0x120>
     c98:	ac 01       	movw	r20, r24
     c9a:	4e 5f       	subi	r20, 0xFE	; 254
     c9c:	5f 4f       	sbci	r21, 0xFF	; 255
     c9e:	24 17       	cp	r18, r20
     ca0:	35 07       	cpc	r19, r21
     ca2:	48 f0       	brcs	.+18     	; 0xcb6 <malloc+0x120>
     ca4:	4e 0f       	add	r20, r30
     ca6:	5f 1f       	adc	r21, r31
     ca8:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <__data_end+0x1>
     cac:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <__data_end>
     cb0:	81 93       	st	Z+, r24
     cb2:	91 93       	st	Z+, r25
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <malloc+0x124>
     cb6:	e0 e0       	ldi	r30, 0x00	; 0
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	cf 01       	movw	r24, r30
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	08 95       	ret

00000cc6 <free>:
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	00 97       	sbiw	r24, 0x00	; 0
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <free+0xa>
     cce:	81 c0       	rjmp	.+258    	; 0xdd2 <free+0x10c>
     cd0:	fc 01       	movw	r30, r24
     cd2:	32 97       	sbiw	r30, 0x02	; 2
     cd4:	13 82       	std	Z+3, r1	; 0x03
     cd6:	12 82       	std	Z+2, r1	; 0x02
     cd8:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <__flp>
     cdc:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <__flp+0x1>
     ce0:	10 97       	sbiw	r26, 0x00	; 0
     ce2:	81 f4       	brne	.+32     	; 0xd04 <free+0x3e>
     ce4:	20 81       	ld	r18, Z
     ce6:	31 81       	ldd	r19, Z+1	; 0x01
     ce8:	82 0f       	add	r24, r18
     cea:	93 1f       	adc	r25, r19
     cec:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <__data_end>
     cf0:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <__data_end+0x1>
     cf4:	28 17       	cp	r18, r24
     cf6:	39 07       	cpc	r19, r25
     cf8:	51 f5       	brne	.+84     	; 0xd4e <free+0x88>
     cfa:	f0 93 59 01 	sts	0x0159, r31	; 0x800159 <__data_end+0x1>
     cfe:	e0 93 58 01 	sts	0x0158, r30	; 0x800158 <__data_end>
     d02:	67 c0       	rjmp	.+206    	; 0xdd2 <free+0x10c>
     d04:	ed 01       	movw	r28, r26
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	ce 17       	cp	r28, r30
     d0c:	df 07       	cpc	r29, r31
     d0e:	40 f4       	brcc	.+16     	; 0xd20 <free+0x5a>
     d10:	4a 81       	ldd	r20, Y+2	; 0x02
     d12:	5b 81       	ldd	r21, Y+3	; 0x03
     d14:	9e 01       	movw	r18, r28
     d16:	41 15       	cp	r20, r1
     d18:	51 05       	cpc	r21, r1
     d1a:	f1 f0       	breq	.+60     	; 0xd58 <free+0x92>
     d1c:	ea 01       	movw	r28, r20
     d1e:	f5 cf       	rjmp	.-22     	; 0xd0a <free+0x44>
     d20:	d3 83       	std	Z+3, r29	; 0x03
     d22:	c2 83       	std	Z+2, r28	; 0x02
     d24:	40 81       	ld	r20, Z
     d26:	51 81       	ldd	r21, Z+1	; 0x01
     d28:	84 0f       	add	r24, r20
     d2a:	95 1f       	adc	r25, r21
     d2c:	c8 17       	cp	r28, r24
     d2e:	d9 07       	cpc	r29, r25
     d30:	59 f4       	brne	.+22     	; 0xd48 <free+0x82>
     d32:	88 81       	ld	r24, Y
     d34:	99 81       	ldd	r25, Y+1	; 0x01
     d36:	84 0f       	add	r24, r20
     d38:	95 1f       	adc	r25, r21
     d3a:	02 96       	adiw	r24, 0x02	; 2
     d3c:	91 83       	std	Z+1, r25	; 0x01
     d3e:	80 83       	st	Z, r24
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	9b 81       	ldd	r25, Y+3	; 0x03
     d44:	93 83       	std	Z+3, r25	; 0x03
     d46:	82 83       	std	Z+2, r24	; 0x02
     d48:	21 15       	cp	r18, r1
     d4a:	31 05       	cpc	r19, r1
     d4c:	29 f4       	brne	.+10     	; 0xd58 <free+0x92>
     d4e:	f0 93 5b 01 	sts	0x015B, r31	; 0x80015b <__flp+0x1>
     d52:	e0 93 5a 01 	sts	0x015A, r30	; 0x80015a <__flp>
     d56:	3d c0       	rjmp	.+122    	; 0xdd2 <free+0x10c>
     d58:	e9 01       	movw	r28, r18
     d5a:	fb 83       	std	Y+3, r31	; 0x03
     d5c:	ea 83       	std	Y+2, r30	; 0x02
     d5e:	49 91       	ld	r20, Y+
     d60:	59 91       	ld	r21, Y+
     d62:	c4 0f       	add	r28, r20
     d64:	d5 1f       	adc	r29, r21
     d66:	ec 17       	cp	r30, r28
     d68:	fd 07       	cpc	r31, r29
     d6a:	61 f4       	brne	.+24     	; 0xd84 <free+0xbe>
     d6c:	80 81       	ld	r24, Z
     d6e:	91 81       	ldd	r25, Z+1	; 0x01
     d70:	84 0f       	add	r24, r20
     d72:	95 1f       	adc	r25, r21
     d74:	02 96       	adiw	r24, 0x02	; 2
     d76:	e9 01       	movw	r28, r18
     d78:	99 83       	std	Y+1, r25	; 0x01
     d7a:	88 83       	st	Y, r24
     d7c:	82 81       	ldd	r24, Z+2	; 0x02
     d7e:	93 81       	ldd	r25, Z+3	; 0x03
     d80:	9b 83       	std	Y+3, r25	; 0x03
     d82:	8a 83       	std	Y+2, r24	; 0x02
     d84:	e0 e0       	ldi	r30, 0x00	; 0
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	12 96       	adiw	r26, 0x02	; 2
     d8a:	8d 91       	ld	r24, X+
     d8c:	9c 91       	ld	r25, X
     d8e:	13 97       	sbiw	r26, 0x03	; 3
     d90:	00 97       	sbiw	r24, 0x00	; 0
     d92:	19 f0       	breq	.+6      	; 0xd9a <free+0xd4>
     d94:	fd 01       	movw	r30, r26
     d96:	dc 01       	movw	r26, r24
     d98:	f7 cf       	rjmp	.-18     	; 0xd88 <free+0xc2>
     d9a:	8d 91       	ld	r24, X+
     d9c:	9c 91       	ld	r25, X
     d9e:	11 97       	sbiw	r26, 0x01	; 1
     da0:	9d 01       	movw	r18, r26
     da2:	2e 5f       	subi	r18, 0xFE	; 254
     da4:	3f 4f       	sbci	r19, 0xFF	; 255
     da6:	82 0f       	add	r24, r18
     da8:	93 1f       	adc	r25, r19
     daa:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <__data_end>
     dae:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <__data_end+0x1>
     db2:	28 17       	cp	r18, r24
     db4:	39 07       	cpc	r19, r25
     db6:	69 f4       	brne	.+26     	; 0xdd2 <free+0x10c>
     db8:	30 97       	sbiw	r30, 0x00	; 0
     dba:	29 f4       	brne	.+10     	; 0xdc6 <free+0x100>
     dbc:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <__flp+0x1>
     dc0:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <__flp>
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <free+0x104>
     dc6:	13 82       	std	Z+3, r1	; 0x03
     dc8:	12 82       	std	Z+2, r1	; 0x02
     dca:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <__data_end+0x1>
     dce:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <__data_end>
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	08 95       	ret

00000dd8 <printf>:
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
     de0:	ae 01       	movw	r20, r28
     de2:	4b 5f       	subi	r20, 0xFB	; 251
     de4:	5f 4f       	sbci	r21, 0xFF	; 255
     de6:	fa 01       	movw	r30, r20
     de8:	61 91       	ld	r22, Z+
     dea:	71 91       	ld	r23, Z+
     dec:	af 01       	movw	r20, r30
     dee:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__iob+0x2>
     df2:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <__iob+0x3>
     df6:	03 d0       	rcall	.+6      	; 0xdfe <vfprintf>
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	08 95       	ret

00000dfe <vfprintf>:
     dfe:	2f 92       	push	r2
     e00:	3f 92       	push	r3
     e02:	4f 92       	push	r4
     e04:	5f 92       	push	r5
     e06:	6f 92       	push	r6
     e08:	7f 92       	push	r7
     e0a:	8f 92       	push	r8
     e0c:	9f 92       	push	r9
     e0e:	af 92       	push	r10
     e10:	bf 92       	push	r11
     e12:	cf 92       	push	r12
     e14:	df 92       	push	r13
     e16:	ef 92       	push	r14
     e18:	ff 92       	push	r15
     e1a:	0f 93       	push	r16
     e1c:	1f 93       	push	r17
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	2b 97       	sbiw	r28, 0x0b	; 11
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	6c 01       	movw	r12, r24
     e34:	7b 01       	movw	r14, r22
     e36:	8a 01       	movw	r16, r20
     e38:	fc 01       	movw	r30, r24
     e3a:	17 82       	std	Z+7, r1	; 0x07
     e3c:	16 82       	std	Z+6, r1	; 0x06
     e3e:	83 81       	ldd	r24, Z+3	; 0x03
     e40:	81 ff       	sbrs	r24, 1
     e42:	bf c1       	rjmp	.+894    	; 0x11c2 <vfprintf+0x3c4>
     e44:	ce 01       	movw	r24, r28
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	3c 01       	movw	r6, r24
     e4a:	f6 01       	movw	r30, r12
     e4c:	93 81       	ldd	r25, Z+3	; 0x03
     e4e:	f7 01       	movw	r30, r14
     e50:	93 fd       	sbrc	r25, 3
     e52:	85 91       	lpm	r24, Z+
     e54:	93 ff       	sbrs	r25, 3
     e56:	81 91       	ld	r24, Z+
     e58:	7f 01       	movw	r14, r30
     e5a:	88 23       	and	r24, r24
     e5c:	09 f4       	brne	.+2      	; 0xe60 <vfprintf+0x62>
     e5e:	ad c1       	rjmp	.+858    	; 0x11ba <vfprintf+0x3bc>
     e60:	85 32       	cpi	r24, 0x25	; 37
     e62:	39 f4       	brne	.+14     	; 0xe72 <vfprintf+0x74>
     e64:	93 fd       	sbrc	r25, 3
     e66:	85 91       	lpm	r24, Z+
     e68:	93 ff       	sbrs	r25, 3
     e6a:	81 91       	ld	r24, Z+
     e6c:	7f 01       	movw	r14, r30
     e6e:	85 32       	cpi	r24, 0x25	; 37
     e70:	21 f4       	brne	.+8      	; 0xe7a <vfprintf+0x7c>
     e72:	b6 01       	movw	r22, r12
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	d6 d1       	rcall	.+940    	; 0x1224 <fputc>
     e78:	e8 cf       	rjmp	.-48     	; 0xe4a <vfprintf+0x4c>
     e7a:	91 2c       	mov	r9, r1
     e7c:	21 2c       	mov	r2, r1
     e7e:	31 2c       	mov	r3, r1
     e80:	ff e1       	ldi	r31, 0x1F	; 31
     e82:	f3 15       	cp	r31, r3
     e84:	d8 f0       	brcs	.+54     	; 0xebc <vfprintf+0xbe>
     e86:	8b 32       	cpi	r24, 0x2B	; 43
     e88:	79 f0       	breq	.+30     	; 0xea8 <vfprintf+0xaa>
     e8a:	38 f4       	brcc	.+14     	; 0xe9a <vfprintf+0x9c>
     e8c:	80 32       	cpi	r24, 0x20	; 32
     e8e:	79 f0       	breq	.+30     	; 0xeae <vfprintf+0xb0>
     e90:	83 32       	cpi	r24, 0x23	; 35
     e92:	a1 f4       	brne	.+40     	; 0xebc <vfprintf+0xbe>
     e94:	23 2d       	mov	r18, r3
     e96:	20 61       	ori	r18, 0x10	; 16
     e98:	1d c0       	rjmp	.+58     	; 0xed4 <vfprintf+0xd6>
     e9a:	8d 32       	cpi	r24, 0x2D	; 45
     e9c:	61 f0       	breq	.+24     	; 0xeb6 <vfprintf+0xb8>
     e9e:	80 33       	cpi	r24, 0x30	; 48
     ea0:	69 f4       	brne	.+26     	; 0xebc <vfprintf+0xbe>
     ea2:	23 2d       	mov	r18, r3
     ea4:	21 60       	ori	r18, 0x01	; 1
     ea6:	16 c0       	rjmp	.+44     	; 0xed4 <vfprintf+0xd6>
     ea8:	83 2d       	mov	r24, r3
     eaa:	82 60       	ori	r24, 0x02	; 2
     eac:	38 2e       	mov	r3, r24
     eae:	e3 2d       	mov	r30, r3
     eb0:	e4 60       	ori	r30, 0x04	; 4
     eb2:	3e 2e       	mov	r3, r30
     eb4:	2a c0       	rjmp	.+84     	; 0xf0a <vfprintf+0x10c>
     eb6:	f3 2d       	mov	r31, r3
     eb8:	f8 60       	ori	r31, 0x08	; 8
     eba:	1d c0       	rjmp	.+58     	; 0xef6 <vfprintf+0xf8>
     ebc:	37 fc       	sbrc	r3, 7
     ebe:	2d c0       	rjmp	.+90     	; 0xf1a <vfprintf+0x11c>
     ec0:	20 ed       	ldi	r18, 0xD0	; 208
     ec2:	28 0f       	add	r18, r24
     ec4:	2a 30       	cpi	r18, 0x0A	; 10
     ec6:	40 f0       	brcs	.+16     	; 0xed8 <vfprintf+0xda>
     ec8:	8e 32       	cpi	r24, 0x2E	; 46
     eca:	b9 f4       	brne	.+46     	; 0xefa <vfprintf+0xfc>
     ecc:	36 fc       	sbrc	r3, 6
     ece:	75 c1       	rjmp	.+746    	; 0x11ba <vfprintf+0x3bc>
     ed0:	23 2d       	mov	r18, r3
     ed2:	20 64       	ori	r18, 0x40	; 64
     ed4:	32 2e       	mov	r3, r18
     ed6:	19 c0       	rjmp	.+50     	; 0xf0a <vfprintf+0x10c>
     ed8:	36 fe       	sbrs	r3, 6
     eda:	06 c0       	rjmp	.+12     	; 0xee8 <vfprintf+0xea>
     edc:	8a e0       	ldi	r24, 0x0A	; 10
     ede:	98 9e       	mul	r9, r24
     ee0:	20 0d       	add	r18, r0
     ee2:	11 24       	eor	r1, r1
     ee4:	92 2e       	mov	r9, r18
     ee6:	11 c0       	rjmp	.+34     	; 0xf0a <vfprintf+0x10c>
     ee8:	ea e0       	ldi	r30, 0x0A	; 10
     eea:	2e 9e       	mul	r2, r30
     eec:	20 0d       	add	r18, r0
     eee:	11 24       	eor	r1, r1
     ef0:	22 2e       	mov	r2, r18
     ef2:	f3 2d       	mov	r31, r3
     ef4:	f0 62       	ori	r31, 0x20	; 32
     ef6:	3f 2e       	mov	r3, r31
     ef8:	08 c0       	rjmp	.+16     	; 0xf0a <vfprintf+0x10c>
     efa:	8c 36       	cpi	r24, 0x6C	; 108
     efc:	21 f4       	brne	.+8      	; 0xf06 <vfprintf+0x108>
     efe:	83 2d       	mov	r24, r3
     f00:	80 68       	ori	r24, 0x80	; 128
     f02:	38 2e       	mov	r3, r24
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <vfprintf+0x10c>
     f06:	88 36       	cpi	r24, 0x68	; 104
     f08:	41 f4       	brne	.+16     	; 0xf1a <vfprintf+0x11c>
     f0a:	f7 01       	movw	r30, r14
     f0c:	93 fd       	sbrc	r25, 3
     f0e:	85 91       	lpm	r24, Z+
     f10:	93 ff       	sbrs	r25, 3
     f12:	81 91       	ld	r24, Z+
     f14:	7f 01       	movw	r14, r30
     f16:	81 11       	cpse	r24, r1
     f18:	b3 cf       	rjmp	.-154    	; 0xe80 <vfprintf+0x82>
     f1a:	98 2f       	mov	r25, r24
     f1c:	9f 7d       	andi	r25, 0xDF	; 223
     f1e:	95 54       	subi	r25, 0x45	; 69
     f20:	93 30       	cpi	r25, 0x03	; 3
     f22:	28 f4       	brcc	.+10     	; 0xf2e <vfprintf+0x130>
     f24:	0c 5f       	subi	r16, 0xFC	; 252
     f26:	1f 4f       	sbci	r17, 0xFF	; 255
     f28:	9f e3       	ldi	r25, 0x3F	; 63
     f2a:	99 83       	std	Y+1, r25	; 0x01
     f2c:	0d c0       	rjmp	.+26     	; 0xf48 <vfprintf+0x14a>
     f2e:	83 36       	cpi	r24, 0x63	; 99
     f30:	31 f0       	breq	.+12     	; 0xf3e <vfprintf+0x140>
     f32:	83 37       	cpi	r24, 0x73	; 115
     f34:	71 f0       	breq	.+28     	; 0xf52 <vfprintf+0x154>
     f36:	83 35       	cpi	r24, 0x53	; 83
     f38:	09 f0       	breq	.+2      	; 0xf3c <vfprintf+0x13e>
     f3a:	55 c0       	rjmp	.+170    	; 0xfe6 <vfprintf+0x1e8>
     f3c:	20 c0       	rjmp	.+64     	; 0xf7e <vfprintf+0x180>
     f3e:	f8 01       	movw	r30, r16
     f40:	80 81       	ld	r24, Z
     f42:	89 83       	std	Y+1, r24	; 0x01
     f44:	0e 5f       	subi	r16, 0xFE	; 254
     f46:	1f 4f       	sbci	r17, 0xFF	; 255
     f48:	88 24       	eor	r8, r8
     f4a:	83 94       	inc	r8
     f4c:	91 2c       	mov	r9, r1
     f4e:	53 01       	movw	r10, r6
     f50:	12 c0       	rjmp	.+36     	; 0xf76 <vfprintf+0x178>
     f52:	28 01       	movw	r4, r16
     f54:	f2 e0       	ldi	r31, 0x02	; 2
     f56:	4f 0e       	add	r4, r31
     f58:	51 1c       	adc	r5, r1
     f5a:	f8 01       	movw	r30, r16
     f5c:	a0 80       	ld	r10, Z
     f5e:	b1 80       	ldd	r11, Z+1	; 0x01
     f60:	36 fe       	sbrs	r3, 6
     f62:	03 c0       	rjmp	.+6      	; 0xf6a <vfprintf+0x16c>
     f64:	69 2d       	mov	r22, r9
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <vfprintf+0x170>
     f6a:	6f ef       	ldi	r22, 0xFF	; 255
     f6c:	7f ef       	ldi	r23, 0xFF	; 255
     f6e:	c5 01       	movw	r24, r10
     f70:	4e d1       	rcall	.+668    	; 0x120e <strnlen>
     f72:	4c 01       	movw	r8, r24
     f74:	82 01       	movw	r16, r4
     f76:	f3 2d       	mov	r31, r3
     f78:	ff 77       	andi	r31, 0x7F	; 127
     f7a:	3f 2e       	mov	r3, r31
     f7c:	15 c0       	rjmp	.+42     	; 0xfa8 <vfprintf+0x1aa>
     f7e:	28 01       	movw	r4, r16
     f80:	22 e0       	ldi	r18, 0x02	; 2
     f82:	42 0e       	add	r4, r18
     f84:	51 1c       	adc	r5, r1
     f86:	f8 01       	movw	r30, r16
     f88:	a0 80       	ld	r10, Z
     f8a:	b1 80       	ldd	r11, Z+1	; 0x01
     f8c:	36 fe       	sbrs	r3, 6
     f8e:	03 c0       	rjmp	.+6      	; 0xf96 <vfprintf+0x198>
     f90:	69 2d       	mov	r22, r9
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <vfprintf+0x19c>
     f96:	6f ef       	ldi	r22, 0xFF	; 255
     f98:	7f ef       	ldi	r23, 0xFF	; 255
     f9a:	c5 01       	movw	r24, r10
     f9c:	2d d1       	rcall	.+602    	; 0x11f8 <strnlen_P>
     f9e:	4c 01       	movw	r8, r24
     fa0:	f3 2d       	mov	r31, r3
     fa2:	f0 68       	ori	r31, 0x80	; 128
     fa4:	3f 2e       	mov	r3, r31
     fa6:	82 01       	movw	r16, r4
     fa8:	33 fc       	sbrc	r3, 3
     faa:	19 c0       	rjmp	.+50     	; 0xfde <vfprintf+0x1e0>
     fac:	82 2d       	mov	r24, r2
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	88 16       	cp	r8, r24
     fb2:	99 06       	cpc	r9, r25
     fb4:	a0 f4       	brcc	.+40     	; 0xfde <vfprintf+0x1e0>
     fb6:	b6 01       	movw	r22, r12
     fb8:	80 e2       	ldi	r24, 0x20	; 32
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	33 d1       	rcall	.+614    	; 0x1224 <fputc>
     fbe:	2a 94       	dec	r2
     fc0:	f5 cf       	rjmp	.-22     	; 0xfac <vfprintf+0x1ae>
     fc2:	f5 01       	movw	r30, r10
     fc4:	37 fc       	sbrc	r3, 7
     fc6:	85 91       	lpm	r24, Z+
     fc8:	37 fe       	sbrs	r3, 7
     fca:	81 91       	ld	r24, Z+
     fcc:	5f 01       	movw	r10, r30
     fce:	b6 01       	movw	r22, r12
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	28 d1       	rcall	.+592    	; 0x1224 <fputc>
     fd4:	21 10       	cpse	r2, r1
     fd6:	2a 94       	dec	r2
     fd8:	21 e0       	ldi	r18, 0x01	; 1
     fda:	82 1a       	sub	r8, r18
     fdc:	91 08       	sbc	r9, r1
     fde:	81 14       	cp	r8, r1
     fe0:	91 04       	cpc	r9, r1
     fe2:	79 f7       	brne	.-34     	; 0xfc2 <vfprintf+0x1c4>
     fe4:	e1 c0       	rjmp	.+450    	; 0x11a8 <vfprintf+0x3aa>
     fe6:	84 36       	cpi	r24, 0x64	; 100
     fe8:	11 f0       	breq	.+4      	; 0xfee <vfprintf+0x1f0>
     fea:	89 36       	cpi	r24, 0x69	; 105
     fec:	39 f5       	brne	.+78     	; 0x103c <vfprintf+0x23e>
     fee:	f8 01       	movw	r30, r16
     ff0:	37 fe       	sbrs	r3, 7
     ff2:	07 c0       	rjmp	.+14     	; 0x1002 <vfprintf+0x204>
     ff4:	60 81       	ld	r22, Z
     ff6:	71 81       	ldd	r23, Z+1	; 0x01
     ff8:	82 81       	ldd	r24, Z+2	; 0x02
     ffa:	93 81       	ldd	r25, Z+3	; 0x03
     ffc:	0c 5f       	subi	r16, 0xFC	; 252
     ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    1000:	08 c0       	rjmp	.+16     	; 0x1012 <vfprintf+0x214>
    1002:	60 81       	ld	r22, Z
    1004:	71 81       	ldd	r23, Z+1	; 0x01
    1006:	07 2e       	mov	r0, r23
    1008:	00 0c       	add	r0, r0
    100a:	88 0b       	sbc	r24, r24
    100c:	99 0b       	sbc	r25, r25
    100e:	0e 5f       	subi	r16, 0xFE	; 254
    1010:	1f 4f       	sbci	r17, 0xFF	; 255
    1012:	f3 2d       	mov	r31, r3
    1014:	ff 76       	andi	r31, 0x6F	; 111
    1016:	3f 2e       	mov	r3, r31
    1018:	97 ff       	sbrs	r25, 7
    101a:	09 c0       	rjmp	.+18     	; 0x102e <vfprintf+0x230>
    101c:	90 95       	com	r25
    101e:	80 95       	com	r24
    1020:	70 95       	com	r23
    1022:	61 95       	neg	r22
    1024:	7f 4f       	sbci	r23, 0xFF	; 255
    1026:	8f 4f       	sbci	r24, 0xFF	; 255
    1028:	9f 4f       	sbci	r25, 0xFF	; 255
    102a:	f0 68       	ori	r31, 0x80	; 128
    102c:	3f 2e       	mov	r3, r31
    102e:	2a e0       	ldi	r18, 0x0A	; 10
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	a3 01       	movw	r20, r6
    1034:	33 d1       	rcall	.+614    	; 0x129c <__ultoa_invert>
    1036:	88 2e       	mov	r8, r24
    1038:	86 18       	sub	r8, r6
    103a:	44 c0       	rjmp	.+136    	; 0x10c4 <vfprintf+0x2c6>
    103c:	85 37       	cpi	r24, 0x75	; 117
    103e:	31 f4       	brne	.+12     	; 0x104c <vfprintf+0x24e>
    1040:	23 2d       	mov	r18, r3
    1042:	2f 7e       	andi	r18, 0xEF	; 239
    1044:	b2 2e       	mov	r11, r18
    1046:	2a e0       	ldi	r18, 0x0A	; 10
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	25 c0       	rjmp	.+74     	; 0x1096 <vfprintf+0x298>
    104c:	93 2d       	mov	r25, r3
    104e:	99 7f       	andi	r25, 0xF9	; 249
    1050:	b9 2e       	mov	r11, r25
    1052:	8f 36       	cpi	r24, 0x6F	; 111
    1054:	c1 f0       	breq	.+48     	; 0x1086 <vfprintf+0x288>
    1056:	18 f4       	brcc	.+6      	; 0x105e <vfprintf+0x260>
    1058:	88 35       	cpi	r24, 0x58	; 88
    105a:	79 f0       	breq	.+30     	; 0x107a <vfprintf+0x27c>
    105c:	ae c0       	rjmp	.+348    	; 0x11ba <vfprintf+0x3bc>
    105e:	80 37       	cpi	r24, 0x70	; 112
    1060:	19 f0       	breq	.+6      	; 0x1068 <vfprintf+0x26a>
    1062:	88 37       	cpi	r24, 0x78	; 120
    1064:	21 f0       	breq	.+8      	; 0x106e <vfprintf+0x270>
    1066:	a9 c0       	rjmp	.+338    	; 0x11ba <vfprintf+0x3bc>
    1068:	e9 2f       	mov	r30, r25
    106a:	e0 61       	ori	r30, 0x10	; 16
    106c:	be 2e       	mov	r11, r30
    106e:	b4 fe       	sbrs	r11, 4
    1070:	0d c0       	rjmp	.+26     	; 0x108c <vfprintf+0x28e>
    1072:	fb 2d       	mov	r31, r11
    1074:	f4 60       	ori	r31, 0x04	; 4
    1076:	bf 2e       	mov	r11, r31
    1078:	09 c0       	rjmp	.+18     	; 0x108c <vfprintf+0x28e>
    107a:	34 fe       	sbrs	r3, 4
    107c:	0a c0       	rjmp	.+20     	; 0x1092 <vfprintf+0x294>
    107e:	29 2f       	mov	r18, r25
    1080:	26 60       	ori	r18, 0x06	; 6
    1082:	b2 2e       	mov	r11, r18
    1084:	06 c0       	rjmp	.+12     	; 0x1092 <vfprintf+0x294>
    1086:	28 e0       	ldi	r18, 0x08	; 8
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	05 c0       	rjmp	.+10     	; 0x1096 <vfprintf+0x298>
    108c:	20 e1       	ldi	r18, 0x10	; 16
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <vfprintf+0x298>
    1092:	20 e1       	ldi	r18, 0x10	; 16
    1094:	32 e0       	ldi	r19, 0x02	; 2
    1096:	f8 01       	movw	r30, r16
    1098:	b7 fe       	sbrs	r11, 7
    109a:	07 c0       	rjmp	.+14     	; 0x10aa <vfprintf+0x2ac>
    109c:	60 81       	ld	r22, Z
    109e:	71 81       	ldd	r23, Z+1	; 0x01
    10a0:	82 81       	ldd	r24, Z+2	; 0x02
    10a2:	93 81       	ldd	r25, Z+3	; 0x03
    10a4:	0c 5f       	subi	r16, 0xFC	; 252
    10a6:	1f 4f       	sbci	r17, 0xFF	; 255
    10a8:	06 c0       	rjmp	.+12     	; 0x10b6 <vfprintf+0x2b8>
    10aa:	60 81       	ld	r22, Z
    10ac:	71 81       	ldd	r23, Z+1	; 0x01
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 5f       	subi	r16, 0xFE	; 254
    10b4:	1f 4f       	sbci	r17, 0xFF	; 255
    10b6:	a3 01       	movw	r20, r6
    10b8:	f1 d0       	rcall	.+482    	; 0x129c <__ultoa_invert>
    10ba:	88 2e       	mov	r8, r24
    10bc:	86 18       	sub	r8, r6
    10be:	fb 2d       	mov	r31, r11
    10c0:	ff 77       	andi	r31, 0x7F	; 127
    10c2:	3f 2e       	mov	r3, r31
    10c4:	36 fe       	sbrs	r3, 6
    10c6:	0d c0       	rjmp	.+26     	; 0x10e2 <vfprintf+0x2e4>
    10c8:	23 2d       	mov	r18, r3
    10ca:	2e 7f       	andi	r18, 0xFE	; 254
    10cc:	a2 2e       	mov	r10, r18
    10ce:	89 14       	cp	r8, r9
    10d0:	58 f4       	brcc	.+22     	; 0x10e8 <vfprintf+0x2ea>
    10d2:	34 fe       	sbrs	r3, 4
    10d4:	0b c0       	rjmp	.+22     	; 0x10ec <vfprintf+0x2ee>
    10d6:	32 fc       	sbrc	r3, 2
    10d8:	09 c0       	rjmp	.+18     	; 0x10ec <vfprintf+0x2ee>
    10da:	83 2d       	mov	r24, r3
    10dc:	8e 7e       	andi	r24, 0xEE	; 238
    10de:	a8 2e       	mov	r10, r24
    10e0:	05 c0       	rjmp	.+10     	; 0x10ec <vfprintf+0x2ee>
    10e2:	b8 2c       	mov	r11, r8
    10e4:	a3 2c       	mov	r10, r3
    10e6:	03 c0       	rjmp	.+6      	; 0x10ee <vfprintf+0x2f0>
    10e8:	b8 2c       	mov	r11, r8
    10ea:	01 c0       	rjmp	.+2      	; 0x10ee <vfprintf+0x2f0>
    10ec:	b9 2c       	mov	r11, r9
    10ee:	a4 fe       	sbrs	r10, 4
    10f0:	0f c0       	rjmp	.+30     	; 0x1110 <vfprintf+0x312>
    10f2:	fe 01       	movw	r30, r28
    10f4:	e8 0d       	add	r30, r8
    10f6:	f1 1d       	adc	r31, r1
    10f8:	80 81       	ld	r24, Z
    10fa:	80 33       	cpi	r24, 0x30	; 48
    10fc:	21 f4       	brne	.+8      	; 0x1106 <vfprintf+0x308>
    10fe:	9a 2d       	mov	r25, r10
    1100:	99 7e       	andi	r25, 0xE9	; 233
    1102:	a9 2e       	mov	r10, r25
    1104:	09 c0       	rjmp	.+18     	; 0x1118 <vfprintf+0x31a>
    1106:	a2 fe       	sbrs	r10, 2
    1108:	06 c0       	rjmp	.+12     	; 0x1116 <vfprintf+0x318>
    110a:	b3 94       	inc	r11
    110c:	b3 94       	inc	r11
    110e:	04 c0       	rjmp	.+8      	; 0x1118 <vfprintf+0x31a>
    1110:	8a 2d       	mov	r24, r10
    1112:	86 78       	andi	r24, 0x86	; 134
    1114:	09 f0       	breq	.+2      	; 0x1118 <vfprintf+0x31a>
    1116:	b3 94       	inc	r11
    1118:	a3 fc       	sbrc	r10, 3
    111a:	10 c0       	rjmp	.+32     	; 0x113c <vfprintf+0x33e>
    111c:	a0 fe       	sbrs	r10, 0
    111e:	06 c0       	rjmp	.+12     	; 0x112c <vfprintf+0x32e>
    1120:	b2 14       	cp	r11, r2
    1122:	80 f4       	brcc	.+32     	; 0x1144 <vfprintf+0x346>
    1124:	28 0c       	add	r2, r8
    1126:	92 2c       	mov	r9, r2
    1128:	9b 18       	sub	r9, r11
    112a:	0d c0       	rjmp	.+26     	; 0x1146 <vfprintf+0x348>
    112c:	b2 14       	cp	r11, r2
    112e:	58 f4       	brcc	.+22     	; 0x1146 <vfprintf+0x348>
    1130:	b6 01       	movw	r22, r12
    1132:	80 e2       	ldi	r24, 0x20	; 32
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	76 d0       	rcall	.+236    	; 0x1224 <fputc>
    1138:	b3 94       	inc	r11
    113a:	f8 cf       	rjmp	.-16     	; 0x112c <vfprintf+0x32e>
    113c:	b2 14       	cp	r11, r2
    113e:	18 f4       	brcc	.+6      	; 0x1146 <vfprintf+0x348>
    1140:	2b 18       	sub	r2, r11
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <vfprintf+0x34a>
    1144:	98 2c       	mov	r9, r8
    1146:	21 2c       	mov	r2, r1
    1148:	a4 fe       	sbrs	r10, 4
    114a:	0f c0       	rjmp	.+30     	; 0x116a <vfprintf+0x36c>
    114c:	b6 01       	movw	r22, r12
    114e:	80 e3       	ldi	r24, 0x30	; 48
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	68 d0       	rcall	.+208    	; 0x1224 <fputc>
    1154:	a2 fe       	sbrs	r10, 2
    1156:	16 c0       	rjmp	.+44     	; 0x1184 <vfprintf+0x386>
    1158:	a1 fc       	sbrc	r10, 1
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <vfprintf+0x364>
    115c:	88 e7       	ldi	r24, 0x78	; 120
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <vfprintf+0x368>
    1162:	88 e5       	ldi	r24, 0x58	; 88
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	b6 01       	movw	r22, r12
    1168:	0c c0       	rjmp	.+24     	; 0x1182 <vfprintf+0x384>
    116a:	8a 2d       	mov	r24, r10
    116c:	86 78       	andi	r24, 0x86	; 134
    116e:	51 f0       	breq	.+20     	; 0x1184 <vfprintf+0x386>
    1170:	a1 fe       	sbrs	r10, 1
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <vfprintf+0x37a>
    1174:	8b e2       	ldi	r24, 0x2B	; 43
    1176:	01 c0       	rjmp	.+2      	; 0x117a <vfprintf+0x37c>
    1178:	80 e2       	ldi	r24, 0x20	; 32
    117a:	a7 fc       	sbrc	r10, 7
    117c:	8d e2       	ldi	r24, 0x2D	; 45
    117e:	b6 01       	movw	r22, r12
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	50 d0       	rcall	.+160    	; 0x1224 <fputc>
    1184:	89 14       	cp	r8, r9
    1186:	30 f4       	brcc	.+12     	; 0x1194 <vfprintf+0x396>
    1188:	b6 01       	movw	r22, r12
    118a:	80 e3       	ldi	r24, 0x30	; 48
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	4a d0       	rcall	.+148    	; 0x1224 <fputc>
    1190:	9a 94       	dec	r9
    1192:	f8 cf       	rjmp	.-16     	; 0x1184 <vfprintf+0x386>
    1194:	8a 94       	dec	r8
    1196:	f3 01       	movw	r30, r6
    1198:	e8 0d       	add	r30, r8
    119a:	f1 1d       	adc	r31, r1
    119c:	80 81       	ld	r24, Z
    119e:	b6 01       	movw	r22, r12
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	40 d0       	rcall	.+128    	; 0x1224 <fputc>
    11a4:	81 10       	cpse	r8, r1
    11a6:	f6 cf       	rjmp	.-20     	; 0x1194 <vfprintf+0x396>
    11a8:	22 20       	and	r2, r2
    11aa:	09 f4       	brne	.+2      	; 0x11ae <vfprintf+0x3b0>
    11ac:	4e ce       	rjmp	.-868    	; 0xe4a <vfprintf+0x4c>
    11ae:	b6 01       	movw	r22, r12
    11b0:	80 e2       	ldi	r24, 0x20	; 32
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	37 d0       	rcall	.+110    	; 0x1224 <fputc>
    11b6:	2a 94       	dec	r2
    11b8:	f7 cf       	rjmp	.-18     	; 0x11a8 <vfprintf+0x3aa>
    11ba:	f6 01       	movw	r30, r12
    11bc:	86 81       	ldd	r24, Z+6	; 0x06
    11be:	97 81       	ldd	r25, Z+7	; 0x07
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <vfprintf+0x3c8>
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
    11c4:	9f ef       	ldi	r25, 0xFF	; 255
    11c6:	2b 96       	adiw	r28, 0x0b	; 11
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	1f 91       	pop	r17
    11d8:	0f 91       	pop	r16
    11da:	ff 90       	pop	r15
    11dc:	ef 90       	pop	r14
    11de:	df 90       	pop	r13
    11e0:	cf 90       	pop	r12
    11e2:	bf 90       	pop	r11
    11e4:	af 90       	pop	r10
    11e6:	9f 90       	pop	r9
    11e8:	8f 90       	pop	r8
    11ea:	7f 90       	pop	r7
    11ec:	6f 90       	pop	r6
    11ee:	5f 90       	pop	r5
    11f0:	4f 90       	pop	r4
    11f2:	3f 90       	pop	r3
    11f4:	2f 90       	pop	r2
    11f6:	08 95       	ret

000011f8 <strnlen_P>:
    11f8:	fc 01       	movw	r30, r24
    11fa:	05 90       	lpm	r0, Z+
    11fc:	61 50       	subi	r22, 0x01	; 1
    11fe:	70 40       	sbci	r23, 0x00	; 0
    1200:	01 10       	cpse	r0, r1
    1202:	d8 f7       	brcc	.-10     	; 0x11fa <strnlen_P+0x2>
    1204:	80 95       	com	r24
    1206:	90 95       	com	r25
    1208:	8e 0f       	add	r24, r30
    120a:	9f 1f       	adc	r25, r31
    120c:	08 95       	ret

0000120e <strnlen>:
    120e:	fc 01       	movw	r30, r24
    1210:	61 50       	subi	r22, 0x01	; 1
    1212:	70 40       	sbci	r23, 0x00	; 0
    1214:	01 90       	ld	r0, Z+
    1216:	01 10       	cpse	r0, r1
    1218:	d8 f7       	brcc	.-10     	; 0x1210 <strnlen+0x2>
    121a:	80 95       	com	r24
    121c:	90 95       	com	r25
    121e:	8e 0f       	add	r24, r30
    1220:	9f 1f       	adc	r25, r31
    1222:	08 95       	ret

00001224 <fputc>:
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	fb 01       	movw	r30, r22
    122e:	23 81       	ldd	r18, Z+3	; 0x03
    1230:	21 fd       	sbrc	r18, 1
    1232:	03 c0       	rjmp	.+6      	; 0x123a <fputc+0x16>
    1234:	8f ef       	ldi	r24, 0xFF	; 255
    1236:	9f ef       	ldi	r25, 0xFF	; 255
    1238:	2c c0       	rjmp	.+88     	; 0x1292 <fputc+0x6e>
    123a:	22 ff       	sbrs	r18, 2
    123c:	16 c0       	rjmp	.+44     	; 0x126a <fputc+0x46>
    123e:	46 81       	ldd	r20, Z+6	; 0x06
    1240:	57 81       	ldd	r21, Z+7	; 0x07
    1242:	24 81       	ldd	r18, Z+4	; 0x04
    1244:	35 81       	ldd	r19, Z+5	; 0x05
    1246:	42 17       	cp	r20, r18
    1248:	53 07       	cpc	r21, r19
    124a:	44 f4       	brge	.+16     	; 0x125c <fputc+0x38>
    124c:	a0 81       	ld	r26, Z
    124e:	b1 81       	ldd	r27, Z+1	; 0x01
    1250:	9d 01       	movw	r18, r26
    1252:	2f 5f       	subi	r18, 0xFF	; 255
    1254:	3f 4f       	sbci	r19, 0xFF	; 255
    1256:	31 83       	std	Z+1, r19	; 0x01
    1258:	20 83       	st	Z, r18
    125a:	8c 93       	st	X, r24
    125c:	26 81       	ldd	r18, Z+6	; 0x06
    125e:	37 81       	ldd	r19, Z+7	; 0x07
    1260:	2f 5f       	subi	r18, 0xFF	; 255
    1262:	3f 4f       	sbci	r19, 0xFF	; 255
    1264:	37 83       	std	Z+7, r19	; 0x07
    1266:	26 83       	std	Z+6, r18	; 0x06
    1268:	14 c0       	rjmp	.+40     	; 0x1292 <fputc+0x6e>
    126a:	8b 01       	movw	r16, r22
    126c:	ec 01       	movw	r28, r24
    126e:	fb 01       	movw	r30, r22
    1270:	00 84       	ldd	r0, Z+8	; 0x08
    1272:	f1 85       	ldd	r31, Z+9	; 0x09
    1274:	e0 2d       	mov	r30, r0
    1276:	09 95       	icall
    1278:	89 2b       	or	r24, r25
    127a:	e1 f6       	brne	.-72     	; 0x1234 <fputc+0x10>
    127c:	d8 01       	movw	r26, r16
    127e:	16 96       	adiw	r26, 0x06	; 6
    1280:	8d 91       	ld	r24, X+
    1282:	9c 91       	ld	r25, X
    1284:	17 97       	sbiw	r26, 0x07	; 7
    1286:	01 96       	adiw	r24, 0x01	; 1
    1288:	17 96       	adiw	r26, 0x07	; 7
    128a:	9c 93       	st	X, r25
    128c:	8e 93       	st	-X, r24
    128e:	16 97       	sbiw	r26, 0x06	; 6
    1290:	ce 01       	movw	r24, r28
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	08 95       	ret

0000129c <__ultoa_invert>:
    129c:	fa 01       	movw	r30, r20
    129e:	aa 27       	eor	r26, r26
    12a0:	28 30       	cpi	r18, 0x08	; 8
    12a2:	51 f1       	breq	.+84     	; 0x12f8 <__ultoa_invert+0x5c>
    12a4:	20 31       	cpi	r18, 0x10	; 16
    12a6:	81 f1       	breq	.+96     	; 0x1308 <__ultoa_invert+0x6c>
    12a8:	e8 94       	clt
    12aa:	6f 93       	push	r22
    12ac:	6e 7f       	andi	r22, 0xFE	; 254
    12ae:	6e 5f       	subi	r22, 0xFE	; 254
    12b0:	7f 4f       	sbci	r23, 0xFF	; 255
    12b2:	8f 4f       	sbci	r24, 0xFF	; 255
    12b4:	9f 4f       	sbci	r25, 0xFF	; 255
    12b6:	af 4f       	sbci	r26, 0xFF	; 255
    12b8:	b1 e0       	ldi	r27, 0x01	; 1
    12ba:	3e d0       	rcall	.+124    	; 0x1338 <__ultoa_invert+0x9c>
    12bc:	b4 e0       	ldi	r27, 0x04	; 4
    12be:	3c d0       	rcall	.+120    	; 0x1338 <__ultoa_invert+0x9c>
    12c0:	67 0f       	add	r22, r23
    12c2:	78 1f       	adc	r23, r24
    12c4:	89 1f       	adc	r24, r25
    12c6:	9a 1f       	adc	r25, r26
    12c8:	a1 1d       	adc	r26, r1
    12ca:	68 0f       	add	r22, r24
    12cc:	79 1f       	adc	r23, r25
    12ce:	8a 1f       	adc	r24, r26
    12d0:	91 1d       	adc	r25, r1
    12d2:	a1 1d       	adc	r26, r1
    12d4:	6a 0f       	add	r22, r26
    12d6:	71 1d       	adc	r23, r1
    12d8:	81 1d       	adc	r24, r1
    12da:	91 1d       	adc	r25, r1
    12dc:	a1 1d       	adc	r26, r1
    12de:	20 d0       	rcall	.+64     	; 0x1320 <__ultoa_invert+0x84>
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <__ultoa_invert+0x48>
    12e2:	68 94       	set
    12e4:	3f 91       	pop	r19
    12e6:	2a e0       	ldi	r18, 0x0A	; 10
    12e8:	26 9f       	mul	r18, r22
    12ea:	11 24       	eor	r1, r1
    12ec:	30 19       	sub	r19, r0
    12ee:	30 5d       	subi	r19, 0xD0	; 208
    12f0:	31 93       	st	Z+, r19
    12f2:	de f6       	brtc	.-74     	; 0x12aa <__ultoa_invert+0xe>
    12f4:	cf 01       	movw	r24, r30
    12f6:	08 95       	ret
    12f8:	46 2f       	mov	r20, r22
    12fa:	47 70       	andi	r20, 0x07	; 7
    12fc:	40 5d       	subi	r20, 0xD0	; 208
    12fe:	41 93       	st	Z+, r20
    1300:	b3 e0       	ldi	r27, 0x03	; 3
    1302:	0f d0       	rcall	.+30     	; 0x1322 <__ultoa_invert+0x86>
    1304:	c9 f7       	brne	.-14     	; 0x12f8 <__ultoa_invert+0x5c>
    1306:	f6 cf       	rjmp	.-20     	; 0x12f4 <__ultoa_invert+0x58>
    1308:	46 2f       	mov	r20, r22
    130a:	4f 70       	andi	r20, 0x0F	; 15
    130c:	40 5d       	subi	r20, 0xD0	; 208
    130e:	4a 33       	cpi	r20, 0x3A	; 58
    1310:	18 f0       	brcs	.+6      	; 0x1318 <__ultoa_invert+0x7c>
    1312:	49 5d       	subi	r20, 0xD9	; 217
    1314:	31 fd       	sbrc	r19, 1
    1316:	40 52       	subi	r20, 0x20	; 32
    1318:	41 93       	st	Z+, r20
    131a:	02 d0       	rcall	.+4      	; 0x1320 <__ultoa_invert+0x84>
    131c:	a9 f7       	brne	.-22     	; 0x1308 <__ultoa_invert+0x6c>
    131e:	ea cf       	rjmp	.-44     	; 0x12f4 <__ultoa_invert+0x58>
    1320:	b4 e0       	ldi	r27, 0x04	; 4
    1322:	a6 95       	lsr	r26
    1324:	97 95       	ror	r25
    1326:	87 95       	ror	r24
    1328:	77 95       	ror	r23
    132a:	67 95       	ror	r22
    132c:	ba 95       	dec	r27
    132e:	c9 f7       	brne	.-14     	; 0x1322 <__ultoa_invert+0x86>
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	61 05       	cpc	r22, r1
    1334:	71 05       	cpc	r23, r1
    1336:	08 95       	ret
    1338:	9b 01       	movw	r18, r22
    133a:	ac 01       	movw	r20, r24
    133c:	0a 2e       	mov	r0, r26
    133e:	06 94       	lsr	r0
    1340:	57 95       	ror	r21
    1342:	47 95       	ror	r20
    1344:	37 95       	ror	r19
    1346:	27 95       	ror	r18
    1348:	ba 95       	dec	r27
    134a:	c9 f7       	brne	.-14     	; 0x133e <__ultoa_invert+0xa2>
    134c:	62 0f       	add	r22, r18
    134e:	73 1f       	adc	r23, r19
    1350:	84 1f       	adc	r24, r20
    1352:	95 1f       	adc	r25, r21
    1354:	a0 1d       	adc	r26, r0
    1356:	08 95       	ret

00001358 <_exit>:
    1358:	f8 94       	cli

0000135a <__stop_program>:
    135a:	ff cf       	rjmp	.-2      	; 0x135a <__stop_program>

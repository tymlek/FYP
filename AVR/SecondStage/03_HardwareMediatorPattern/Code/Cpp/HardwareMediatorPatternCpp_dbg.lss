
HardwareMediatorPatternCpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000ece  00000f42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ece  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000f42  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f74  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e44  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d36  00000000  00000000  00002ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000aa9  00000000  00000000  00003bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000448  00000000  00000000  00004680  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000c95  00000000  00000000  00004ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008bb  00000000  00000000  0000575d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	56 d0       	rcall	.+172    	; 0x146 <main>
  9a:	17 c7       	rjmp	.+3630   	; 0xeca <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <_ZN19GraspingManipulator4openEv>:
#include "GraspingManipulator.h"

int GraspingManipulator::open() {
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <_ZN19GraspingManipulator4openEv+0x6>
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	9a 83       	std	Y+2, r25	; 0x02
  aa:	89 83       	std	Y+1, r24	; 0x01
	return 0;
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
}
  b0:	0f 90       	pop	r0
  b2:	0f 90       	pop	r0
  b4:	df 91       	pop	r29
  b6:	cf 91       	pop	r28
  b8:	08 95       	ret

000000ba <_ZN19GraspingManipulator5closeEv>:

int GraspingManipulator::close() {
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	00 d0       	rcall	.+0      	; 0xc0 <_ZN19GraspingManipulator5closeEv+0x6>
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	9a 83       	std	Y+2, r25	; 0x02
  c6:	89 83       	std	Y+1, r24	; 0x01
	return 0;
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
}
  cc:	0f 90       	pop	r0
  ce:	0f 90       	pop	r0
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <_ZN19GraspingManipulator11setMaxForceEi>:

int GraspingManipulator::setMaxForce(int m) {
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	00 d0       	rcall	.+0      	; 0xdc <_ZN19GraspingManipulator11setMaxForceEi+0x6>
  dc:	00 d0       	rcall	.+0      	; 0xde <_ZN19GraspingManipulator11setMaxForceEi+0x8>
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	9a 83       	std	Y+2, r25	; 0x02
  e4:	89 83       	std	Y+1, r24	; 0x01
  e6:	7c 83       	std	Y+4, r23	; 0x04
  e8:	6b 83       	std	Y+3, r22	; 0x03
	this->maxForce = m;
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	9a 81       	ldd	r25, Y+2	; 0x02
  ee:	2b 81       	ldd	r18, Y+3	; 0x03
  f0:	3c 81       	ldd	r19, Y+4	; 0x04
  f2:	fc 01       	movw	r30, r24
  f4:	31 83       	std	Z+1, r19	; 0x01
  f6:	20 83       	st	Z, r18

	if (this->maxForce == m) {
  f8:	89 81       	ldd	r24, Y+1	; 0x01
  fa:	9a 81       	ldd	r25, Y+2	; 0x02
  fc:	fc 01       	movw	r30, r24
  fe:	20 81       	ld	r18, Z
 100:	31 81       	ldd	r19, Z+1	; 0x01
 102:	8b 81       	ldd	r24, Y+3	; 0x03
 104:	9c 81       	ldd	r25, Y+4	; 0x04
 106:	28 17       	cp	r18, r24
 108:	39 07       	cpc	r19, r25
 10a:	19 f4       	brne	.+6      	; 0x112 <_ZN19GraspingManipulator11setMaxForceEi+0x3c>
		return 0;
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <_ZN19GraspingManipulator11setMaxForceEi+0x40>
	}

	return -1;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	9f ef       	ldi	r25, 0xFF	; 255
}
 116:	0f 90       	pop	r0
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <_ZN19GraspingManipulator10getClosureEv>:

int GraspingManipulator:: getClosure() {
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	00 d0       	rcall	.+0      	; 0x12a <_ZN19GraspingManipulator10getClosureEv+0x6>
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
 12e:	9a 83       	std	Y+2, r25	; 0x02
 130:	89 83       	std	Y+1, r24	; 0x01
	return this->maxForce;
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	9a 81       	ldd	r25, Y+2	; 0x02
 136:	fc 01       	movw	r30, r24
 138:	80 81       	ld	r24, Z
 13a:	91 81       	ldd	r25, Z+1	; 0x01
 13c:	0f 90       	pop	r0
 13e:	0f 90       	pop	r0
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <main>:
#include "RobotArmManager.h"

int main(void) {
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	c9 5f       	subi	r28, 0xF9	; 249
 154:	d1 09       	sbc	r29, r1
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
	RobotArmManager robotArm;
 160:	ce 01       	movw	r24, r28
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	49 d6       	rcall	.+3218   	; 0xdf8 <_ZN15RobotArmManagerC1Ev>
	RotatingArmJoint rotatingArmJoint4;
	SlidingArmJoint slidingArmJoint1;
	SlidingArmJoint slidingArmJoint2;
	GraspingManipulator graspingManipulator;

	robotArm.addItsRotatingArmJoint(&rotatingArmJoint1);
 166:	ce 01       	movw	r24, r28
 168:	83 52       	subi	r24, 0x23	; 35
 16a:	9f 4f       	sbci	r25, 0xFF	; 255
 16c:	bc 01       	movw	r22, r24
 16e:	ce 01       	movw	r24, r28
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	6f d3       	rcall	.+1758   	; 0x852 <_ZN15RobotArmManager22addItsRotatingArmJointEP16RotatingArmJoint>
	robotArm.addItsRotatingArmJoint(&rotatingArmJoint2);
 174:	ce 01       	movw	r24, r28
 176:	80 52       	subi	r24, 0x20	; 32
 178:	9f 4f       	sbci	r25, 0xFF	; 255
 17a:	bc 01       	movw	r22, r24
 17c:	ce 01       	movw	r24, r28
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	68 d3       	rcall	.+1744   	; 0x852 <_ZN15RobotArmManager22addItsRotatingArmJointEP16RotatingArmJoint>
	robotArm.addItsRotatingArmJoint(&rotatingArmJoint3);
 182:	ce 01       	movw	r24, r28
 184:	8d 51       	subi	r24, 0x1D	; 29
 186:	9f 4f       	sbci	r25, 0xFF	; 255
 188:	bc 01       	movw	r22, r24
 18a:	ce 01       	movw	r24, r28
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	61 d3       	rcall	.+1730   	; 0x852 <_ZN15RobotArmManager22addItsRotatingArmJointEP16RotatingArmJoint>
	robotArm.addItsRotatingArmJoint(&rotatingArmJoint4);
 190:	ce 01       	movw	r24, r28
 192:	8a 51       	subi	r24, 0x1A	; 26
 194:	9f 4f       	sbci	r25, 0xFF	; 255
 196:	bc 01       	movw	r22, r24
 198:	ce 01       	movw	r24, r28
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	5a d3       	rcall	.+1716   	; 0x852 <_ZN15RobotArmManager22addItsRotatingArmJointEP16RotatingArmJoint>

	robotArm.addItsSlidingArmJoint(&slidingArmJoint1);
 19e:	ce 01       	movw	r24, r28
 1a0:	87 51       	subi	r24, 0x17	; 23
 1a2:	9f 4f       	sbci	r25, 0xFF	; 255
 1a4:	bc 01       	movw	r22, r24
 1a6:	ce 01       	movw	r24, r28
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	09 d4       	rcall	.+2066   	; 0x9be <_ZN15RobotArmManager21addItsSlidingArmJointEP15SlidingArmJoint>
	robotArm.addItsSlidingArmJoint(&slidingArmJoint2);
 1ac:	ce 01       	movw	r24, r28
 1ae:	80 51       	subi	r24, 0x10	; 16
 1b0:	9f 4f       	sbci	r25, 0xFF	; 255
 1b2:	bc 01       	movw	r22, r24
 1b4:	ce 01       	movw	r24, r28
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	02 d4       	rcall	.+2052   	; 0x9be <_ZN15RobotArmManager21addItsSlidingArmJointEP15SlidingArmJoint>

	robotArm.setItsGraspingManipulator(&graspingManipulator);
 1ba:	ce 01       	movw	r24, r28
 1bc:	89 50       	subi	r24, 0x09	; 9
 1be:	9f 4f       	sbci	r25, 0xFF	; 255
 1c0:	bc 01       	movw	r22, r24
 1c2:	ce 01       	movw	r24, r28
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	1d d3       	rcall	.+1594   	; 0x802 <_ZN15RobotArmManager25setItsGraspingManipulatorEP19GraspingManipulator>
 1c8:	04 e0       	ldi	r16, 0x04	; 4

	robotArm.computeTrajectory(1,2,3,4);
 1ca:	10 e0       	ldi	r17, 0x00	; 0
 1cc:	23 e0       	ldi	r18, 0x03	; 3
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	42 e0       	ldi	r20, 0x02	; 2
 1d2:	50 e0       	ldi	r21, 0x00	; 0
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	ce 01       	movw	r24, r28
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	0f d0       	rcall	.+30     	; 0x1fc <_ZN15RobotArmManager17computeTrajectoryEiiii>
	robotArm.executeStep();
 1de:	ce 01       	movw	r24, r28
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	a0 d0       	rcall	.+320    	; 0x324 <_ZN15RobotArmManager11executeStepEv>
 1e4:	01 e0       	ldi	r16, 0x01	; 1
	robotArm.graspAt(4,3,2,1);
 1e6:	10 e0       	ldi	r17, 0x00	; 0
 1e8:	22 e0       	ldi	r18, 0x02	; 2
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	43 e0       	ldi	r20, 0x03	; 3
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	64 e0       	ldi	r22, 0x04	; 4
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	ce 01       	movw	r24, r28
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	dd d1       	rcall	.+954    	; 0x5b4 <_ZN15RobotArmManager7graspAtEiiii>
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <main+0xb4>

000001fc <_ZN15RobotArmManager17computeTrajectoryEiiii>:

	while (1) {
 1fc:	0f 93       	push	r16
#include <stdlib.h>
#include "RobotArmManager.h"

static void cleanUpRelations(RobotArmManager* const me);

void RobotArmManager::computeTrajectory(int x, int y, int z, int t) {
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
 208:	ea 97       	sbiw	r28, 0x3a	; 58
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	f8 94       	cli
 20e:	de bf       	out	0x3e, r29	; 62
 210:	0f be       	out	0x3f, r0	; 63
 212:	cd bf       	out	0x3d, r28	; 61
 214:	9a ab       	std	Y+50, r25	; 0x32
 216:	89 ab       	std	Y+49, r24	; 0x31
 218:	7c ab       	std	Y+52, r23	; 0x34
 21a:	6b ab       	std	Y+51, r22	; 0x33
 21c:	5e ab       	std	Y+54, r21	; 0x36
 21e:	4d ab       	std	Y+53, r20	; 0x35
 220:	38 af       	std	Y+56, r19	; 0x38
 222:	2f ab       	std	Y+55, r18	; 0x37
 224:	1a af       	std	Y+58, r17	; 0x3a
 226:	09 af       	std	Y+57, r16	; 0x39
	Action ap1;

	this->nSteps = 0;
 228:	89 a9       	ldd	r24, Y+49	; 0x31
 22a:	9a a9       	ldd	r25, Y+50	; 0x32
 22c:	fc 01       	movw	r30, r24
 22e:	13 82       	std	Z+3, r1	; 0x03
 230:	12 82       	std	Z+2, r1	; 0x02
	this->clearItsAction();
 232:	89 a9       	ldd	r24, Y+49	; 0x31
 234:	9a a9       	ldd	r25, Y+50	; 0x32
 236:	fa d4       	rcall	.+2548   	; 0xc2c <_ZN15RobotArmManager14clearItsActionEv>

	this->addItsAction(&ap1);
 238:	89 a9       	ldd	r24, Y+49	; 0x31
 23a:	9a a9       	ldd	r25, Y+50	; 0x32
 23c:	9e 01       	movw	r18, r28
 23e:	2f 5f       	subi	r18, 0xFF	; 255
 240:	3f 4f       	sbci	r19, 0xFF	; 255
 242:	b9 01       	movw	r22, r18
 244:	72 d4       	rcall	.+2276   	; 0xb2a <_ZN15RobotArmManager12addItsActionEP6Action>

	ap1.rotatingArmJoint1 = 1;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	9a 83       	std	Y+2, r25	; 0x02
 24c:	89 83       	std	Y+1, r24	; 0x01
	ap1.rotatingArmJoint2 = 2;
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	9c 83       	std	Y+4, r25	; 0x04
 254:	8b 83       	std	Y+3, r24	; 0x03
	ap1.rotatingArmJoint3 = 3;
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	9e 83       	std	Y+6, r25	; 0x06
 25c:	8d 83       	std	Y+5, r24	; 0x05
	ap1.rotatingArmJoint4 = 4;
 25e:	84 e0       	ldi	r24, 0x04	; 4
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	98 87       	std	Y+8, r25	; 0x08
 264:	8f 83       	std	Y+7, r24	; 0x07

	ap1.slidingArmJoint1 = 10;
 266:	8a e0       	ldi	r24, 0x0A	; 10
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	9a 87       	std	Y+10, r25	; 0x0a
 26c:	89 87       	std	Y+9, r24	; 0x09
	ap1.slidingArmJoint2 = 20;
 26e:	84 e1       	ldi	r24, 0x14	; 20
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	9c 87       	std	Y+12, r25	; 0x0c
 274:	8b 87       	std	Y+11, r24	; 0x0b

	ap1.manipulatorForce = 0;
 276:	1e 86       	std	Y+14, r1	; 0x0e
 278:	1d 86       	std	Y+13, r1	; 0x0d
	ap1.manipulatorOpen = 1;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	98 8b       	std	Y+16, r25	; 0x10
 280:	8f 87       	std	Y+15, r24	; 0x0f

	Action ap2;
	this->addItsAction(&ap2);
 282:	9e 01       	movw	r18, r28
 284:	2f 5e       	subi	r18, 0xEF	; 239
 286:	3f 4f       	sbci	r19, 0xFF	; 255
 288:	89 a9       	ldd	r24, Y+49	; 0x31
 28a:	9a a9       	ldd	r25, Y+50	; 0x32
 28c:	b9 01       	movw	r22, r18
 28e:	4d d4       	rcall	.+2202   	; 0xb2a <_ZN15RobotArmManager12addItsActionEP6Action>

	ap2.rotatingArmJoint1 = 1;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	9a 8b       	std	Y+18, r25	; 0x12
 296:	89 8b       	std	Y+17, r24	; 0x11
	ap2.rotatingArmJoint2 = 2;
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	9c 8b       	std	Y+20, r25	; 0x14
 29e:	8b 8b       	std	Y+19, r24	; 0x13
	ap2.rotatingArmJoint3 = 3;
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	9e 8b       	std	Y+22, r25	; 0x16
 2a6:	8d 8b       	std	Y+21, r24	; 0x15
	ap2.rotatingArmJoint4 = 4;
 2a8:	84 e0       	ldi	r24, 0x04	; 4
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	98 8f       	std	Y+24, r25	; 0x18
 2ae:	8f 8b       	std	Y+23, r24	; 0x17

	ap2.slidingArmJoint1 = 10;
 2b0:	8a e0       	ldi	r24, 0x0A	; 10
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	9a 8f       	std	Y+26, r25	; 0x1a
 2b6:	89 8f       	std	Y+25, r24	; 0x19
	ap2.slidingArmJoint2 = 20;
 2b8:	84 e1       	ldi	r24, 0x14	; 20
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	9c 8f       	std	Y+28, r25	; 0x1c
 2be:	8b 8f       	std	Y+27, r24	; 0x1b

	ap2.manipulatorForce = 10;
 2c0:	8a e0       	ldi	r24, 0x0A	; 10
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	9e 8f       	std	Y+30, r25	; 0x1e
 2c6:	8d 8f       	std	Y+29, r24	; 0x1d
	ap2.manipulatorOpen = 0;
 2c8:	18 a2       	std	Y+32, r1	; 0x20
 2ca:	1f 8e       	std	Y+31, r1	; 0x1f

	Action ap3;
	this->addItsAction(&ap3);
 2cc:	9e 01       	movw	r18, r28
 2ce:	2f 5d       	subi	r18, 0xDF	; 223
 2d0:	3f 4f       	sbci	r19, 0xFF	; 255
 2d2:	89 a9       	ldd	r24, Y+49	; 0x31
 2d4:	9a a9       	ldd	r25, Y+50	; 0x32
 2d6:	b9 01       	movw	r22, r18
 2d8:	28 d4       	rcall	.+2128   	; 0xb2a <_ZN15RobotArmManager12addItsActionEP6Action>

	ap3.rotatingArmJoint1 = 0;
 2da:	1a a2       	std	Y+34, r1	; 0x22
 2dc:	19 a2       	std	Y+33, r1	; 0x21
	ap3.rotatingArmJoint2 = 0;
 2de:	1c a2       	std	Y+36, r1	; 0x24
 2e0:	1b a2       	std	Y+35, r1	; 0x23
	ap3.rotatingArmJoint3 = 0;
 2e2:	1e a2       	std	Y+38, r1	; 0x26
 2e4:	1d a2       	std	Y+37, r1	; 0x25
	ap3.rotatingArmJoint4 = 0;
 2e6:	18 a6       	std	Y+40, r1	; 0x28
 2e8:	1f a2       	std	Y+39, r1	; 0x27

	ap3.slidingArmJoint1 = 0;
 2ea:	1a a6       	std	Y+42, r1	; 0x2a
 2ec:	19 a6       	std	Y+41, r1	; 0x29
	ap3.slidingArmJoint2 = 0;
 2ee:	1c a6       	std	Y+44, r1	; 0x2c
 2f0:	1b a6       	std	Y+43, r1	; 0x2b

	ap3.manipulatorForce = 10;
 2f2:	8a e0       	ldi	r24, 0x0A	; 10
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	9e a7       	std	Y+46, r25	; 0x2e
 2f8:	8d a7       	std	Y+45, r24	; 0x2d
	ap3.manipulatorOpen = 0;
 2fa:	18 aa       	std	Y+48, r1	; 0x30
 2fc:	1f a6       	std	Y+47, r1	; 0x2f

	this->nSteps = 3;
 2fe:	89 a9       	ldd	r24, Y+49	; 0x31
 300:	9a a9       	ldd	r25, Y+50	; 0x32
 302:	23 e0       	ldi	r18, 0x03	; 3
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	fc 01       	movw	r30, r24
 308:	33 83       	std	Z+3, r19	; 0x03
 30a:	22 83       	std	Z+2, r18	; 0x02
}
 30c:	00 00       	nop
 30e:	ea 96       	adiw	r28, 0x3a	; 58
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	f8 94       	cli
 314:	de bf       	out	0x3e, r29	; 62
 316:	0f be       	out	0x3f, r0	; 63
 318:	cd bf       	out	0x3d, r28	; 61
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	08 95       	ret

00000324 <_ZN15RobotArmManager11executeStepEv>:

int RobotArmManager::executeStep() {
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 32c:	28 97       	sbiw	r28, 0x08	; 8
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	f8 94       	cli
 332:	de bf       	out	0x3e, r29	; 62
 334:	0f be       	out	0x3f, r0	; 63
 336:	cd bf       	out	0x3d, r28	; 61
 338:	98 87       	std	Y+8, r25	; 0x08
 33a:	8f 83       	std	Y+7, r24	; 0x07
	int actionValue = 0;
 33c:	1c 82       	std	Y+4, r1	; 0x04
 33e:	1b 82       	std	Y+3, r1	; 0x03
	int step = this->currentStep;
 340:	8f 81       	ldd	r24, Y+7	; 0x07
 342:	98 85       	ldd	r25, Y+8	; 0x08
 344:	fc 01       	movw	r30, r24
 346:	80 81       	ld	r24, Z
 348:	91 81       	ldd	r25, Z+1	; 0x01
 34a:	9e 83       	std	Y+6, r25	; 0x06
 34c:	8d 83       	std	Y+5, r24	; 0x05
	int status = 0;
 34e:	1a 82       	std	Y+2, r1	; 0x02
 350:	19 82       	std	Y+1, r1	; 0x01

	if (this->itsAction[step]) {
 352:	2f 81       	ldd	r18, Y+7	; 0x07
 354:	38 85       	ldd	r19, Y+8	; 0x08
 356:	8d 81       	ldd	r24, Y+5	; 0x05
 358:	9e 81       	ldd	r25, Y+6	; 0x06
 35a:	09 96       	adiw	r24, 0x09	; 9
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	82 0f       	add	r24, r18
 362:	93 1f       	adc	r25, r19
 364:	fc 01       	movw	r30, r24
 366:	80 81       	ld	r24, Z
 368:	91 81       	ldd	r25, Z+1	; 0x01
 36a:	89 2b       	or	r24, r25
 36c:	09 f4       	brne	.+2      	; 0x370 <_ZN15RobotArmManager11executeStepEv+0x4c>
 36e:	17 c1       	rjmp	.+558    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
		actionValue = this->itsAction[step]->rotatingArmJoint1;
 370:	2f 81       	ldd	r18, Y+7	; 0x07
 372:	38 85       	ldd	r19, Y+8	; 0x08
 374:	8d 81       	ldd	r24, Y+5	; 0x05
 376:	9e 81       	ldd	r25, Y+6	; 0x06
 378:	09 96       	adiw	r24, 0x09	; 9
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	82 0f       	add	r24, r18
 380:	93 1f       	adc	r25, r19
 382:	fc 01       	movw	r30, r24
 384:	80 81       	ld	r24, Z
 386:	91 81       	ldd	r25, Z+1	; 0x01
 388:	fc 01       	movw	r30, r24
 38a:	80 81       	ld	r24, Z
 38c:	91 81       	ldd	r25, Z+1	; 0x01
 38e:	9c 83       	std	Y+4, r25	; 0x04
 390:	8b 83       	std	Y+3, r24	; 0x03
		status = this->itsRotatingArmJoint[0]->rotate(actionValue);
 392:	8f 81       	ldd	r24, Y+7	; 0x07
 394:	98 85       	ldd	r25, Y+8	; 0x08
 396:	fc 01       	movw	r30, r24
 398:	86 81       	ldd	r24, Z+6	; 0x06
 39a:	97 81       	ldd	r25, Z+7	; 0x07
 39c:	2b 81       	ldd	r18, Y+3	; 0x03
 39e:	3c 81       	ldd	r19, Y+4	; 0x04
 3a0:	b9 01       	movw	r22, r18
 3a2:	7e d4       	rcall	.+2300   	; 0xca0 <_ZN16RotatingArmJoint6rotateEi>
 3a4:	9a 83       	std	Y+2, r25	; 0x02
 3a6:	89 83       	std	Y+1, r24	; 0x01
		if (status) {
 3a8:	89 81       	ldd	r24, Y+1	; 0x01
 3aa:	9a 81       	ldd	r25, Y+2	; 0x02
 3ac:	89 2b       	or	r24, r25
 3ae:	19 f0       	breq	.+6      	; 0x3b6 <_ZN15RobotArmManager11executeStepEv+0x92>
			return status;
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	9a 81       	ldd	r25, Y+2	; 0x02
 3b4:	f6 c0       	rjmp	.+492    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
		}

		actionValue = this->itsAction[step]->rotatingArmJoint2;
 3b6:	2f 81       	ldd	r18, Y+7	; 0x07
 3b8:	38 85       	ldd	r19, Y+8	; 0x08
 3ba:	8d 81       	ldd	r24, Y+5	; 0x05
 3bc:	9e 81       	ldd	r25, Y+6	; 0x06
 3be:	09 96       	adiw	r24, 0x09	; 9
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	82 0f       	add	r24, r18
 3c6:	93 1f       	adc	r25, r19
 3c8:	fc 01       	movw	r30, r24
 3ca:	80 81       	ld	r24, Z
 3cc:	91 81       	ldd	r25, Z+1	; 0x01
 3ce:	fc 01       	movw	r30, r24
 3d0:	82 81       	ldd	r24, Z+2	; 0x02
 3d2:	93 81       	ldd	r25, Z+3	; 0x03
 3d4:	9c 83       	std	Y+4, r25	; 0x04
 3d6:	8b 83       	std	Y+3, r24	; 0x03
		status = this->itsRotatingArmJoint[1]->rotate(actionValue);
 3d8:	8f 81       	ldd	r24, Y+7	; 0x07
 3da:	98 85       	ldd	r25, Y+8	; 0x08
 3dc:	fc 01       	movw	r30, r24
 3de:	80 85       	ldd	r24, Z+8	; 0x08
 3e0:	91 85       	ldd	r25, Z+9	; 0x09
 3e2:	2b 81       	ldd	r18, Y+3	; 0x03
 3e4:	3c 81       	ldd	r19, Y+4	; 0x04
 3e6:	b9 01       	movw	r22, r18
 3e8:	5b d4       	rcall	.+2230   	; 0xca0 <_ZN16RotatingArmJoint6rotateEi>
 3ea:	9a 83       	std	Y+2, r25	; 0x02
 3ec:	89 83       	std	Y+1, r24	; 0x01
		if (status) {
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	9a 81       	ldd	r25, Y+2	; 0x02
 3f2:	89 2b       	or	r24, r25
 3f4:	19 f0       	breq	.+6      	; 0x3fc <_ZN15RobotArmManager11executeStepEv+0xd8>
			return status;
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	9a 81       	ldd	r25, Y+2	; 0x02
 3fa:	d3 c0       	rjmp	.+422    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
		}

		actionValue = this->itsAction[step]->rotatingArmJoint3;
 3fc:	2f 81       	ldd	r18, Y+7	; 0x07
 3fe:	38 85       	ldd	r19, Y+8	; 0x08
 400:	8d 81       	ldd	r24, Y+5	; 0x05
 402:	9e 81       	ldd	r25, Y+6	; 0x06
 404:	09 96       	adiw	r24, 0x09	; 9
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	82 0f       	add	r24, r18
 40c:	93 1f       	adc	r25, r19
 40e:	fc 01       	movw	r30, r24
 410:	80 81       	ld	r24, Z
 412:	91 81       	ldd	r25, Z+1	; 0x01
 414:	fc 01       	movw	r30, r24
 416:	84 81       	ldd	r24, Z+4	; 0x04
 418:	95 81       	ldd	r25, Z+5	; 0x05
 41a:	9c 83       	std	Y+4, r25	; 0x04
 41c:	8b 83       	std	Y+3, r24	; 0x03
		status = this->itsRotatingArmJoint[2]->rotate(actionValue);
 41e:	8f 81       	ldd	r24, Y+7	; 0x07
 420:	98 85       	ldd	r25, Y+8	; 0x08
 422:	fc 01       	movw	r30, r24
 424:	82 85       	ldd	r24, Z+10	; 0x0a
 426:	93 85       	ldd	r25, Z+11	; 0x0b
 428:	2b 81       	ldd	r18, Y+3	; 0x03
 42a:	3c 81       	ldd	r19, Y+4	; 0x04
 42c:	b9 01       	movw	r22, r18
 42e:	38 d4       	rcall	.+2160   	; 0xca0 <_ZN16RotatingArmJoint6rotateEi>
 430:	9a 83       	std	Y+2, r25	; 0x02
 432:	89 83       	std	Y+1, r24	; 0x01
		if (status) {
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	9a 81       	ldd	r25, Y+2	; 0x02
 438:	89 2b       	or	r24, r25
 43a:	19 f0       	breq	.+6      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			return status;
 43c:	89 81       	ldd	r24, Y+1	; 0x01
 43e:	9a 81       	ldd	r25, Y+2	; 0x02
 440:	b0 c0       	rjmp	.+352    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
		}

		actionValue = this->itsAction[step]->rotatingArmJoint4;
 442:	2f 81       	ldd	r18, Y+7	; 0x07
 444:	38 85       	ldd	r19, Y+8	; 0x08
 446:	8d 81       	ldd	r24, Y+5	; 0x05
 448:	9e 81       	ldd	r25, Y+6	; 0x06
 44a:	09 96       	adiw	r24, 0x09	; 9
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	82 0f       	add	r24, r18
 452:	93 1f       	adc	r25, r19
 454:	fc 01       	movw	r30, r24
 456:	80 81       	ld	r24, Z
 458:	91 81       	ldd	r25, Z+1	; 0x01
 45a:	fc 01       	movw	r30, r24
 45c:	86 81       	ldd	r24, Z+6	; 0x06
 45e:	97 81       	ldd	r25, Z+7	; 0x07
 460:	9c 83       	std	Y+4, r25	; 0x04
 462:	8b 83       	std	Y+3, r24	; 0x03
		status = this->itsRotatingArmJoint[3]->rotate(actionValue);
 464:	8f 81       	ldd	r24, Y+7	; 0x07
 466:	98 85       	ldd	r25, Y+8	; 0x08
 468:	fc 01       	movw	r30, r24
 46a:	84 85       	ldd	r24, Z+12	; 0x0c
 46c:	95 85       	ldd	r25, Z+13	; 0x0d
 46e:	2b 81       	ldd	r18, Y+3	; 0x03
 470:	3c 81       	ldd	r19, Y+4	; 0x04
 472:	b9 01       	movw	r22, r18
 474:	15 d4       	rcall	.+2090   	; 0xca0 <_ZN16RotatingArmJoint6rotateEi>
 476:	9a 83       	std	Y+2, r25	; 0x02
 478:	89 83       	std	Y+1, r24	; 0x01
		if (status) {
 47a:	89 81       	ldd	r24, Y+1	; 0x01
 47c:	9a 81       	ldd	r25, Y+2	; 0x02
 47e:	89 2b       	or	r24, r25
 480:	19 f0       	breq	.+6      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
			return status;
 482:	89 81       	ldd	r24, Y+1	; 0x01
 484:	9a 81       	ldd	r25, Y+2	; 0x02
 486:	8d c0       	rjmp	.+282    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
		}

		actionValue = this->itsAction[step]->slidingArmJoint1;
 488:	2f 81       	ldd	r18, Y+7	; 0x07
 48a:	38 85       	ldd	r19, Y+8	; 0x08
 48c:	8d 81       	ldd	r24, Y+5	; 0x05
 48e:	9e 81       	ldd	r25, Y+6	; 0x06
 490:	09 96       	adiw	r24, 0x09	; 9
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	82 0f       	add	r24, r18
 498:	93 1f       	adc	r25, r19
 49a:	fc 01       	movw	r30, r24
 49c:	80 81       	ld	r24, Z
 49e:	91 81       	ldd	r25, Z+1	; 0x01
 4a0:	fc 01       	movw	r30, r24
 4a2:	80 85       	ldd	r24, Z+8	; 0x08
 4a4:	91 85       	ldd	r25, Z+9	; 0x09
 4a6:	9c 83       	std	Y+4, r25	; 0x04
 4a8:	8b 83       	std	Y+3, r24	; 0x03
		status = this->itsSlidingArmJoint[0]->setLength(actionValue);
 4aa:	8f 81       	ldd	r24, Y+7	; 0x07
 4ac:	98 85       	ldd	r25, Y+8	; 0x08
 4ae:	fc 01       	movw	r30, r24
 4b0:	86 85       	ldd	r24, Z+14	; 0x0e
 4b2:	97 85       	ldd	r25, Z+15	; 0x0f
 4b4:	2b 81       	ldd	r18, Y+3	; 0x03
 4b6:	3c 81       	ldd	r19, Y+4	; 0x04
 4b8:	b9 01       	movw	r22, r18
 4ba:	50 d4       	rcall	.+2208   	; 0xd5c <_ZN15SlidingArmJoint9setLengthEi>
 4bc:	9a 83       	std	Y+2, r25	; 0x02
 4be:	89 83       	std	Y+1, r24	; 0x01
		if (status) {
 4c0:	89 81       	ldd	r24, Y+1	; 0x01
 4c2:	9a 81       	ldd	r25, Y+2	; 0x02
 4c4:	89 2b       	or	r24, r25
 4c6:	19 f0       	breq	.+6      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
			return status;
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
 4ca:	9a 81       	ldd	r25, Y+2	; 0x02
 4cc:	6a c0       	rjmp	.+212    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
		}

		actionValue = this->itsAction[step]->slidingArmJoint2;
 4ce:	2f 81       	ldd	r18, Y+7	; 0x07
 4d0:	38 85       	ldd	r19, Y+8	; 0x08
 4d2:	8d 81       	ldd	r24, Y+5	; 0x05
 4d4:	9e 81       	ldd	r25, Y+6	; 0x06
 4d6:	09 96       	adiw	r24, 0x09	; 9
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	82 0f       	add	r24, r18
 4de:	93 1f       	adc	r25, r19
 4e0:	fc 01       	movw	r30, r24
 4e2:	80 81       	ld	r24, Z
 4e4:	91 81       	ldd	r25, Z+1	; 0x01
 4e6:	fc 01       	movw	r30, r24
 4e8:	82 85       	ldd	r24, Z+10	; 0x0a
 4ea:	93 85       	ldd	r25, Z+11	; 0x0b
 4ec:	9c 83       	std	Y+4, r25	; 0x04
		status = this->itsSlidingArmJoint[1]->setLength(actionValue);
 4ee:	8b 83       	std	Y+3, r24	; 0x03
 4f0:	8f 81       	ldd	r24, Y+7	; 0x07
 4f2:	98 85       	ldd	r25, Y+8	; 0x08
 4f4:	fc 01       	movw	r30, r24
 4f6:	80 89       	ldd	r24, Z+16	; 0x10
 4f8:	91 89       	ldd	r25, Z+17	; 0x11
 4fa:	2b 81       	ldd	r18, Y+3	; 0x03
 4fc:	3c 81       	ldd	r19, Y+4	; 0x04
 4fe:	b9 01       	movw	r22, r18
 500:	2d d4       	rcall	.+2138   	; 0xd5c <_ZN15SlidingArmJoint9setLengthEi>
 502:	9a 83       	std	Y+2, r25	; 0x02
 504:	89 83       	std	Y+1, r24	; 0x01
		if (status) {
 506:	89 81       	ldd	r24, Y+1	; 0x01
 508:	9a 81       	ldd	r25, Y+2	; 0x02
 50a:	89 2b       	or	r24, r25
 50c:	19 f0       	breq	.+6      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
			return status;
 50e:	89 81       	ldd	r24, Y+1	; 0x01
 510:	9a 81       	ldd	r25, Y+2	; 0x02
 512:	47 c0       	rjmp	.+142    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
		}

		actionValue = this->itsAction[step]->manipulatorForce;
 514:	2f 81       	ldd	r18, Y+7	; 0x07
 516:	38 85       	ldd	r19, Y+8	; 0x08
 518:	8d 81       	ldd	r24, Y+5	; 0x05
 51a:	9e 81       	ldd	r25, Y+6	; 0x06
 51c:	09 96       	adiw	r24, 0x09	; 9
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	82 0f       	add	r24, r18
 524:	93 1f       	adc	r25, r19
 526:	fc 01       	movw	r30, r24
 528:	80 81       	ld	r24, Z
 52a:	91 81       	ldd	r25, Z+1	; 0x01
 52c:	fc 01       	movw	r30, r24
 52e:	84 85       	ldd	r24, Z+12	; 0x0c
 530:	95 85       	ldd	r25, Z+13	; 0x0d
 532:	9c 83       	std	Y+4, r25	; 0x04
		status = this->itsGraspingManipulator->setMaxForce(actionValue);
 534:	8b 83       	std	Y+3, r24	; 0x03
 536:	8f 81       	ldd	r24, Y+7	; 0x07
 538:	98 85       	ldd	r25, Y+8	; 0x08
 53a:	fc 01       	movw	r30, r24
 53c:	84 81       	ldd	r24, Z+4	; 0x04
 53e:	95 81       	ldd	r25, Z+5	; 0x05
 540:	2b 81       	ldd	r18, Y+3	; 0x03
 542:	3c 81       	ldd	r19, Y+4	; 0x04
 544:	b9 01       	movw	r22, r18
 546:	c7 dd       	rcall	.-1138   	; 0xd6 <_ZN19GraspingManipulator11setMaxForceEi>
 548:	9a 83       	std	Y+2, r25	; 0x02
 54a:	89 83       	std	Y+1, r24	; 0x01
		if (status) {
 54c:	89 81       	ldd	r24, Y+1	; 0x01
 54e:	9a 81       	ldd	r25, Y+2	; 0x02
 550:	89 2b       	or	r24, r25
 552:	19 f0       	breq	.+6      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
			return status;
 554:	89 81       	ldd	r24, Y+1	; 0x01
 556:	9a 81       	ldd	r25, Y+2	; 0x02
 558:	24 c0       	rjmp	.+72     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
		}

		if (this->itsAction[step]->manipulatorOpen) {
 55a:	2f 81       	ldd	r18, Y+7	; 0x07
 55c:	38 85       	ldd	r19, Y+8	; 0x08
 55e:	8d 81       	ldd	r24, Y+5	; 0x05
 560:	9e 81       	ldd	r25, Y+6	; 0x06
 562:	09 96       	adiw	r24, 0x09	; 9
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	82 0f       	add	r24, r18
 56a:	93 1f       	adc	r25, r19
 56c:	fc 01       	movw	r30, r24
 56e:	80 81       	ld	r24, Z
 570:	91 81       	ldd	r25, Z+1	; 0x01
 572:	fc 01       	movw	r30, r24
 574:	86 85       	ldd	r24, Z+14	; 0x0e
 576:	97 85       	ldd	r25, Z+15	; 0x0f
 578:	89 2b       	or	r24, r25
			status = this->itsGraspingManipulator->open();
 57a:	49 f0       	breq	.+18     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 57c:	8f 81       	ldd	r24, Y+7	; 0x07
 57e:	98 85       	ldd	r25, Y+8	; 0x08
 580:	fc 01       	movw	r30, r24
 582:	84 81       	ldd	r24, Z+4	; 0x04
 584:	95 81       	ldd	r25, Z+5	; 0x05
 586:	8b dd       	rcall	.-1258   	; 0x9e <_ZN19GraspingManipulator4openEv>
 588:	9a 83       	std	Y+2, r25	; 0x02
 58a:	89 83       	std	Y+1, r24	; 0x01
		}
		else {
			status = this->itsGraspingManipulator->close();
 58c:	08 c0       	rjmp	.+16     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 58e:	8f 81       	ldd	r24, Y+7	; 0x07
 590:	98 85       	ldd	r25, Y+8	; 0x08
 592:	fc 01       	movw	r30, r24
 594:	84 81       	ldd	r24, Z+4	; 0x04
 596:	95 81       	ldd	r25, Z+5	; 0x05
 598:	90 dd       	rcall	.-1248   	; 0xba <_ZN19GraspingManipulator5closeEv>
 59a:	9a 83       	std	Y+2, r25	; 0x02
 59c:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return status;
 59e:	89 81       	ldd	r24, Y+1	; 0x01
 5a0:	9a 81       	ldd	r25, Y+2	; 0x02
}
 5a2:	28 96       	adiw	r28, 0x08	; 8
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	f8 94       	cli
 5a8:	de bf       	out	0x3e, r29	; 62
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	cd bf       	out	0x3d, r28	; 61
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	08 95       	ret

000005b4 <_ZN15RobotArmManager7graspAtEiiii>:

int RobotArmManager::graspAt(int x, int y, int z, int t) {
 5b4:	0f 93       	push	r16
 5b6:	1f 93       	push	r17
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	cd b7       	in	r28, 0x3d	; 61
 5be:	de b7       	in	r29, 0x3e	; 62
 5c0:	2a 97       	sbiw	r28, 0x0a	; 10
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	f8 94       	cli
 5c6:	de bf       	out	0x3e, r29	; 62
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	cd bf       	out	0x3d, r28	; 61
 5cc:	9a 83       	std	Y+2, r25	; 0x02
 5ce:	89 83       	std	Y+1, r24	; 0x01
 5d0:	7c 83       	std	Y+4, r23	; 0x04
 5d2:	6b 83       	std	Y+3, r22	; 0x03
 5d4:	5e 83       	std	Y+6, r21	; 0x06
 5d6:	4d 83       	std	Y+5, r20	; 0x05
 5d8:	38 87       	std	Y+8, r19	; 0x08
 5da:	2f 83       	std	Y+7, r18	; 0x07
 5dc:	1a 87       	std	Y+10, r17	; 0x0a
 5de:	09 87       	std	Y+9, r16	; 0x09
	this->currentStep = -1;
 5e0:	89 81       	ldd	r24, Y+1	; 0x01
 5e2:	9a 81       	ldd	r25, Y+2	; 0x02
 5e4:	2f ef       	ldi	r18, 0xFF	; 255
 5e6:	3f ef       	ldi	r19, 0xFF	; 255
 5e8:	fc 01       	movw	r30, r24
 5ea:	31 83       	std	Z+1, r19	; 0x01
	this->nSteps = 0;
 5ec:	20 83       	st	Z, r18
 5ee:	89 81       	ldd	r24, Y+1	; 0x01
 5f0:	9a 81       	ldd	r25, Y+2	; 0x02
 5f2:	fc 01       	movw	r30, r24
 5f4:	13 82       	std	Z+3, r1	; 0x03
	this->zero();
 5f6:	12 82       	std	Z+2, r1	; 0x02
 5f8:	89 81       	ldd	r24, Y+1	; 0x01
 5fa:	9a 81       	ldd	r25, Y+2	; 0x02
	this->computeTrajectory(x, y, z, t);
 5fc:	5e d0       	rcall	.+188    	; 0x6ba <_ZN15RobotArmManager4zeroEv>
 5fe:	e9 85       	ldd	r30, Y+9	; 0x09
 600:	fa 85       	ldd	r31, Y+10	; 0x0a
 602:	2f 81       	ldd	r18, Y+7	; 0x07
 604:	38 85       	ldd	r19, Y+8	; 0x08
 606:	4d 81       	ldd	r20, Y+5	; 0x05
 608:	5e 81       	ldd	r21, Y+6	; 0x06
 60a:	6b 81       	ldd	r22, Y+3	; 0x03
 60c:	7c 81       	ldd	r23, Y+4	; 0x04
 60e:	89 81       	ldd	r24, Y+1	; 0x01
 610:	9a 81       	ldd	r25, Y+2	; 0x02
 612:	8f 01       	movw	r16, r30
 614:	f3 dd       	rcall	.-1050   	; 0x1fc <_ZN15RobotArmManager17computeTrajectoryEiiii>

	if (this->nSteps == 0) {
 616:	89 81       	ldd	r24, Y+1	; 0x01
 618:	9a 81       	ldd	r25, Y+2	; 0x02
 61a:	fc 01       	movw	r30, r24
 61c:	82 81       	ldd	r24, Z+2	; 0x02
 61e:	93 81       	ldd	r25, Z+3	; 0x03
 620:	89 2b       	or	r24, r25
 622:	51 f4       	brne	.+20     	; 0x638 <_ZN15RobotArmManager7graspAtEiiii+0x84>
		this->status = -1;
 624:	89 81       	ldd	r24, Y+1	; 0x01
 626:	9a 81       	ldd	r25, Y+2	; 0x02
 628:	86 52       	subi	r24, 0x26	; 38
 62a:	9f 4f       	sbci	r25, 0xFF	; 255
 62c:	2f ef       	ldi	r18, 0xFF	; 255
 62e:	3f ef       	ldi	r19, 0xFF	; 255
 630:	fc 01       	movw	r30, r24
 632:	31 83       	std	Z+1, r19	; 0x01
 634:	20 83       	st	Z, r18
 636:	2f c0       	rjmp	.+94     	; 0x696 <_ZN15RobotArmManager7graspAtEiiii+0xe2>
	}
	else {
		do {
			this->currentStep++;
 638:	89 81       	ldd	r24, Y+1	; 0x01
 63a:	9a 81       	ldd	r25, Y+2	; 0x02
 63c:	fc 01       	movw	r30, r24
 63e:	80 81       	ld	r24, Z
 640:	91 81       	ldd	r25, Z+1	; 0x01
 642:	9c 01       	movw	r18, r24
 644:	2f 5f       	subi	r18, 0xFF	; 255
 646:	3f 4f       	sbci	r19, 0xFF	; 255
 648:	89 81       	ldd	r24, Y+1	; 0x01
 64a:	9a 81       	ldd	r25, Y+2	; 0x02
 64c:	fc 01       	movw	r30, r24
 64e:	31 83       	std	Z+1, r19	; 0x01
			this->status = this->executeStep();
 650:	20 83       	st	Z, r18
 652:	89 81       	ldd	r24, Y+1	; 0x01
 654:	9a 81       	ldd	r25, Y+2	; 0x02
 656:	66 de       	rcall	.-820    	; 0x324 <_ZN15RobotArmManager11executeStepEv>
 658:	9c 01       	movw	r18, r24
 65a:	89 81       	ldd	r24, Y+1	; 0x01
 65c:	9a 81       	ldd	r25, Y+2	; 0x02
 65e:	86 52       	subi	r24, 0x26	; 38
 660:	9f 4f       	sbci	r25, 0xFF	; 255
 662:	fc 01       	movw	r30, r24
 664:	31 83       	std	Z+1, r19	; 0x01
 666:	20 83       	st	Z, r18
		} while (this->status == 0 && this->currentStep < this->nSteps);
 668:	89 81       	ldd	r24, Y+1	; 0x01
 66a:	9a 81       	ldd	r25, Y+2	; 0x02
 66c:	86 52       	subi	r24, 0x26	; 38
 66e:	9f 4f       	sbci	r25, 0xFF	; 255
 670:	fc 01       	movw	r30, r24
 672:	80 81       	ld	r24, Z
 674:	91 81       	ldd	r25, Z+1	; 0x01
 676:	89 2b       	or	r24, r25
 678:	71 f4       	brne	.+28     	; 0x696 <_ZN15RobotArmManager7graspAtEiiii+0xe2>
 67a:	89 81       	ldd	r24, Y+1	; 0x01
 67c:	9a 81       	ldd	r25, Y+2	; 0x02
 67e:	fc 01       	movw	r30, r24
 680:	20 81       	ld	r18, Z
 682:	31 81       	ldd	r19, Z+1	; 0x01
 684:	89 81       	ldd	r24, Y+1	; 0x01
 686:	9a 81       	ldd	r25, Y+2	; 0x02
 688:	fc 01       	movw	r30, r24
 68a:	82 81       	ldd	r24, Z+2	; 0x02
 68c:	93 81       	ldd	r25, Z+3	; 0x03
 68e:	28 17       	cp	r18, r24
 690:	39 07       	cpc	r19, r25
 692:	08 f4       	brcc	.+2      	; 0x696 <_ZN15RobotArmManager7graspAtEiiii+0xe2>

	if (this->nSteps == 0) {
		this->status = -1;
	}
	else {
		do {
 694:	d1 cf       	rjmp	.-94     	; 0x638 <_ZN15RobotArmManager7graspAtEiiii+0x84>
			this->currentStep++;
			this->status = this->executeStep();
		} while (this->status == 0 && this->currentStep < this->nSteps);
	}

	return this->status;
 696:	89 81       	ldd	r24, Y+1	; 0x01
 698:	9a 81       	ldd	r25, Y+2	; 0x02
 69a:	86 52       	subi	r24, 0x26	; 38
 69c:	9f 4f       	sbci	r25, 0xFF	; 255
 69e:	fc 01       	movw	r30, r24
 6a0:	80 81       	ld	r24, Z
 6a2:	91 81       	ldd	r25, Z+1	; 0x01
}
 6a4:	2a 96       	adiw	r28, 0x0a	; 10
 6a6:	0f b6       	in	r0, 0x3f	; 63
 6a8:	f8 94       	cli
 6aa:	de bf       	out	0x3e, r29	; 62
 6ac:	0f be       	out	0x3f, r0	; 63
 6ae:	cd bf       	out	0x3d, r28	; 61
 6b0:	df 91       	pop	r29
 6b2:	cf 91       	pop	r28
 6b4:	1f 91       	pop	r17
 6b6:	0f 91       	pop	r16
 6b8:	08 95       	ret

000006ba <_ZN15RobotArmManager4zeroEv>:

int RobotArmManager::zero() {
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
 6be:	00 d0       	rcall	.+0      	; 0x6c0 <_ZN15RobotArmManager4zeroEv+0x6>
 6c0:	00 d0       	rcall	.+0      	; 0x6c2 <_ZN15RobotArmManager4zeroEv+0x8>
 6c2:	00 d0       	rcall	.+0      	; 0x6c4 <_ZN15RobotArmManager4zeroEv+0xa>
 6c4:	cd b7       	in	r28, 0x3d	; 61
 6c6:	de b7       	in	r29, 0x3e	; 62
 6c8:	9e 83       	std	Y+6, r25	; 0x06
 6ca:	8d 83       	std	Y+5, r24	; 0x05
	for (int j = 0; j < 4; ++j) {
 6cc:	1a 82       	std	Y+2, r1	; 0x02
 6ce:	19 82       	std	Y+1, r1	; 0x01
 6d0:	89 81       	ldd	r24, Y+1	; 0x01
 6d2:	9a 81       	ldd	r25, Y+2	; 0x02
 6d4:	04 97       	sbiw	r24, 0x04	; 4
 6d6:	6c f5       	brge	.+90     	; 0x732 <_ZN15RobotArmManager4zeroEv+0x78>
		if (this->itsRotatingArmJoint[j] == nullptr) {
 6d8:	2d 81       	ldd	r18, Y+5	; 0x05
 6da:	3e 81       	ldd	r19, Y+6	; 0x06
 6dc:	89 81       	ldd	r24, Y+1	; 0x01
 6de:	9a 81       	ldd	r25, Y+2	; 0x02
 6e0:	03 96       	adiw	r24, 0x03	; 3
 6e2:	88 0f       	add	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	82 0f       	add	r24, r18
 6e8:	93 1f       	adc	r25, r19
 6ea:	fc 01       	movw	r30, r24
 6ec:	80 81       	ld	r24, Z
 6ee:	91 81       	ldd	r25, Z+1	; 0x01
 6f0:	89 2b       	or	r24, r25
			return -1;
 6f2:	19 f4       	brne	.+6      	; 0x6fa <_ZN15RobotArmManager4zeroEv+0x40>
 6f4:	8f ef       	ldi	r24, 0xFF	; 255
 6f6:	9f ef       	ldi	r25, 0xFF	; 255
		}

		if (this->itsRotatingArmJoint[j]->zero()) {
 6f8:	6a c0       	rjmp	.+212    	; 0x7ce <_ZN15RobotArmManager4zeroEv+0x114>
 6fa:	2d 81       	ldd	r18, Y+5	; 0x05
 6fc:	3e 81       	ldd	r19, Y+6	; 0x06
 6fe:	89 81       	ldd	r24, Y+1	; 0x01
 700:	9a 81       	ldd	r25, Y+2	; 0x02
 702:	03 96       	adiw	r24, 0x03	; 3
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	82 0f       	add	r24, r18
 70a:	93 1f       	adc	r25, r19
 70c:	fc 01       	movw	r30, r24
 70e:	80 81       	ld	r24, Z
 710:	91 81       	ldd	r25, Z+1	; 0x01
 712:	f6 d2       	rcall	.+1516   	; 0xd00 <_ZN16RotatingArmJoint4zeroEv>
 714:	21 e0       	ldi	r18, 0x01	; 1
 716:	89 2b       	or	r24, r25
 718:	09 f4       	brne	.+2      	; 0x71c <_ZN15RobotArmManager4zeroEv+0x62>
 71a:	20 e0       	ldi	r18, 0x00	; 0
 71c:	22 23       	and	r18, r18
 71e:	19 f0       	breq	.+6      	; 0x726 <_ZN15RobotArmManager4zeroEv+0x6c>
			return -1;
 720:	8f ef       	ldi	r24, 0xFF	; 255
 722:	9f ef       	ldi	r25, 0xFF	; 255
 724:	54 c0       	rjmp	.+168    	; 0x7ce <_ZN15RobotArmManager4zeroEv+0x114>

	return this->status;
}

int RobotArmManager::zero() {
	for (int j = 0; j < 4; ++j) {
 726:	89 81       	ldd	r24, Y+1	; 0x01
 728:	9a 81       	ldd	r25, Y+2	; 0x02
 72a:	01 96       	adiw	r24, 0x01	; 1
 72c:	9a 83       	std	Y+2, r25	; 0x02
 72e:	89 83       	std	Y+1, r24	; 0x01
 730:	cf cf       	rjmp	.-98     	; 0x6d0 <_ZN15RobotArmManager4zeroEv+0x16>
		if (this->itsRotatingArmJoint[j]->zero()) {
			return -1;
		}
	}

	for (int j = 0; j < 2; ++j) {
 732:	1c 82       	std	Y+4, r1	; 0x04
 734:	1b 82       	std	Y+3, r1	; 0x03
 736:	8b 81       	ldd	r24, Y+3	; 0x03
 738:	9c 81       	ldd	r25, Y+4	; 0x04
 73a:	02 97       	sbiw	r24, 0x02	; 2
 73c:	6c f5       	brge	.+90     	; 0x798 <_ZN15RobotArmManager4zeroEv+0xde>
		if (this->itsSlidingArmJoint[j] == nullptr) {
 73e:	2d 81       	ldd	r18, Y+5	; 0x05
 740:	3e 81       	ldd	r19, Y+6	; 0x06
 742:	8b 81       	ldd	r24, Y+3	; 0x03
 744:	9c 81       	ldd	r25, Y+4	; 0x04
 746:	07 96       	adiw	r24, 0x07	; 7
 748:	88 0f       	add	r24, r24
 74a:	99 1f       	adc	r25, r25
 74c:	82 0f       	add	r24, r18
 74e:	93 1f       	adc	r25, r19
 750:	fc 01       	movw	r30, r24
 752:	80 81       	ld	r24, Z
 754:	91 81       	ldd	r25, Z+1	; 0x01
 756:	89 2b       	or	r24, r25
			return -1;
 758:	19 f4       	brne	.+6      	; 0x760 <_ZN15RobotArmManager4zeroEv+0xa6>
 75a:	8f ef       	ldi	r24, 0xFF	; 255
 75c:	9f ef       	ldi	r25, 0xFF	; 255
		}

		if (this->itsSlidingArmJoint[j]->zero()) {
 75e:	37 c0       	rjmp	.+110    	; 0x7ce <_ZN15RobotArmManager4zeroEv+0x114>
 760:	2d 81       	ldd	r18, Y+5	; 0x05
 762:	3e 81       	ldd	r19, Y+6	; 0x06
 764:	8b 81       	ldd	r24, Y+3	; 0x03
 766:	9c 81       	ldd	r25, Y+4	; 0x04
 768:	07 96       	adiw	r24, 0x07	; 7
 76a:	88 0f       	add	r24, r24
 76c:	99 1f       	adc	r25, r25
 76e:	82 0f       	add	r24, r18
 770:	93 1f       	adc	r25, r19
 772:	fc 01       	movw	r30, r24
 774:	80 81       	ld	r24, Z
 776:	91 81       	ldd	r25, Z+1	; 0x01
 778:	22 d3       	rcall	.+1604   	; 0xdbe <_ZN15SlidingArmJoint4zeroEv>
 77a:	21 e0       	ldi	r18, 0x01	; 1
 77c:	89 2b       	or	r24, r25
 77e:	09 f4       	brne	.+2      	; 0x782 <_ZN15RobotArmManager4zeroEv+0xc8>
 780:	20 e0       	ldi	r18, 0x00	; 0
 782:	22 23       	and	r18, r18
 784:	19 f0       	breq	.+6      	; 0x78c <_ZN15RobotArmManager4zeroEv+0xd2>
			return -1;
 786:	8f ef       	ldi	r24, 0xFF	; 255
 788:	9f ef       	ldi	r25, 0xFF	; 255
 78a:	21 c0       	rjmp	.+66     	; 0x7ce <_ZN15RobotArmManager4zeroEv+0x114>
		if (this->itsRotatingArmJoint[j]->zero()) {
			return -1;
		}
	}

	for (int j = 0; j < 2; ++j) {
 78c:	8b 81       	ldd	r24, Y+3	; 0x03
 78e:	9c 81       	ldd	r25, Y+4	; 0x04
 790:	01 96       	adiw	r24, 0x01	; 1
 792:	9c 83       	std	Y+4, r25	; 0x04
 794:	8b 83       	std	Y+3, r24	; 0x03
		if (this->itsSlidingArmJoint[j]->zero()) {
			return -1;
		}
	}

	if (this->itsGraspingManipulator == nullptr) {
 796:	cf cf       	rjmp	.-98     	; 0x736 <_ZN15RobotArmManager4zeroEv+0x7c>
 798:	8d 81       	ldd	r24, Y+5	; 0x05
 79a:	9e 81       	ldd	r25, Y+6	; 0x06
 79c:	fc 01       	movw	r30, r24
 79e:	84 81       	ldd	r24, Z+4	; 0x04
 7a0:	95 81       	ldd	r25, Z+5	; 0x05
 7a2:	89 2b       	or	r24, r25
		return -1;
 7a4:	19 f4       	brne	.+6      	; 0x7ac <_ZN15RobotArmManager4zeroEv+0xf2>
 7a6:	8f ef       	ldi	r24, 0xFF	; 255
 7a8:	9f ef       	ldi	r25, 0xFF	; 255
	}
	
	if (this->itsGraspingManipulator->open()) {
 7aa:	11 c0       	rjmp	.+34     	; 0x7ce <_ZN15RobotArmManager4zeroEv+0x114>
 7ac:	8d 81       	ldd	r24, Y+5	; 0x05
 7ae:	9e 81       	ldd	r25, Y+6	; 0x06
 7b0:	fc 01       	movw	r30, r24
 7b2:	84 81       	ldd	r24, Z+4	; 0x04
 7b4:	95 81       	ldd	r25, Z+5	; 0x05
 7b6:	73 dc       	rcall	.-1818   	; 0x9e <_ZN19GraspingManipulator4openEv>
 7b8:	21 e0       	ldi	r18, 0x01	; 1
 7ba:	89 2b       	or	r24, r25
 7bc:	09 f4       	brne	.+2      	; 0x7c0 <_ZN15RobotArmManager4zeroEv+0x106>
 7be:	20 e0       	ldi	r18, 0x00	; 0
 7c0:	22 23       	and	r18, r18
 7c2:	19 f0       	breq	.+6      	; 0x7ca <_ZN15RobotArmManager4zeroEv+0x110>
		return -1;
 7c4:	8f ef       	ldi	r24, 0xFF	; 255
 7c6:	9f ef       	ldi	r25, 0xFF	; 255
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <_ZN15RobotArmManager4zeroEv+0x114>
	}

	return 0;
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	90 e0       	ldi	r25, 0x00	; 0
}
 7ce:	26 96       	adiw	r28, 0x06	; 6
 7d0:	0f b6       	in	r0, 0x3f	; 63
 7d2:	f8 94       	cli
 7d4:	de bf       	out	0x3e, r29	; 62
 7d6:	0f be       	out	0x3f, r0	; 63
 7d8:	cd bf       	out	0x3d, r28	; 61
 7da:	df 91       	pop	r29
 7dc:	cf 91       	pop	r28
 7de:	08 95       	ret

000007e0 <_ZN15RobotArmManager25getItsGraspingManipulatorEv>:

GraspingManipulator* RobotArmManager::getItsGraspingManipulator() {
 7e0:	cf 93       	push	r28
 7e2:	df 93       	push	r29
 7e4:	00 d0       	rcall	.+0      	; 0x7e6 <_ZN15RobotArmManager25getItsGraspingManipulatorEv+0x6>
 7e6:	cd b7       	in	r28, 0x3d	; 61
 7e8:	de b7       	in	r29, 0x3e	; 62
 7ea:	9a 83       	std	Y+2, r25	; 0x02
 7ec:	89 83       	std	Y+1, r24	; 0x01
	return (GraspingManipulator*)this->itsGraspingManipulator;
 7ee:	89 81       	ldd	r24, Y+1	; 0x01
 7f0:	9a 81       	ldd	r25, Y+2	; 0x02
 7f2:	fc 01       	movw	r30, r24
 7f4:	84 81       	ldd	r24, Z+4	; 0x04
 7f6:	95 81       	ldd	r25, Z+5	; 0x05
}
 7f8:	0f 90       	pop	r0
 7fa:	0f 90       	pop	r0
 7fc:	df 91       	pop	r29
 7fe:	cf 91       	pop	r28
 800:	08 95       	ret

00000802 <_ZN15RobotArmManager25setItsGraspingManipulatorEP19GraspingManipulator>:

void RobotArmManager::setItsGraspingManipulator(GraspingManipulator* p_GraspingManipulator) {
 802:	cf 93       	push	r28
 804:	df 93       	push	r29
 806:	00 d0       	rcall	.+0      	; 0x808 <_ZN15RobotArmManager25setItsGraspingManipulatorEP19GraspingManipulator+0x6>
 808:	00 d0       	rcall	.+0      	; 0x80a <_ZN15RobotArmManager25setItsGraspingManipulatorEP19GraspingManipulator+0x8>
 80a:	cd b7       	in	r28, 0x3d	; 61
 80c:	de b7       	in	r29, 0x3e	; 62
 80e:	9a 83       	std	Y+2, r25	; 0x02
 810:	89 83       	std	Y+1, r24	; 0x01
 812:	7c 83       	std	Y+4, r23	; 0x04
 814:	6b 83       	std	Y+3, r22	; 0x03
	this->itsGraspingManipulator = p_GraspingManipulator;
 816:	89 81       	ldd	r24, Y+1	; 0x01
 818:	9a 81       	ldd	r25, Y+2	; 0x02
 81a:	2b 81       	ldd	r18, Y+3	; 0x03
 81c:	3c 81       	ldd	r19, Y+4	; 0x04
 81e:	fc 01       	movw	r30, r24
 820:	35 83       	std	Z+5, r19	; 0x05
 822:	24 83       	std	Z+4, r18	; 0x04
}
 824:	00 00       	nop
 826:	0f 90       	pop	r0
 828:	0f 90       	pop	r0
 82a:	0f 90       	pop	r0
 82c:	0f 90       	pop	r0
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	08 95       	ret

00000834 <_ZN15RobotArmManager22getItsRotatingArmJointEv>:

unsigned int* RobotArmManager::getItsRotatingArmJoint() {
 834:	cf 93       	push	r28
 836:	df 93       	push	r29
 838:	00 d0       	rcall	.+0      	; 0x83a <_ZN15RobotArmManager22getItsRotatingArmJointEv+0x6>
 83a:	cd b7       	in	r28, 0x3d	; 61
 83c:	de b7       	in	r29, 0x3e	; 62
 83e:	9a 83       	std	Y+2, r25	; 0x02
 840:	89 83       	std	Y+1, r24	; 0x01
	return (unsigned int*)&(this->itsRotatingArmJoint[0]);
 842:	89 81       	ldd	r24, Y+1	; 0x01
 844:	9a 81       	ldd	r25, Y+2	; 0x02
 846:	06 96       	adiw	r24, 0x06	; 6
}
 848:	0f 90       	pop	r0
 84a:	0f 90       	pop	r0
 84c:	df 91       	pop	r29
 84e:	cf 91       	pop	r28
 850:	08 95       	ret

00000852 <_ZN15RobotArmManager22addItsRotatingArmJointEP16RotatingArmJoint>:

void RobotArmManager::addItsRotatingArmJoint(RotatingArmJoint* p_RotatingArmJoint) {
 852:	cf 93       	push	r28
 854:	df 93       	push	r29
 856:	00 d0       	rcall	.+0      	; 0x858 <_ZN15RobotArmManager22addItsRotatingArmJointEP16RotatingArmJoint+0x6>
 858:	00 d0       	rcall	.+0      	; 0x85a <_ZN15RobotArmManager22addItsRotatingArmJointEP16RotatingArmJoint+0x8>
 85a:	00 d0       	rcall	.+0      	; 0x85c <_ZN15RobotArmManager22addItsRotatingArmJointEP16RotatingArmJoint+0xa>
 85c:	cd b7       	in	r28, 0x3d	; 61
 85e:	de b7       	in	r29, 0x3e	; 62
 860:	9c 83       	std	Y+4, r25	; 0x04
 862:	8b 83       	std	Y+3, r24	; 0x03
 864:	7e 83       	std	Y+6, r23	; 0x06
 866:	6d 83       	std	Y+5, r22	; 0x05
	for (int pos = 0; pos < 4; ++pos) {
 868:	1a 82       	std	Y+2, r1	; 0x02
 86a:	19 82       	std	Y+1, r1	; 0x01
 86c:	89 81       	ldd	r24, Y+1	; 0x01
 86e:	9a 81       	ldd	r25, Y+2	; 0x02
 870:	04 97       	sbiw	r24, 0x04	; 4
 872:	24 f5       	brge	.+72     	; 0x8bc <_ZN15RobotArmManager22addItsRotatingArmJointEP16RotatingArmJoint+0x6a>
		if (!this->itsRotatingArmJoint[pos]) {
 874:	2b 81       	ldd	r18, Y+3	; 0x03
 876:	3c 81       	ldd	r19, Y+4	; 0x04
 878:	89 81       	ldd	r24, Y+1	; 0x01
 87a:	9a 81       	ldd	r25, Y+2	; 0x02
 87c:	03 96       	adiw	r24, 0x03	; 3
 87e:	88 0f       	add	r24, r24
 880:	99 1f       	adc	r25, r25
 882:	82 0f       	add	r24, r18
 884:	93 1f       	adc	r25, r19
 886:	fc 01       	movw	r30, r24
 888:	80 81       	ld	r24, Z
 88a:	91 81       	ldd	r25, Z+1	; 0x01
 88c:	89 2b       	or	r24, r25
 88e:	81 f4       	brne	.+32     	; 0x8b0 <_ZN15RobotArmManager22addItsRotatingArmJointEP16RotatingArmJoint+0x5e>
			this->itsRotatingArmJoint[pos] = p_RotatingArmJoint;
 890:	2b 81       	ldd	r18, Y+3	; 0x03
 892:	3c 81       	ldd	r19, Y+4	; 0x04
 894:	89 81       	ldd	r24, Y+1	; 0x01
 896:	9a 81       	ldd	r25, Y+2	; 0x02
 898:	03 96       	adiw	r24, 0x03	; 3
 89a:	88 0f       	add	r24, r24
 89c:	99 1f       	adc	r25, r25
 89e:	82 0f       	add	r24, r18
 8a0:	93 1f       	adc	r25, r19
 8a2:	2d 81       	ldd	r18, Y+5	; 0x05
 8a4:	3e 81       	ldd	r19, Y+6	; 0x06
 8a6:	fc 01       	movw	r30, r24
 8a8:	31 83       	std	Z+1, r19	; 0x01
 8aa:	20 83       	st	Z, r18
			break;
 8ac:	00 00       	nop
		}
	}
}
 8ae:	06 c0       	rjmp	.+12     	; 0x8bc <_ZN15RobotArmManager22addItsRotatingArmJointEP16RotatingArmJoint+0x6a>
unsigned int* RobotArmManager::getItsRotatingArmJoint() {
	return (unsigned int*)&(this->itsRotatingArmJoint[0]);
}

void RobotArmManager::addItsRotatingArmJoint(RotatingArmJoint* p_RotatingArmJoint) {
	for (int pos = 0; pos < 4; ++pos) {
 8b0:	89 81       	ldd	r24, Y+1	; 0x01
 8b2:	9a 81       	ldd	r25, Y+2	; 0x02
 8b4:	01 96       	adiw	r24, 0x01	; 1
 8b6:	9a 83       	std	Y+2, r25	; 0x02
 8b8:	89 83       	std	Y+1, r24	; 0x01
 8ba:	d8 cf       	rjmp	.-80     	; 0x86c <_ZN15RobotArmManager22addItsRotatingArmJointEP16RotatingArmJoint+0x1a>
		if (!this->itsRotatingArmJoint[pos]) {
			this->itsRotatingArmJoint[pos] = p_RotatingArmJoint;
			break;
		}
	}
}
 8bc:	00 00       	nop
 8be:	26 96       	adiw	r28, 0x06	; 6
 8c0:	0f b6       	in	r0, 0x3f	; 63
 8c2:	f8 94       	cli
 8c4:	de bf       	out	0x3e, r29	; 62
 8c6:	0f be       	out	0x3f, r0	; 63
 8c8:	cd bf       	out	0x3d, r28	; 61
 8ca:	df 91       	pop	r29
 8cc:	cf 91       	pop	r28
 8ce:	08 95       	ret

000008d0 <_ZN15RobotArmManager25removeItsRotatingArmJointEP16RotatingArmJoint>:

void RobotArmManager::removeItsRotatingArmJoint(RotatingArmJoint* p_RotatingArmJoint) {
 8d0:	cf 93       	push	r28
 8d2:	df 93       	push	r29
 8d4:	00 d0       	rcall	.+0      	; 0x8d6 <_ZN15RobotArmManager25removeItsRotatingArmJointEP16RotatingArmJoint+0x6>
 8d6:	00 d0       	rcall	.+0      	; 0x8d8 <_ZN15RobotArmManager25removeItsRotatingArmJointEP16RotatingArmJoint+0x8>
 8d8:	00 d0       	rcall	.+0      	; 0x8da <_ZN15RobotArmManager25removeItsRotatingArmJointEP16RotatingArmJoint+0xa>
 8da:	cd b7       	in	r28, 0x3d	; 61
 8dc:	de b7       	in	r29, 0x3e	; 62
 8de:	9c 83       	std	Y+4, r25	; 0x04
 8e0:	8b 83       	std	Y+3, r24	; 0x03
 8e2:	7e 83       	std	Y+6, r23	; 0x06
 8e4:	6d 83       	std	Y+5, r22	; 0x05
	for (int pos = 0; pos < 4; ++pos) {
 8e6:	1a 82       	std	Y+2, r1	; 0x02
 8e8:	19 82       	std	Y+1, r1	; 0x01
 8ea:	89 81       	ldd	r24, Y+1	; 0x01
 8ec:	9a 81       	ldd	r25, Y+2	; 0x02
 8ee:	04 97       	sbiw	r24, 0x04	; 4
 8f0:	2c f5       	brge	.+74     	; 0x93c <_ZN15RobotArmManager25removeItsRotatingArmJointEP16RotatingArmJoint+0x6c>
		if (this->itsRotatingArmJoint[pos] == p_RotatingArmJoint) {
 8f2:	2b 81       	ldd	r18, Y+3	; 0x03
 8f4:	3c 81       	ldd	r19, Y+4	; 0x04
 8f6:	89 81       	ldd	r24, Y+1	; 0x01
 8f8:	9a 81       	ldd	r25, Y+2	; 0x02
 8fa:	03 96       	adiw	r24, 0x03	; 3
 8fc:	88 0f       	add	r24, r24
 8fe:	99 1f       	adc	r25, r25
 900:	82 0f       	add	r24, r18
 902:	93 1f       	adc	r25, r19
 904:	fc 01       	movw	r30, r24
 906:	20 81       	ld	r18, Z
 908:	31 81       	ldd	r19, Z+1	; 0x01
 90a:	8d 81       	ldd	r24, Y+5	; 0x05
 90c:	9e 81       	ldd	r25, Y+6	; 0x06
 90e:	28 17       	cp	r18, r24
 910:	39 07       	cpc	r19, r25
 912:	71 f4       	brne	.+28     	; 0x930 <_ZN15RobotArmManager25removeItsRotatingArmJointEP16RotatingArmJoint+0x60>
			this->itsRotatingArmJoint[pos] = nullptr;
 914:	2b 81       	ldd	r18, Y+3	; 0x03
 916:	3c 81       	ldd	r19, Y+4	; 0x04
 918:	89 81       	ldd	r24, Y+1	; 0x01
 91a:	9a 81       	ldd	r25, Y+2	; 0x02
 91c:	03 96       	adiw	r24, 0x03	; 3
 91e:	88 0f       	add	r24, r24
 920:	99 1f       	adc	r25, r25
 922:	82 0f       	add	r24, r18
 924:	93 1f       	adc	r25, r19
 926:	fc 01       	movw	r30, r24
 928:	11 82       	std	Z+1, r1	; 0x01
 92a:	10 82       	st	Z, r1
			break;
 92c:	00 00       	nop
		}
	}
}
 92e:	06 c0       	rjmp	.+12     	; 0x93c <_ZN15RobotArmManager25removeItsRotatingArmJointEP16RotatingArmJoint+0x6c>
		}
	}
}

void RobotArmManager::removeItsRotatingArmJoint(RotatingArmJoint* p_RotatingArmJoint) {
	for (int pos = 0; pos < 4; ++pos) {
 930:	89 81       	ldd	r24, Y+1	; 0x01
 932:	9a 81       	ldd	r25, Y+2	; 0x02
 934:	01 96       	adiw	r24, 0x01	; 1
 936:	9a 83       	std	Y+2, r25	; 0x02
 938:	89 83       	std	Y+1, r24	; 0x01
 93a:	d7 cf       	rjmp	.-82     	; 0x8ea <_ZN15RobotArmManager25removeItsRotatingArmJointEP16RotatingArmJoint+0x1a>
		if (this->itsRotatingArmJoint[pos] == p_RotatingArmJoint) {
			this->itsRotatingArmJoint[pos] = nullptr;
			break;
		}
	}
}
 93c:	00 00       	nop
 93e:	26 96       	adiw	r28, 0x06	; 6
 940:	0f b6       	in	r0, 0x3f	; 63
 942:	f8 94       	cli
 944:	de bf       	out	0x3e, r29	; 62
 946:	0f be       	out	0x3f, r0	; 63
 948:	cd bf       	out	0x3d, r28	; 61
 94a:	df 91       	pop	r29
 94c:	cf 91       	pop	r28
 94e:	08 95       	ret

00000950 <_ZN15RobotArmManager24clearItsRotatingArmJointEv>:

void RobotArmManager::clearItsRotatingArmJoint() {
 950:	cf 93       	push	r28
 952:	df 93       	push	r29
 954:	00 d0       	rcall	.+0      	; 0x956 <_ZN15RobotArmManager24clearItsRotatingArmJointEv+0x6>
 956:	00 d0       	rcall	.+0      	; 0x958 <_ZN15RobotArmManager24clearItsRotatingArmJointEv+0x8>
 958:	cd b7       	in	r28, 0x3d	; 61
 95a:	de b7       	in	r29, 0x3e	; 62
 95c:	9c 83       	std	Y+4, r25	; 0x04
 95e:	8b 83       	std	Y+3, r24	; 0x03
	for (int pos = 0; pos < 4; ++pos) {
 960:	1a 82       	std	Y+2, r1	; 0x02
 962:	19 82       	std	Y+1, r1	; 0x01
 964:	89 81       	ldd	r24, Y+1	; 0x01
 966:	9a 81       	ldd	r25, Y+2	; 0x02
 968:	04 97       	sbiw	r24, 0x04	; 4
 96a:	94 f4       	brge	.+36     	; 0x990 <_ZN15RobotArmManager24clearItsRotatingArmJointEv+0x40>
		this->itsRotatingArmJoint[pos] = nullptr;
 96c:	2b 81       	ldd	r18, Y+3	; 0x03
 96e:	3c 81       	ldd	r19, Y+4	; 0x04
 970:	89 81       	ldd	r24, Y+1	; 0x01
 972:	9a 81       	ldd	r25, Y+2	; 0x02
 974:	03 96       	adiw	r24, 0x03	; 3
 976:	88 0f       	add	r24, r24
 978:	99 1f       	adc	r25, r25
 97a:	82 0f       	add	r24, r18
 97c:	93 1f       	adc	r25, r19
 97e:	fc 01       	movw	r30, r24
 980:	11 82       	std	Z+1, r1	; 0x01
 982:	10 82       	st	Z, r1
		}
	}
}

void RobotArmManager::clearItsRotatingArmJoint() {
	for (int pos = 0; pos < 4; ++pos) {
 984:	89 81       	ldd	r24, Y+1	; 0x01
 986:	9a 81       	ldd	r25, Y+2	; 0x02
 988:	01 96       	adiw	r24, 0x01	; 1
 98a:	9a 83       	std	Y+2, r25	; 0x02
 98c:	89 83       	std	Y+1, r24	; 0x01
 98e:	ea cf       	rjmp	.-44     	; 0x964 <_ZN15RobotArmManager24clearItsRotatingArmJointEv+0x14>
		this->itsRotatingArmJoint[pos] = nullptr;
	}
}
 990:	00 00       	nop
 992:	0f 90       	pop	r0
 994:	0f 90       	pop	r0
 996:	0f 90       	pop	r0
 998:	0f 90       	pop	r0
 99a:	df 91       	pop	r29
 99c:	cf 91       	pop	r28
 99e:	08 95       	ret

000009a0 <_ZN15RobotArmManager21getItsSlidingArmJointEv>:

unsigned int* RobotArmManager::getItsSlidingArmJoint() {
 9a0:	cf 93       	push	r28
 9a2:	df 93       	push	r29
 9a4:	00 d0       	rcall	.+0      	; 0x9a6 <_ZN15RobotArmManager21getItsSlidingArmJointEv+0x6>
 9a6:	cd b7       	in	r28, 0x3d	; 61
 9a8:	de b7       	in	r29, 0x3e	; 62
 9aa:	9a 83       	std	Y+2, r25	; 0x02
 9ac:	89 83       	std	Y+1, r24	; 0x01
	return (unsigned int*)&(this->itsSlidingArmJoint[0]);
 9ae:	89 81       	ldd	r24, Y+1	; 0x01
 9b0:	9a 81       	ldd	r25, Y+2	; 0x02
 9b2:	0e 96       	adiw	r24, 0x0e	; 14
}
 9b4:	0f 90       	pop	r0
 9b6:	0f 90       	pop	r0
 9b8:	df 91       	pop	r29
 9ba:	cf 91       	pop	r28
 9bc:	08 95       	ret

000009be <_ZN15RobotArmManager21addItsSlidingArmJointEP15SlidingArmJoint>:

void RobotArmManager::addItsSlidingArmJoint(SlidingArmJoint* p_SlidingArmJoint) {
 9be:	cf 93       	push	r28
 9c0:	df 93       	push	r29
 9c2:	00 d0       	rcall	.+0      	; 0x9c4 <_ZN15RobotArmManager21addItsSlidingArmJointEP15SlidingArmJoint+0x6>
 9c4:	00 d0       	rcall	.+0      	; 0x9c6 <_ZN15RobotArmManager21addItsSlidingArmJointEP15SlidingArmJoint+0x8>
 9c6:	00 d0       	rcall	.+0      	; 0x9c8 <_ZN15RobotArmManager21addItsSlidingArmJointEP15SlidingArmJoint+0xa>
 9c8:	cd b7       	in	r28, 0x3d	; 61
 9ca:	de b7       	in	r29, 0x3e	; 62
 9cc:	9c 83       	std	Y+4, r25	; 0x04
 9ce:	8b 83       	std	Y+3, r24	; 0x03
 9d0:	7e 83       	std	Y+6, r23	; 0x06
 9d2:	6d 83       	std	Y+5, r22	; 0x05
	for (int pos = 0; pos < 2; ++pos) {
 9d4:	1a 82       	std	Y+2, r1	; 0x02
 9d6:	19 82       	std	Y+1, r1	; 0x01
 9d8:	89 81       	ldd	r24, Y+1	; 0x01
 9da:	9a 81       	ldd	r25, Y+2	; 0x02
 9dc:	02 97       	sbiw	r24, 0x02	; 2
 9de:	24 f5       	brge	.+72     	; 0xa28 <_ZN15RobotArmManager21addItsSlidingArmJointEP15SlidingArmJoint+0x6a>
		if (!this->itsSlidingArmJoint[pos]) {
 9e0:	2b 81       	ldd	r18, Y+3	; 0x03
 9e2:	3c 81       	ldd	r19, Y+4	; 0x04
 9e4:	89 81       	ldd	r24, Y+1	; 0x01
 9e6:	9a 81       	ldd	r25, Y+2	; 0x02
 9e8:	07 96       	adiw	r24, 0x07	; 7
 9ea:	88 0f       	add	r24, r24
 9ec:	99 1f       	adc	r25, r25
 9ee:	82 0f       	add	r24, r18
 9f0:	93 1f       	adc	r25, r19
 9f2:	fc 01       	movw	r30, r24
 9f4:	80 81       	ld	r24, Z
 9f6:	91 81       	ldd	r25, Z+1	; 0x01
 9f8:	89 2b       	or	r24, r25
 9fa:	81 f4       	brne	.+32     	; 0xa1c <_ZN15RobotArmManager21addItsSlidingArmJointEP15SlidingArmJoint+0x5e>
			this->itsSlidingArmJoint[pos] = p_SlidingArmJoint;
 9fc:	2b 81       	ldd	r18, Y+3	; 0x03
 9fe:	3c 81       	ldd	r19, Y+4	; 0x04
 a00:	89 81       	ldd	r24, Y+1	; 0x01
 a02:	9a 81       	ldd	r25, Y+2	; 0x02
 a04:	07 96       	adiw	r24, 0x07	; 7
 a06:	88 0f       	add	r24, r24
 a08:	99 1f       	adc	r25, r25
 a0a:	82 0f       	add	r24, r18
 a0c:	93 1f       	adc	r25, r19
 a0e:	2d 81       	ldd	r18, Y+5	; 0x05
 a10:	3e 81       	ldd	r19, Y+6	; 0x06
 a12:	fc 01       	movw	r30, r24
 a14:	31 83       	std	Z+1, r19	; 0x01
 a16:	20 83       	st	Z, r18
			break;
 a18:	00 00       	nop
		}
	}
}
 a1a:	06 c0       	rjmp	.+12     	; 0xa28 <_ZN15RobotArmManager21addItsSlidingArmJointEP15SlidingArmJoint+0x6a>
unsigned int* RobotArmManager::getItsSlidingArmJoint() {
	return (unsigned int*)&(this->itsSlidingArmJoint[0]);
}

void RobotArmManager::addItsSlidingArmJoint(SlidingArmJoint* p_SlidingArmJoint) {
	for (int pos = 0; pos < 2; ++pos) {
 a1c:	89 81       	ldd	r24, Y+1	; 0x01
 a1e:	9a 81       	ldd	r25, Y+2	; 0x02
 a20:	01 96       	adiw	r24, 0x01	; 1
 a22:	9a 83       	std	Y+2, r25	; 0x02
 a24:	89 83       	std	Y+1, r24	; 0x01
 a26:	d8 cf       	rjmp	.-80     	; 0x9d8 <_ZN15RobotArmManager21addItsSlidingArmJointEP15SlidingArmJoint+0x1a>
		if (!this->itsSlidingArmJoint[pos]) {
			this->itsSlidingArmJoint[pos] = p_SlidingArmJoint;
			break;
		}
	}
}
 a28:	00 00       	nop
 a2a:	26 96       	adiw	r28, 0x06	; 6
 a2c:	0f b6       	in	r0, 0x3f	; 63
 a2e:	f8 94       	cli
 a30:	de bf       	out	0x3e, r29	; 62
 a32:	0f be       	out	0x3f, r0	; 63
 a34:	cd bf       	out	0x3d, r28	; 61
 a36:	df 91       	pop	r29
 a38:	cf 91       	pop	r28
 a3a:	08 95       	ret

00000a3c <_ZN15RobotArmManager23removeItsSlidingAmJointEP15SlidingArmJoint>:

void RobotArmManager::removeItsSlidingAmJoint(SlidingArmJoint* p_SlidingArmJoint) {
 a3c:	cf 93       	push	r28
 a3e:	df 93       	push	r29
 a40:	00 d0       	rcall	.+0      	; 0xa42 <_ZN15RobotArmManager23removeItsSlidingAmJointEP15SlidingArmJoint+0x6>
 a42:	00 d0       	rcall	.+0      	; 0xa44 <_ZN15RobotArmManager23removeItsSlidingAmJointEP15SlidingArmJoint+0x8>
 a44:	00 d0       	rcall	.+0      	; 0xa46 <_ZN15RobotArmManager23removeItsSlidingAmJointEP15SlidingArmJoint+0xa>
 a46:	cd b7       	in	r28, 0x3d	; 61
 a48:	de b7       	in	r29, 0x3e	; 62
 a4a:	9c 83       	std	Y+4, r25	; 0x04
 a4c:	8b 83       	std	Y+3, r24	; 0x03
 a4e:	7e 83       	std	Y+6, r23	; 0x06
 a50:	6d 83       	std	Y+5, r22	; 0x05
	for (int pos = 0; pos < 2; ++pos) {
 a52:	1a 82       	std	Y+2, r1	; 0x02
 a54:	19 82       	std	Y+1, r1	; 0x01
 a56:	89 81       	ldd	r24, Y+1	; 0x01
 a58:	9a 81       	ldd	r25, Y+2	; 0x02
 a5a:	02 97       	sbiw	r24, 0x02	; 2
 a5c:	2c f5       	brge	.+74     	; 0xaa8 <_ZN15RobotArmManager23removeItsSlidingAmJointEP15SlidingArmJoint+0x6c>
		if (this->itsSlidingArmJoint[pos] == p_SlidingArmJoint) {
 a5e:	2b 81       	ldd	r18, Y+3	; 0x03
 a60:	3c 81       	ldd	r19, Y+4	; 0x04
 a62:	89 81       	ldd	r24, Y+1	; 0x01
 a64:	9a 81       	ldd	r25, Y+2	; 0x02
 a66:	07 96       	adiw	r24, 0x07	; 7
 a68:	88 0f       	add	r24, r24
 a6a:	99 1f       	adc	r25, r25
 a6c:	82 0f       	add	r24, r18
 a6e:	93 1f       	adc	r25, r19
 a70:	fc 01       	movw	r30, r24
 a72:	20 81       	ld	r18, Z
 a74:	31 81       	ldd	r19, Z+1	; 0x01
 a76:	8d 81       	ldd	r24, Y+5	; 0x05
 a78:	9e 81       	ldd	r25, Y+6	; 0x06
 a7a:	28 17       	cp	r18, r24
 a7c:	39 07       	cpc	r19, r25
 a7e:	71 f4       	brne	.+28     	; 0xa9c <_ZN15RobotArmManager23removeItsSlidingAmJointEP15SlidingArmJoint+0x60>
			this->itsSlidingArmJoint[pos] = nullptr;
 a80:	2b 81       	ldd	r18, Y+3	; 0x03
 a82:	3c 81       	ldd	r19, Y+4	; 0x04
 a84:	89 81       	ldd	r24, Y+1	; 0x01
 a86:	9a 81       	ldd	r25, Y+2	; 0x02
 a88:	07 96       	adiw	r24, 0x07	; 7
 a8a:	88 0f       	add	r24, r24
 a8c:	99 1f       	adc	r25, r25
 a8e:	82 0f       	add	r24, r18
 a90:	93 1f       	adc	r25, r19
 a92:	fc 01       	movw	r30, r24
 a94:	11 82       	std	Z+1, r1	; 0x01
 a96:	10 82       	st	Z, r1
			break;
 a98:	00 00       	nop
		}
	}
}
 a9a:	06 c0       	rjmp	.+12     	; 0xaa8 <_ZN15RobotArmManager23removeItsSlidingAmJointEP15SlidingArmJoint+0x6c>
		}
	}
}

void RobotArmManager::removeItsSlidingAmJoint(SlidingArmJoint* p_SlidingArmJoint) {
	for (int pos = 0; pos < 2; ++pos) {
 a9c:	89 81       	ldd	r24, Y+1	; 0x01
 a9e:	9a 81       	ldd	r25, Y+2	; 0x02
 aa0:	01 96       	adiw	r24, 0x01	; 1
 aa2:	9a 83       	std	Y+2, r25	; 0x02
 aa4:	89 83       	std	Y+1, r24	; 0x01
 aa6:	d7 cf       	rjmp	.-82     	; 0xa56 <_ZN15RobotArmManager23removeItsSlidingAmJointEP15SlidingArmJoint+0x1a>
		if (this->itsSlidingArmJoint[pos] == p_SlidingArmJoint) {
			this->itsSlidingArmJoint[pos] = nullptr;
			break;
		}
	}
}
 aa8:	00 00       	nop
 aaa:	26 96       	adiw	r28, 0x06	; 6
 aac:	0f b6       	in	r0, 0x3f	; 63
 aae:	f8 94       	cli
 ab0:	de bf       	out	0x3e, r29	; 62
 ab2:	0f be       	out	0x3f, r0	; 63
 ab4:	cd bf       	out	0x3d, r28	; 61
 ab6:	df 91       	pop	r29
 ab8:	cf 91       	pop	r28
 aba:	08 95       	ret

00000abc <_ZN15RobotArmManager23clearItsSlidingArmJointEv>:

void RobotArmManager::clearItsSlidingArmJoint() {
 abc:	cf 93       	push	r28
 abe:	df 93       	push	r29
 ac0:	00 d0       	rcall	.+0      	; 0xac2 <_ZN15RobotArmManager23clearItsSlidingArmJointEv+0x6>
 ac2:	00 d0       	rcall	.+0      	; 0xac4 <_ZN15RobotArmManager23clearItsSlidingArmJointEv+0x8>
 ac4:	cd b7       	in	r28, 0x3d	; 61
 ac6:	de b7       	in	r29, 0x3e	; 62
 ac8:	9c 83       	std	Y+4, r25	; 0x04
 aca:	8b 83       	std	Y+3, r24	; 0x03
	for (int pos = 0; pos < 2; ++pos) {
 acc:	1a 82       	std	Y+2, r1	; 0x02
 ace:	19 82       	std	Y+1, r1	; 0x01
 ad0:	89 81       	ldd	r24, Y+1	; 0x01
 ad2:	9a 81       	ldd	r25, Y+2	; 0x02
 ad4:	02 97       	sbiw	r24, 0x02	; 2
 ad6:	94 f4       	brge	.+36     	; 0xafc <_ZN15RobotArmManager23clearItsSlidingArmJointEv+0x40>
		this->itsSlidingArmJoint[pos] = nullptr;
 ad8:	2b 81       	ldd	r18, Y+3	; 0x03
 ada:	3c 81       	ldd	r19, Y+4	; 0x04
 adc:	89 81       	ldd	r24, Y+1	; 0x01
 ade:	9a 81       	ldd	r25, Y+2	; 0x02
 ae0:	07 96       	adiw	r24, 0x07	; 7
 ae2:	88 0f       	add	r24, r24
 ae4:	99 1f       	adc	r25, r25
 ae6:	82 0f       	add	r24, r18
 ae8:	93 1f       	adc	r25, r19
 aea:	fc 01       	movw	r30, r24
 aec:	11 82       	std	Z+1, r1	; 0x01
 aee:	10 82       	st	Z, r1
		}
	}
}

void RobotArmManager::clearItsSlidingArmJoint() {
	for (int pos = 0; pos < 2; ++pos) {
 af0:	89 81       	ldd	r24, Y+1	; 0x01
 af2:	9a 81       	ldd	r25, Y+2	; 0x02
 af4:	01 96       	adiw	r24, 0x01	; 1
 af6:	9a 83       	std	Y+2, r25	; 0x02
 af8:	89 83       	std	Y+1, r24	; 0x01
 afa:	ea cf       	rjmp	.-44     	; 0xad0 <_ZN15RobotArmManager23clearItsSlidingArmJointEv+0x14>
		this->itsSlidingArmJoint[pos] = nullptr;
	}
}
 afc:	00 00       	nop
 afe:	0f 90       	pop	r0
 b00:	0f 90       	pop	r0
 b02:	0f 90       	pop	r0
 b04:	0f 90       	pop	r0
 b06:	df 91       	pop	r29
 b08:	cf 91       	pop	r28
 b0a:	08 95       	ret

00000b0c <_ZN15RobotArmManager12getItsActionEv>:

unsigned int* RobotArmManager::getItsAction() {
 b0c:	cf 93       	push	r28
 b0e:	df 93       	push	r29
 b10:	00 d0       	rcall	.+0      	; 0xb12 <_ZN15RobotArmManager12getItsActionEv+0x6>
 b12:	cd b7       	in	r28, 0x3d	; 61
 b14:	de b7       	in	r29, 0x3e	; 62
 b16:	9a 83       	std	Y+2, r25	; 0x02
 b18:	89 83       	std	Y+1, r24	; 0x01
	return (unsigned int*)&(this->itsAction[0]);
 b1a:	89 81       	ldd	r24, Y+1	; 0x01
 b1c:	9a 81       	ldd	r25, Y+2	; 0x02
 b1e:	42 96       	adiw	r24, 0x12	; 18
}
 b20:	0f 90       	pop	r0
 b22:	0f 90       	pop	r0
 b24:	df 91       	pop	r29
 b26:	cf 91       	pop	r28
 b28:	08 95       	ret

00000b2a <_ZN15RobotArmManager12addItsActionEP6Action>:

void RobotArmManager::addItsAction(Action* p_Action) {
 b2a:	cf 93       	push	r28
 b2c:	df 93       	push	r29
 b2e:	00 d0       	rcall	.+0      	; 0xb30 <_ZN15RobotArmManager12addItsActionEP6Action+0x6>
 b30:	00 d0       	rcall	.+0      	; 0xb32 <_ZN15RobotArmManager12addItsActionEP6Action+0x8>
 b32:	00 d0       	rcall	.+0      	; 0xb34 <_ZN15RobotArmManager12addItsActionEP6Action+0xa>
 b34:	cd b7       	in	r28, 0x3d	; 61
 b36:	de b7       	in	r29, 0x3e	; 62
 b38:	9c 83       	std	Y+4, r25	; 0x04
 b3a:	8b 83       	std	Y+3, r24	; 0x03
 b3c:	7e 83       	std	Y+6, r23	; 0x06
 b3e:	6d 83       	std	Y+5, r22	; 0x05
	for (int pos = 0; pos < 100; ++pos) {
 b40:	1a 82       	std	Y+2, r1	; 0x02
 b42:	19 82       	std	Y+1, r1	; 0x01
 b44:	89 81       	ldd	r24, Y+1	; 0x01
 b46:	9a 81       	ldd	r25, Y+2	; 0x02
 b48:	84 36       	cpi	r24, 0x64	; 100
 b4a:	91 05       	cpc	r25, r1
 b4c:	24 f5       	brge	.+72     	; 0xb96 <_ZN15RobotArmManager12addItsActionEP6Action+0x6c>
		if (!this->itsAction[pos]) {
 b4e:	2b 81       	ldd	r18, Y+3	; 0x03
 b50:	3c 81       	ldd	r19, Y+4	; 0x04
 b52:	89 81       	ldd	r24, Y+1	; 0x01
 b54:	9a 81       	ldd	r25, Y+2	; 0x02
 b56:	09 96       	adiw	r24, 0x09	; 9
 b58:	88 0f       	add	r24, r24
 b5a:	99 1f       	adc	r25, r25
 b5c:	82 0f       	add	r24, r18
 b5e:	93 1f       	adc	r25, r19
 b60:	fc 01       	movw	r30, r24
 b62:	80 81       	ld	r24, Z
 b64:	91 81       	ldd	r25, Z+1	; 0x01
 b66:	89 2b       	or	r24, r25
 b68:	81 f4       	brne	.+32     	; 0xb8a <_ZN15RobotArmManager12addItsActionEP6Action+0x60>
			this->itsAction[pos] = p_Action;
 b6a:	2b 81       	ldd	r18, Y+3	; 0x03
 b6c:	3c 81       	ldd	r19, Y+4	; 0x04
 b6e:	89 81       	ldd	r24, Y+1	; 0x01
 b70:	9a 81       	ldd	r25, Y+2	; 0x02
 b72:	09 96       	adiw	r24, 0x09	; 9
 b74:	88 0f       	add	r24, r24
 b76:	99 1f       	adc	r25, r25
 b78:	82 0f       	add	r24, r18
 b7a:	93 1f       	adc	r25, r19
 b7c:	2d 81       	ldd	r18, Y+5	; 0x05
 b7e:	3e 81       	ldd	r19, Y+6	; 0x06
 b80:	fc 01       	movw	r30, r24
 b82:	31 83       	std	Z+1, r19	; 0x01
 b84:	20 83       	st	Z, r18
			break;
 b86:	00 00       	nop
		}
	}
}
 b88:	06 c0       	rjmp	.+12     	; 0xb96 <_ZN15RobotArmManager12addItsActionEP6Action+0x6c>
unsigned int* RobotArmManager::getItsAction() {
	return (unsigned int*)&(this->itsAction[0]);
}

void RobotArmManager::addItsAction(Action* p_Action) {
	for (int pos = 0; pos < 100; ++pos) {
 b8a:	89 81       	ldd	r24, Y+1	; 0x01
 b8c:	9a 81       	ldd	r25, Y+2	; 0x02
 b8e:	01 96       	adiw	r24, 0x01	; 1
 b90:	9a 83       	std	Y+2, r25	; 0x02
 b92:	89 83       	std	Y+1, r24	; 0x01
 b94:	d7 cf       	rjmp	.-82     	; 0xb44 <_ZN15RobotArmManager12addItsActionEP6Action+0x1a>
		if (!this->itsAction[pos]) {
			this->itsAction[pos] = p_Action;
			break;
		}
	}
}
 b96:	00 00       	nop
 b98:	26 96       	adiw	r28, 0x06	; 6
 b9a:	0f b6       	in	r0, 0x3f	; 63
 b9c:	f8 94       	cli
 b9e:	de bf       	out	0x3e, r29	; 62
 ba0:	0f be       	out	0x3f, r0	; 63
 ba2:	cd bf       	out	0x3d, r28	; 61
 ba4:	df 91       	pop	r29
 ba6:	cf 91       	pop	r28
 ba8:	08 95       	ret

00000baa <_ZN15RobotArmManager15removeItsActionEP6Action>:

void RobotArmManager::removeItsAction(Action* p_Action) {
 baa:	cf 93       	push	r28
 bac:	df 93       	push	r29
 bae:	00 d0       	rcall	.+0      	; 0xbb0 <_ZN15RobotArmManager15removeItsActionEP6Action+0x6>
 bb0:	00 d0       	rcall	.+0      	; 0xbb2 <_ZN15RobotArmManager15removeItsActionEP6Action+0x8>
 bb2:	00 d0       	rcall	.+0      	; 0xbb4 <_ZN15RobotArmManager15removeItsActionEP6Action+0xa>
 bb4:	cd b7       	in	r28, 0x3d	; 61
 bb6:	de b7       	in	r29, 0x3e	; 62
 bb8:	9c 83       	std	Y+4, r25	; 0x04
 bba:	8b 83       	std	Y+3, r24	; 0x03
 bbc:	7e 83       	std	Y+6, r23	; 0x06
 bbe:	6d 83       	std	Y+5, r22	; 0x05
	for (int pos = 0; pos < 100; ++pos) {
 bc0:	1a 82       	std	Y+2, r1	; 0x02
 bc2:	19 82       	std	Y+1, r1	; 0x01
 bc4:	89 81       	ldd	r24, Y+1	; 0x01
 bc6:	9a 81       	ldd	r25, Y+2	; 0x02
 bc8:	84 36       	cpi	r24, 0x64	; 100
 bca:	91 05       	cpc	r25, r1
 bcc:	2c f5       	brge	.+74     	; 0xc18 <_ZN15RobotArmManager15removeItsActionEP6Action+0x6e>
		if (this->itsAction[pos] == p_Action) {
 bce:	2b 81       	ldd	r18, Y+3	; 0x03
 bd0:	3c 81       	ldd	r19, Y+4	; 0x04
 bd2:	89 81       	ldd	r24, Y+1	; 0x01
 bd4:	9a 81       	ldd	r25, Y+2	; 0x02
 bd6:	09 96       	adiw	r24, 0x09	; 9
 bd8:	88 0f       	add	r24, r24
 bda:	99 1f       	adc	r25, r25
 bdc:	82 0f       	add	r24, r18
 bde:	93 1f       	adc	r25, r19
 be0:	fc 01       	movw	r30, r24
 be2:	20 81       	ld	r18, Z
 be4:	31 81       	ldd	r19, Z+1	; 0x01
 be6:	8d 81       	ldd	r24, Y+5	; 0x05
 be8:	9e 81       	ldd	r25, Y+6	; 0x06
 bea:	28 17       	cp	r18, r24
 bec:	39 07       	cpc	r19, r25
 bee:	71 f4       	brne	.+28     	; 0xc0c <_ZN15RobotArmManager15removeItsActionEP6Action+0x62>
			this->itsAction[pos] = nullptr;
 bf0:	2b 81       	ldd	r18, Y+3	; 0x03
 bf2:	3c 81       	ldd	r19, Y+4	; 0x04
 bf4:	89 81       	ldd	r24, Y+1	; 0x01
 bf6:	9a 81       	ldd	r25, Y+2	; 0x02
 bf8:	09 96       	adiw	r24, 0x09	; 9
 bfa:	88 0f       	add	r24, r24
 bfc:	99 1f       	adc	r25, r25
 bfe:	82 0f       	add	r24, r18
 c00:	93 1f       	adc	r25, r19
 c02:	fc 01       	movw	r30, r24
 c04:	11 82       	std	Z+1, r1	; 0x01
 c06:	10 82       	st	Z, r1
			break;
 c08:	00 00       	nop
		}
	}
}
 c0a:	06 c0       	rjmp	.+12     	; 0xc18 <_ZN15RobotArmManager15removeItsActionEP6Action+0x6e>
		}
	}
}

void RobotArmManager::removeItsAction(Action* p_Action) {
	for (int pos = 0; pos < 100; ++pos) {
 c0c:	89 81       	ldd	r24, Y+1	; 0x01
 c0e:	9a 81       	ldd	r25, Y+2	; 0x02
 c10:	01 96       	adiw	r24, 0x01	; 1
 c12:	9a 83       	std	Y+2, r25	; 0x02
 c14:	89 83       	std	Y+1, r24	; 0x01
 c16:	d6 cf       	rjmp	.-84     	; 0xbc4 <_ZN15RobotArmManager15removeItsActionEP6Action+0x1a>
		if (this->itsAction[pos] == p_Action) {
			this->itsAction[pos] = nullptr;
			break;
		}
	}
}
 c18:	00 00       	nop
 c1a:	26 96       	adiw	r28, 0x06	; 6
 c1c:	0f b6       	in	r0, 0x3f	; 63
 c1e:	f8 94       	cli
 c20:	de bf       	out	0x3e, r29	; 62
 c22:	0f be       	out	0x3f, r0	; 63
 c24:	cd bf       	out	0x3d, r28	; 61
 c26:	df 91       	pop	r29
 c28:	cf 91       	pop	r28
 c2a:	08 95       	ret

00000c2c <_ZN15RobotArmManager14clearItsActionEv>:

void RobotArmManager::clearItsAction() {
 c2c:	cf 93       	push	r28
 c2e:	df 93       	push	r29
 c30:	00 d0       	rcall	.+0      	; 0xc32 <_ZN15RobotArmManager14clearItsActionEv+0x6>
 c32:	00 d0       	rcall	.+0      	; 0xc34 <_ZN15RobotArmManager14clearItsActionEv+0x8>
 c34:	cd b7       	in	r28, 0x3d	; 61
 c36:	de b7       	in	r29, 0x3e	; 62
 c38:	9c 83       	std	Y+4, r25	; 0x04
 c3a:	8b 83       	std	Y+3, r24	; 0x03
	for (int pos = 0; pos < 100; ++pos) {
 c3c:	1a 82       	std	Y+2, r1	; 0x02
 c3e:	19 82       	std	Y+1, r1	; 0x01
 c40:	89 81       	ldd	r24, Y+1	; 0x01
 c42:	9a 81       	ldd	r25, Y+2	; 0x02
 c44:	84 36       	cpi	r24, 0x64	; 100
 c46:	91 05       	cpc	r25, r1
 c48:	94 f4       	brge	.+36     	; 0xc6e <_ZN15RobotArmManager14clearItsActionEv+0x42>
		this->itsAction[pos] = nullptr;
 c4a:	2b 81       	ldd	r18, Y+3	; 0x03
 c4c:	3c 81       	ldd	r19, Y+4	; 0x04
 c4e:	89 81       	ldd	r24, Y+1	; 0x01
 c50:	9a 81       	ldd	r25, Y+2	; 0x02
 c52:	09 96       	adiw	r24, 0x09	; 9
 c54:	88 0f       	add	r24, r24
 c56:	99 1f       	adc	r25, r25
 c58:	82 0f       	add	r24, r18
 c5a:	93 1f       	adc	r25, r19
 c5c:	fc 01       	movw	r30, r24
 c5e:	11 82       	std	Z+1, r1	; 0x01
 c60:	10 82       	st	Z, r1
		}
	}
}

void RobotArmManager::clearItsAction() {
	for (int pos = 0; pos < 100; ++pos) {
 c62:	89 81       	ldd	r24, Y+1	; 0x01
 c64:	9a 81       	ldd	r25, Y+2	; 0x02
 c66:	01 96       	adiw	r24, 0x01	; 1
 c68:	9a 83       	std	Y+2, r25	; 0x02
 c6a:	89 83       	std	Y+1, r24	; 0x01
 c6c:	e9 cf       	rjmp	.-46     	; 0xc40 <_ZN15RobotArmManager14clearItsActionEv+0x14>
		this->itsAction[pos] = nullptr;
	}
 c6e:	00 00       	nop
 c70:	0f 90       	pop	r0
 c72:	0f 90       	pop	r0
 c74:	0f 90       	pop	r0
 c76:	0f 90       	pop	r0
 c78:	df 91       	pop	r29
 c7a:	cf 91       	pop	r28
 c7c:	08 95       	ret

00000c7e <_ZN16RotatingArmJoint11getRotationEv>:
#include "RotatingArmJoint.h"

int RotatingArmJoint::getRotation() {
 c7e:	cf 93       	push	r28
 c80:	df 93       	push	r29
 c82:	00 d0       	rcall	.+0      	; 0xc84 <_ZN16RotatingArmJoint11getRotationEv+0x6>
 c84:	cd b7       	in	r28, 0x3d	; 61
 c86:	de b7       	in	r29, 0x3e	; 62
 c88:	9a 83       	std	Y+2, r25	; 0x02
 c8a:	89 83       	std	Y+1, r24	; 0x01
	return this->angle;
 c8c:	89 81       	ldd	r24, Y+1	; 0x01
 c8e:	9a 81       	ldd	r25, Y+2	; 0x02
 c90:	fc 01       	movw	r30, r24
 c92:	80 81       	ld	r24, Z
 c94:	91 81       	ldd	r25, Z+1	; 0x01
}
 c96:	0f 90       	pop	r0
 c98:	0f 90       	pop	r0
 c9a:	df 91       	pop	r29
 c9c:	cf 91       	pop	r28
 c9e:	08 95       	ret

00000ca0 <_ZN16RotatingArmJoint6rotateEi>:

int RotatingArmJoint::rotate(int x) {
 ca0:	cf 93       	push	r28
 ca2:	df 93       	push	r29
 ca4:	00 d0       	rcall	.+0      	; 0xca6 <_ZN16RotatingArmJoint6rotateEi+0x6>
 ca6:	00 d0       	rcall	.+0      	; 0xca8 <_ZN16RotatingArmJoint6rotateEi+0x8>
 ca8:	cd b7       	in	r28, 0x3d	; 61
 caa:	de b7       	in	r29, 0x3e	; 62
 cac:	9a 83       	std	Y+2, r25	; 0x02
 cae:	89 83       	std	Y+1, r24	; 0x01
 cb0:	7c 83       	std	Y+4, r23	; 0x04
 cb2:	6b 83       	std	Y+3, r22	; 0x03
	if ((x + this->angle) < 360) {
 cb4:	89 81       	ldd	r24, Y+1	; 0x01
 cb6:	9a 81       	ldd	r25, Y+2	; 0x02
 cb8:	fc 01       	movw	r30, r24
 cba:	20 81       	ld	r18, Z
 cbc:	31 81       	ldd	r19, Z+1	; 0x01
 cbe:	8b 81       	ldd	r24, Y+3	; 0x03
 cc0:	9c 81       	ldd	r25, Y+4	; 0x04
 cc2:	82 0f       	add	r24, r18
 cc4:	93 1f       	adc	r25, r19
 cc6:	88 36       	cpi	r24, 0x68	; 104
 cc8:	91 40       	sbci	r25, 0x01	; 1
 cca:	8c f4       	brge	.+34     	; 0xcee <_ZN16RotatingArmJoint6rotateEi+0x4e>
		this->angle += x;
 ccc:	89 81       	ldd	r24, Y+1	; 0x01
 cce:	9a 81       	ldd	r25, Y+2	; 0x02
 cd0:	fc 01       	movw	r30, r24
 cd2:	20 81       	ld	r18, Z
 cd4:	31 81       	ldd	r19, Z+1	; 0x01
 cd6:	8b 81       	ldd	r24, Y+3	; 0x03
 cd8:	9c 81       	ldd	r25, Y+4	; 0x04
 cda:	28 0f       	add	r18, r24
 cdc:	39 1f       	adc	r19, r25
 cde:	89 81       	ldd	r24, Y+1	; 0x01
 ce0:	9a 81       	ldd	r25, Y+2	; 0x02
 ce2:	fc 01       	movw	r30, r24
 ce4:	31 83       	std	Z+1, r19	; 0x01
 ce6:	20 83       	st	Z, r18
		return 0;
 ce8:	80 e0       	ldi	r24, 0x00	; 0
 cea:	90 e0       	ldi	r25, 0x00	; 0
 cec:	02 c0       	rjmp	.+4      	; 0xcf2 <_ZN16RotatingArmJoint6rotateEi+0x52>
	}

	return -1;
 cee:	8f ef       	ldi	r24, 0xFF	; 255
 cf0:	9f ef       	ldi	r25, 0xFF	; 255
}
 cf2:	0f 90       	pop	r0
 cf4:	0f 90       	pop	r0
 cf6:	0f 90       	pop	r0
 cf8:	0f 90       	pop	r0
 cfa:	df 91       	pop	r29
 cfc:	cf 91       	pop	r28
 cfe:	08 95       	ret

00000d00 <_ZN16RotatingArmJoint4zeroEv>:

int RotatingArmJoint::zero() {
 d00:	cf 93       	push	r28
 d02:	df 93       	push	r29
 d04:	00 d0       	rcall	.+0      	; 0xd06 <_ZN16RotatingArmJoint4zeroEv+0x6>
 d06:	cd b7       	in	r28, 0x3d	; 61
 d08:	de b7       	in	r29, 0x3e	; 62
 d0a:	9a 83       	std	Y+2, r25	; 0x02
 d0c:	89 83       	std	Y+1, r24	; 0x01
	this->angle = 0;
 d0e:	89 81       	ldd	r24, Y+1	; 0x01
 d10:	9a 81       	ldd	r25, Y+2	; 0x02
 d12:	fc 01       	movw	r30, r24
 d14:	11 82       	std	Z+1, r1	; 0x01
 d16:	10 82       	st	Z, r1

	if (this->angle == 0) {
 d18:	89 81       	ldd	r24, Y+1	; 0x01
 d1a:	9a 81       	ldd	r25, Y+2	; 0x02
 d1c:	fc 01       	movw	r30, r24
 d1e:	80 81       	ld	r24, Z
 d20:	91 81       	ldd	r25, Z+1	; 0x01
 d22:	89 2b       	or	r24, r25
 d24:	19 f4       	brne	.+6      	; 0xd2c <_ZN16RotatingArmJoint4zeroEv+0x2c>
		return 0;
 d26:	80 e0       	ldi	r24, 0x00	; 0
 d28:	90 e0       	ldi	r25, 0x00	; 0
 d2a:	02 c0       	rjmp	.+4      	; 0xd30 <_ZN16RotatingArmJoint4zeroEv+0x30>
	}

	return -1;
 d2c:	8f ef       	ldi	r24, 0xFF	; 255
 d2e:	9f ef       	ldi	r25, 0xFF	; 255
 d30:	0f 90       	pop	r0
 d32:	0f 90       	pop	r0
 d34:	df 91       	pop	r29
 d36:	cf 91       	pop	r28
 d38:	08 95       	ret

00000d3a <_ZN15SlidingArmJoint9getLengthEv>:
#include "SlidingArmJoint.h"

int SlidingArmJoint::getLength() {
 d3a:	cf 93       	push	r28
 d3c:	df 93       	push	r29
 d3e:	00 d0       	rcall	.+0      	; 0xd40 <_ZN15SlidingArmJoint9getLengthEv+0x6>
 d40:	cd b7       	in	r28, 0x3d	; 61
 d42:	de b7       	in	r29, 0x3e	; 62
 d44:	9a 83       	std	Y+2, r25	; 0x02
 d46:	89 83       	std	Y+1, r24	; 0x01
	return this->currentLength;
 d48:	89 81       	ldd	r24, Y+1	; 0x01
 d4a:	9a 81       	ldd	r25, Y+2	; 0x02
 d4c:	fc 01       	movw	r30, r24
 d4e:	80 81       	ld	r24, Z
 d50:	91 81       	ldd	r25, Z+1	; 0x01
}
 d52:	0f 90       	pop	r0
 d54:	0f 90       	pop	r0
 d56:	df 91       	pop	r29
 d58:	cf 91       	pop	r28
 d5a:	08 95       	ret

00000d5c <_ZN15SlidingArmJoint9setLengthEi>:

int SlidingArmJoint::setLength(int x) {
 d5c:	cf 93       	push	r28
 d5e:	df 93       	push	r29
 d60:	00 d0       	rcall	.+0      	; 0xd62 <_ZN15SlidingArmJoint9setLengthEi+0x6>
 d62:	00 d0       	rcall	.+0      	; 0xd64 <_ZN15SlidingArmJoint9setLengthEi+0x8>
 d64:	cd b7       	in	r28, 0x3d	; 61
 d66:	de b7       	in	r29, 0x3e	; 62
 d68:	9a 83       	std	Y+2, r25	; 0x02
 d6a:	89 83       	std	Y+1, r24	; 0x01
 d6c:	7c 83       	std	Y+4, r23	; 0x04
 d6e:	6b 83       	std	Y+3, r22	; 0x03
	if ((x > this->minArmLength) && (x < this->maxArmLength)) {
 d70:	89 81       	ldd	r24, Y+1	; 0x01
 d72:	9a 81       	ldd	r25, Y+2	; 0x02
 d74:	fc 01       	movw	r30, r24
 d76:	22 81       	ldd	r18, Z+2	; 0x02
 d78:	33 81       	ldd	r19, Z+3	; 0x03
 d7a:	8b 81       	ldd	r24, Y+3	; 0x03
 d7c:	9c 81       	ldd	r25, Y+4	; 0x04
 d7e:	28 17       	cp	r18, r24
 d80:	39 07       	cpc	r19, r25
 d82:	a4 f4       	brge	.+40     	; 0xdac <_ZN15SlidingArmJoint9setLengthEi+0x50>
 d84:	89 81       	ldd	r24, Y+1	; 0x01
 d86:	9a 81       	ldd	r25, Y+2	; 0x02
 d88:	fc 01       	movw	r30, r24
 d8a:	24 81       	ldd	r18, Z+4	; 0x04
 d8c:	35 81       	ldd	r19, Z+5	; 0x05
 d8e:	8b 81       	ldd	r24, Y+3	; 0x03
 d90:	9c 81       	ldd	r25, Y+4	; 0x04
 d92:	82 17       	cp	r24, r18
 d94:	93 07       	cpc	r25, r19
 d96:	54 f4       	brge	.+20     	; 0xdac <_ZN15SlidingArmJoint9setLengthEi+0x50>
		this->currentLength = x;
 d98:	89 81       	ldd	r24, Y+1	; 0x01
 d9a:	9a 81       	ldd	r25, Y+2	; 0x02
 d9c:	2b 81       	ldd	r18, Y+3	; 0x03
 d9e:	3c 81       	ldd	r19, Y+4	; 0x04
 da0:	fc 01       	movw	r30, r24
 da2:	31 83       	std	Z+1, r19	; 0x01
 da4:	20 83       	st	Z, r18
		return 0;
 da6:	80 e0       	ldi	r24, 0x00	; 0
 da8:	90 e0       	ldi	r25, 0x00	; 0
 daa:	02 c0       	rjmp	.+4      	; 0xdb0 <_ZN15SlidingArmJoint9setLengthEi+0x54>
	}

	return -1;
 dac:	8f ef       	ldi	r24, 0xFF	; 255
 dae:	9f ef       	ldi	r25, 0xFF	; 255
}
 db0:	0f 90       	pop	r0
 db2:	0f 90       	pop	r0
 db4:	0f 90       	pop	r0
 db6:	0f 90       	pop	r0
 db8:	df 91       	pop	r29
 dba:	cf 91       	pop	r28
 dbc:	08 95       	ret

00000dbe <_ZN15SlidingArmJoint4zeroEv>:

int SlidingArmJoint::zero() {
 dbe:	cf 93       	push	r28
 dc0:	df 93       	push	r29
 dc2:	00 d0       	rcall	.+0      	; 0xdc4 <_ZN15SlidingArmJoint4zeroEv+0x6>
 dc4:	cd b7       	in	r28, 0x3d	; 61
 dc6:	de b7       	in	r29, 0x3e	; 62
 dc8:	9a 83       	std	Y+2, r25	; 0x02
 dca:	89 83       	std	Y+1, r24	; 0x01
	this->currentLength = 0;
 dcc:	89 81       	ldd	r24, Y+1	; 0x01
 dce:	9a 81       	ldd	r25, Y+2	; 0x02
 dd0:	fc 01       	movw	r30, r24
 dd2:	11 82       	std	Z+1, r1	; 0x01
 dd4:	10 82       	st	Z, r1

	if (this->currentLength) {
 dd6:	89 81       	ldd	r24, Y+1	; 0x01
 dd8:	9a 81       	ldd	r25, Y+2	; 0x02
 dda:	fc 01       	movw	r30, r24
 ddc:	80 81       	ld	r24, Z
 dde:	91 81       	ldd	r25, Z+1	; 0x01
 de0:	89 2b       	or	r24, r25
 de2:	19 f0       	breq	.+6      	; 0xdea <_ZN15SlidingArmJoint4zeroEv+0x2c>
		return 0;
 de4:	80 e0       	ldi	r24, 0x00	; 0
 de6:	90 e0       	ldi	r25, 0x00	; 0
 de8:	02 c0       	rjmp	.+4      	; 0xdee <_ZN15SlidingArmJoint4zeroEv+0x30>
	}

	return -1;
 dea:	8f ef       	ldi	r24, 0xFF	; 255
 dec:	9f ef       	ldi	r25, 0xFF	; 255
 dee:	0f 90       	pop	r0
 df0:	0f 90       	pop	r0
 df2:	df 91       	pop	r29
 df4:	cf 91       	pop	r28
 df6:	08 95       	ret

00000df8 <_ZN15RobotArmManagerC1Ev>:
#include "SlidingArmJoint.h"

/* class RobotArmManager */
class RobotArmManager {
public:
	RobotArmManager() {
 df8:	cf 93       	push	r28
 dfa:	df 93       	push	r29
 dfc:	cd b7       	in	r28, 0x3d	; 61
 dfe:	de b7       	in	r29, 0x3e	; 62
 e00:	28 97       	sbiw	r28, 0x08	; 8
 e02:	0f b6       	in	r0, 0x3f	; 63
 e04:	f8 94       	cli
 e06:	de bf       	out	0x3e, r29	; 62
 e08:	0f be       	out	0x3f, r0	; 63
 e0a:	cd bf       	out	0x3d, r28	; 61
 e0c:	98 87       	std	Y+8, r25	; 0x08
 e0e:	8f 83       	std	Y+7, r24	; 0x07
		this->itsGraspingManipulator = nullptr;
 e10:	8f 81       	ldd	r24, Y+7	; 0x07
 e12:	98 85       	ldd	r25, Y+8	; 0x08
 e14:	fc 01       	movw	r30, r24
 e16:	15 82       	std	Z+5, r1	; 0x05
 e18:	14 82       	std	Z+4, r1	; 0x04
		this->currentStep = 0;
 e1a:	8f 81       	ldd	r24, Y+7	; 0x07
 e1c:	98 85       	ldd	r25, Y+8	; 0x08
 e1e:	fc 01       	movw	r30, r24
 e20:	11 82       	std	Z+1, r1	; 0x01
 e22:	10 82       	st	Z, r1

		for (int pos = 0; pos < 100; ++pos) {
 e24:	1a 82       	std	Y+2, r1	; 0x02
 e26:	19 82       	std	Y+1, r1	; 0x01
 e28:	89 81       	ldd	r24, Y+1	; 0x01
 e2a:	9a 81       	ldd	r25, Y+2	; 0x02
 e2c:	84 36       	cpi	r24, 0x64	; 100
 e2e:	91 05       	cpc	r25, r1
 e30:	94 f4       	brge	.+36     	; 0xe56 <_ZN15RobotArmManagerC1Ev+0x5e>
			this->itsAction[pos] = nullptr;
 e32:	2f 81       	ldd	r18, Y+7	; 0x07
 e34:	38 85       	ldd	r19, Y+8	; 0x08
 e36:	89 81       	ldd	r24, Y+1	; 0x01
 e38:	9a 81       	ldd	r25, Y+2	; 0x02
 e3a:	09 96       	adiw	r24, 0x09	; 9
 e3c:	88 0f       	add	r24, r24
 e3e:	99 1f       	adc	r25, r25
 e40:	82 0f       	add	r24, r18
 e42:	93 1f       	adc	r25, r19
 e44:	fc 01       	movw	r30, r24
 e46:	11 82       	std	Z+1, r1	; 0x01
 e48:	10 82       	st	Z, r1
public:
	RobotArmManager() {
		this->itsGraspingManipulator = nullptr;
		this->currentStep = 0;

		for (int pos = 0; pos < 100; ++pos) {
 e4a:	89 81       	ldd	r24, Y+1	; 0x01
 e4c:	9a 81       	ldd	r25, Y+2	; 0x02
 e4e:	01 96       	adiw	r24, 0x01	; 1
 e50:	9a 83       	std	Y+2, r25	; 0x02
 e52:	89 83       	std	Y+1, r24	; 0x01
 e54:	e9 cf       	rjmp	.-46     	; 0xe28 <_ZN15RobotArmManagerC1Ev+0x30>
			this->itsAction[pos] = nullptr;
		}

		for (int pos = 0; pos < 4; ++pos) {
 e56:	1c 82       	std	Y+4, r1	; 0x04
 e58:	1b 82       	std	Y+3, r1	; 0x03
 e5a:	8b 81       	ldd	r24, Y+3	; 0x03
 e5c:	9c 81       	ldd	r25, Y+4	; 0x04
 e5e:	04 97       	sbiw	r24, 0x04	; 4
 e60:	94 f4       	brge	.+36     	; 0xe86 <_ZN15RobotArmManagerC1Ev+0x8e>
			this->itsRotatingArmJoint[pos] = nullptr;
 e62:	2f 81       	ldd	r18, Y+7	; 0x07
 e64:	38 85       	ldd	r19, Y+8	; 0x08
 e66:	8b 81       	ldd	r24, Y+3	; 0x03
 e68:	9c 81       	ldd	r25, Y+4	; 0x04
 e6a:	03 96       	adiw	r24, 0x03	; 3
 e6c:	88 0f       	add	r24, r24
 e6e:	99 1f       	adc	r25, r25
 e70:	82 0f       	add	r24, r18
 e72:	93 1f       	adc	r25, r19
 e74:	fc 01       	movw	r30, r24
 e76:	11 82       	std	Z+1, r1	; 0x01
 e78:	10 82       	st	Z, r1

		for (int pos = 0; pos < 100; ++pos) {
			this->itsAction[pos] = nullptr;
		}

		for (int pos = 0; pos < 4; ++pos) {
 e7a:	8b 81       	ldd	r24, Y+3	; 0x03
 e7c:	9c 81       	ldd	r25, Y+4	; 0x04
 e7e:	01 96       	adiw	r24, 0x01	; 1
 e80:	9c 83       	std	Y+4, r25	; 0x04
 e82:	8b 83       	std	Y+3, r24	; 0x03
 e84:	ea cf       	rjmp	.-44     	; 0xe5a <_ZN15RobotArmManagerC1Ev+0x62>
			this->itsRotatingArmJoint[pos] = nullptr;
		}

		for (int pos = 0; pos < 2; ++pos) {
 e86:	1e 82       	std	Y+6, r1	; 0x06
 e88:	1d 82       	std	Y+5, r1	; 0x05
 e8a:	8d 81       	ldd	r24, Y+5	; 0x05
 e8c:	9e 81       	ldd	r25, Y+6	; 0x06
 e8e:	02 97       	sbiw	r24, 0x02	; 2
 e90:	94 f4       	brge	.+36     	; 0xeb6 <_ZN15RobotArmManagerC1Ev+0xbe>
			this->itsSlidingArmJoint[pos] = nullptr;
 e92:	2f 81       	ldd	r18, Y+7	; 0x07
 e94:	38 85       	ldd	r19, Y+8	; 0x08
 e96:	8d 81       	ldd	r24, Y+5	; 0x05
 e98:	9e 81       	ldd	r25, Y+6	; 0x06
 e9a:	07 96       	adiw	r24, 0x07	; 7
 e9c:	88 0f       	add	r24, r24
 e9e:	99 1f       	adc	r25, r25
 ea0:	82 0f       	add	r24, r18
 ea2:	93 1f       	adc	r25, r19
 ea4:	fc 01       	movw	r30, r24
 ea6:	11 82       	std	Z+1, r1	; 0x01
 ea8:	10 82       	st	Z, r1

		for (int pos = 0; pos < 4; ++pos) {
			this->itsRotatingArmJoint[pos] = nullptr;
		}

		for (int pos = 0; pos < 2; ++pos) {
 eaa:	8d 81       	ldd	r24, Y+5	; 0x05
 eac:	9e 81       	ldd	r25, Y+6	; 0x06
 eae:	01 96       	adiw	r24, 0x01	; 1
 eb0:	9e 83       	std	Y+6, r25	; 0x06
 eb2:	8d 83       	std	Y+5, r24	; 0x05
 eb4:	ea cf       	rjmp	.-44     	; 0xe8a <_ZN15RobotArmManagerC1Ev+0x92>
			this->itsSlidingArmJoint[pos] = nullptr;
		}
	}
 eb6:	00 00       	nop
 eb8:	28 96       	adiw	r28, 0x08	; 8
 eba:	0f b6       	in	r0, 0x3f	; 63
 ebc:	f8 94       	cli
 ebe:	de bf       	out	0x3e, r29	; 62
 ec0:	0f be       	out	0x3f, r0	; 63
 ec2:	cd bf       	out	0x3d, r28	; 61
 ec4:	df 91       	pop	r29
 ec6:	cf 91       	pop	r28
 ec8:	08 95       	ret

00000eca <_exit>:
 eca:	f8 94       	cli

00000ecc <__stop_program>:
 ecc:	ff cf       	rjmp	.-2      	; 0xecc <__stop_program>

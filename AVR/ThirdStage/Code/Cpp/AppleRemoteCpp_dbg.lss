
AppleRemoteCpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00003638  000036cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003638  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000041  00800156  00800156  00003722  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00003722  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003784  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000037c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025cc  00000000  00000000  0000385c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f83  00000000  00000000  00005e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b6e  00000000  00000000  00006dab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000678  00000000  00000000  0000891c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d00  00000000  00000000  00008f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d5f  00000000  00000000  00009c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000a9f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	75 c0       	rjmp	.+234    	; 0xec <__ctors_end>
       2:	00 00       	nop
       4:	46 c6       	rjmp	.+3212   	; 0xc92 <__vector_1>
       6:	00 00       	nop
       8:	9a c0       	rjmp	.+308    	; 0x13e <__bad_interrupt>
       a:	00 00       	nop
       c:	98 c0       	rjmp	.+304    	; 0x13e <__bad_interrupt>
       e:	00 00       	nop
      10:	8e c6       	rjmp	.+3356   	; 0xd2e <__vector_4>
      12:	00 00       	nop
      14:	d0 c6       	rjmp	.+3488   	; 0xdb6 <__vector_5>
      16:	00 00       	nop
      18:	92 c0       	rjmp	.+292    	; 0x13e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	90 c0       	rjmp	.+288    	; 0x13e <__bad_interrupt>
      1e:	00 00       	nop
      20:	8e c0       	rjmp	.+284    	; 0x13e <__bad_interrupt>
      22:	00 00       	nop
      24:	8c c0       	rjmp	.+280    	; 0x13e <__bad_interrupt>
      26:	00 00       	nop
      28:	8a c0       	rjmp	.+276    	; 0x13e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	88 c0       	rjmp	.+272    	; 0x13e <__bad_interrupt>
      2e:	00 00       	nop
      30:	86 c0       	rjmp	.+268    	; 0x13e <__bad_interrupt>
      32:	00 00       	nop
      34:	84 c0       	rjmp	.+264    	; 0x13e <__bad_interrupt>
      36:	00 00       	nop
      38:	82 c0       	rjmp	.+260    	; 0x13e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	80 c0       	rjmp	.+256    	; 0x13e <__bad_interrupt>
      3e:	00 00       	nop
      40:	7e c0       	rjmp	.+252    	; 0x13e <__bad_interrupt>
      42:	00 00       	nop
      44:	7c c0       	rjmp	.+248    	; 0x13e <__bad_interrupt>
      46:	00 00       	nop
      48:	fa c6       	rjmp	.+3572   	; 0xe3e <__vector_18>
      4a:	00 00       	nop
      4c:	78 c0       	rjmp	.+240    	; 0x13e <__bad_interrupt>
      4e:	00 00       	nop
      50:	76 c0       	rjmp	.+236    	; 0x13e <__bad_interrupt>
      52:	00 00       	nop
      54:	74 c0       	rjmp	.+232    	; 0x13e <__bad_interrupt>
      56:	00 00       	nop
      58:	72 c0       	rjmp	.+228    	; 0x13e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	70 c0       	rjmp	.+224    	; 0x13e <__bad_interrupt>
      5e:	00 00       	nop
      60:	6e c0       	rjmp	.+220    	; 0x13e <__bad_interrupt>
      62:	00 00       	nop
      64:	6c c0       	rjmp	.+216    	; 0x13e <__bad_interrupt>
      66:	00 00       	nop
      68:	6a c0       	rjmp	.+212    	; 0x13e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	68 c0       	rjmp	.+208    	; 0x13e <__bad_interrupt>
      6e:	00 00       	nop
      70:	66 c0       	rjmp	.+204    	; 0x13e <__bad_interrupt>
      72:	00 00       	nop
      74:	64 c0       	rjmp	.+200    	; 0x13e <__bad_interrupt>
      76:	00 00       	nop
      78:	62 c0       	rjmp	.+196    	; 0x13e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	60 c0       	rjmp	.+192    	; 0x13e <__bad_interrupt>
      7e:	00 00       	nop
      80:	5e c0       	rjmp	.+188    	; 0x13e <__bad_interrupt>
      82:	00 00       	nop
      84:	5c c0       	rjmp	.+184    	; 0x13e <__bad_interrupt>
      86:	00 00       	nop
      88:	5a c0       	rjmp	.+180    	; 0x13e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	62 0d       	add	r22, r2
      8e:	1b 0e       	add	r1, r27
      90:	a6 0c       	add	r10, r6
      92:	0a 0b       	sbc	r16, r26
      94:	66 08       	sbc	r6, r6
      96:	73 09       	sbc	r23, r3
      98:	b3 0f       	add	r27, r19
      9a:	b3 0f       	add	r27, r19
      9c:	b3 0f       	add	r27, r19
      9e:	b3 0f       	add	r27, r19
      a0:	b3 0f       	add	r27, r19
      a2:	b3 0f       	add	r27, r19
      a4:	b3 0f       	add	r27, r19
      a6:	b3 0f       	add	r27, r19
      a8:	b3 0f       	add	r27, r19
      aa:	b3 0f       	add	r27, r19
      ac:	b3 0f       	add	r27, r19
      ae:	b3 0f       	add	r27, r19
      b0:	b3 0f       	add	r27, r19
      b2:	b3 0f       	add	r27, r19
      b4:	b3 0f       	add	r27, r19
      b6:	b3 0f       	add	r27, r19
      b8:	b3 0f       	add	r27, r19
      ba:	b3 0f       	add	r27, r19
      bc:	b3 0f       	add	r27, r19
      be:	b3 0f       	add	r27, r19
      c0:	b3 0f       	add	r27, r19
      c2:	b3 0f       	add	r27, r19
      c4:	b3 0f       	add	r27, r19
      c6:	b3 0f       	add	r27, r19
      c8:	b3 0f       	add	r27, r19
      ca:	b3 0f       	add	r27, r19
      cc:	b3 0f       	add	r27, r19
      ce:	b3 0f       	add	r27, r19
      d0:	b3 0f       	add	r27, r19
      d2:	b3 0f       	add	r27, r19
      d4:	b3 0f       	add	r27, r19
      d6:	b3 0f       	add	r27, r19
      d8:	b3 0f       	add	r27, r19
      da:	b3 0f       	add	r27, r19
      dc:	b3 0f       	add	r27, r19
      de:	b3 0f       	add	r27, r19
      e0:	b3 0f       	add	r27, r19
      e2:	b3 0f       	add	r27, r19
      e4:	b3 0f       	add	r27, r19
      e6:	b3 0f       	add	r27, r19
      e8:	b3 0f       	add	r27, r19

000000ea <__ctors_start>:
      ea:	0c 16       	cp	r0, r28

000000ec <__ctors_end>:
      ec:	11 24       	eor	r1, r1
      ee:	1f be       	out	0x3f, r1	; 63
      f0:	cf ef       	ldi	r28, 0xFF	; 255
      f2:	d0 e4       	ldi	r29, 0x40	; 64
      f4:	de bf       	out	0x3e, r29	; 62
      f6:	cd bf       	out	0x3d, r28	; 61

000000f8 <__do_copy_data>:
      f8:	11 e0       	ldi	r17, 0x01	; 1
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b1 e0       	ldi	r27, 0x01	; 1
      fe:	e8 e3       	ldi	r30, 0x38	; 56
     100:	f6 e3       	ldi	r31, 0x36	; 54
     102:	00 e0       	ldi	r16, 0x00	; 0
     104:	0b bf       	out	0x3b, r16	; 59
     106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
     108:	07 90       	elpm	r0, Z+
     10a:	0d 92       	st	X+, r0
     10c:	a6 35       	cpi	r26, 0x56	; 86
     10e:	b1 07       	cpc	r27, r17
     110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
     112:	21 e0       	ldi	r18, 0x01	; 1
     114:	a6 e5       	ldi	r26, 0x56	; 86
     116:	b1 e0       	ldi	r27, 0x01	; 1
     118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
     11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
     11c:	a7 39       	cpi	r26, 0x97	; 151
     11e:	b2 07       	cpc	r27, r18
     120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>

00000122 <__do_global_ctors>:
     122:	10 e0       	ldi	r17, 0x00	; 0
     124:	c6 e7       	ldi	r28, 0x76	; 118
     126:	d0 e0       	ldi	r29, 0x00	; 0
     128:	04 c0       	rjmp	.+8      	; 0x132 <__do_global_ctors+0x10>
     12a:	21 97       	sbiw	r28, 0x01	; 1
     12c:	fe 01       	movw	r30, r28
     12e:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <__tablejump2__>
     132:	c5 37       	cpi	r28, 0x75	; 117
     134:	d1 07       	cpc	r29, r17
     136:	c9 f7       	brne	.-14     	; 0x12a <__do_global_ctors+0x8>
     138:	b6 d6       	rcall	.+3436   	; 0xea6 <main>
     13a:	0c 94 1a 1b 	jmp	0x3634	; 0x3634 <_exit>

0000013e <__bad_interrupt>:
     13e:	60 cf       	rjmp	.-320    	; 0x0 <__vectors>

00000140 <_ZN4FifoC1Ev>:
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	00 d0       	rcall	.+0      	; 0x146 <_ZN4FifoC1Ev+0x6>
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	9a 83       	std	Y+2, r25	; 0x02
     14c:	89 83       	std	Y+1, r24	; 0x01
     14e:	89 81       	ldd	r24, Y+1	; 0x01
     150:	9a 81       	ldd	r25, Y+2	; 0x02
     152:	fc 01       	movw	r30, r24
     154:	12 8a       	std	Z+18, r1	; 0x12
     156:	89 81       	ldd	r24, Y+1	; 0x01
     158:	9a 81       	ldd	r25, Y+2	; 0x02
     15a:	fc 01       	movw	r30, r24
     15c:	22 89       	ldd	r18, Z+18	; 0x12
     15e:	89 81       	ldd	r24, Y+1	; 0x01
     160:	9a 81       	ldd	r25, Y+2	; 0x02
     162:	fc 01       	movw	r30, r24
     164:	21 8b       	std	Z+17, r18	; 0x11
     166:	00 00       	nop
     168:	0f 90       	pop	r0
     16a:	0f 90       	pop	r0
     16c:	df 91       	pop	r29
     16e:	cf 91       	pop	r28
     170:	08 95       	ret

00000172 <_ZN4Fifo3putEh>:
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	00 d0       	rcall	.+0      	; 0x178 <_ZN4Fifo3putEh+0x6>
     178:	1f 92       	push	r1
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
     17e:	9a 83       	std	Y+2, r25	; 0x02
     180:	89 83       	std	Y+1, r24	; 0x01
     182:	6b 83       	std	Y+3, r22	; 0x03
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	9a 81       	ldd	r25, Y+2	; 0x02
     188:	fc 01       	movw	r30, r24
     18a:	81 89       	ldd	r24, Z+17	; 0x11
     18c:	28 2f       	mov	r18, r24
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	9a 81       	ldd	r25, Y+2	; 0x02
     194:	fc 01       	movw	r30, r24
     196:	82 89       	ldd	r24, Z+18	; 0x12
     198:	88 2f       	mov	r24, r24
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	40 96       	adiw	r24, 0x10	; 16
     19e:	41 e1       	ldi	r20, 0x11	; 17
     1a0:	50 e0       	ldi	r21, 0x00	; 0
     1a2:	ba 01       	movw	r22, r20
     1a4:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <__divmodhi4>
     1a8:	28 17       	cp	r18, r24
     1aa:	39 07       	cpc	r19, r25
     1ac:	11 f4       	brne	.+4      	; 0x1b2 <_ZN4Fifo3putEh+0x40>
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	1f c0       	rjmp	.+62     	; 0x1f0 <_ZN4Fifo3putEh+0x7e>
     1b2:	89 81       	ldd	r24, Y+1	; 0x01
     1b4:	9a 81       	ldd	r25, Y+2	; 0x02
     1b6:	fc 01       	movw	r30, r24
     1b8:	81 89       	ldd	r24, Z+17	; 0x11
     1ba:	88 2f       	mov	r24, r24
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	29 81       	ldd	r18, Y+1	; 0x01
     1c0:	3a 81       	ldd	r19, Y+2	; 0x02
     1c2:	82 0f       	add	r24, r18
     1c4:	93 1f       	adc	r25, r19
     1c6:	2b 81       	ldd	r18, Y+3	; 0x03
     1c8:	fc 01       	movw	r30, r24
     1ca:	20 83       	st	Z, r18
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	9a 81       	ldd	r25, Y+2	; 0x02
     1d0:	fc 01       	movw	r30, r24
     1d2:	81 89       	ldd	r24, Z+17	; 0x11
     1d4:	88 2f       	mov	r24, r24
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	01 96       	adiw	r24, 0x01	; 1
     1da:	21 e1       	ldi	r18, 0x11	; 17
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	b9 01       	movw	r22, r18
     1e0:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <__divmodhi4>
     1e4:	28 2f       	mov	r18, r24
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	9a 81       	ldd	r25, Y+2	; 0x02
     1ea:	fc 01       	movw	r30, r24
     1ec:	21 8b       	std	Z+17, r18	; 0x11
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	0f 90       	pop	r0
     1f2:	0f 90       	pop	r0
     1f4:	0f 90       	pop	r0
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	08 95       	ret

000001fc <_ZN4Fifo3getEPh>:
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	00 d0       	rcall	.+0      	; 0x202 <_ZN4Fifo3getEPh+0x6>
     202:	00 d0       	rcall	.+0      	; 0x204 <_ZN4Fifo3getEPh+0x8>
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
     208:	9a 83       	std	Y+2, r25	; 0x02
     20a:	89 83       	std	Y+1, r24	; 0x01
     20c:	7c 83       	std	Y+4, r23	; 0x04
     20e:	6b 83       	std	Y+3, r22	; 0x03
     210:	89 81       	ldd	r24, Y+1	; 0x01
     212:	9a 81       	ldd	r25, Y+2	; 0x02
     214:	fc 01       	movw	r30, r24
     216:	21 89       	ldd	r18, Z+17	; 0x11
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	9a 81       	ldd	r25, Y+2	; 0x02
     21c:	fc 01       	movw	r30, r24
     21e:	82 89       	ldd	r24, Z+18	; 0x12
     220:	28 17       	cp	r18, r24
     222:	11 f4       	brne	.+4      	; 0x228 <_ZN4Fifo3getEPh+0x2c>
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	22 c0       	rjmp	.+68     	; 0x26c <_ZN4Fifo3getEPh+0x70>
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	9a 81       	ldd	r25, Y+2	; 0x02
     22c:	fc 01       	movw	r30, r24
     22e:	82 89       	ldd	r24, Z+18	; 0x12
     230:	88 2f       	mov	r24, r24
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	29 81       	ldd	r18, Y+1	; 0x01
     236:	3a 81       	ldd	r19, Y+2	; 0x02
     238:	82 0f       	add	r24, r18
     23a:	93 1f       	adc	r25, r19
     23c:	fc 01       	movw	r30, r24
     23e:	20 81       	ld	r18, Z
     240:	8b 81       	ldd	r24, Y+3	; 0x03
     242:	9c 81       	ldd	r25, Y+4	; 0x04
     244:	fc 01       	movw	r30, r24
     246:	20 83       	st	Z, r18
     248:	89 81       	ldd	r24, Y+1	; 0x01
     24a:	9a 81       	ldd	r25, Y+2	; 0x02
     24c:	fc 01       	movw	r30, r24
     24e:	82 89       	ldd	r24, Z+18	; 0x12
     250:	88 2f       	mov	r24, r24
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	01 96       	adiw	r24, 0x01	; 1
     256:	21 e1       	ldi	r18, 0x11	; 17
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	b9 01       	movw	r22, r18
     25c:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <__divmodhi4>
     260:	28 2f       	mov	r18, r24
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	9a 81       	ldd	r25, Y+2	; 0x02
     266:	fc 01       	movw	r30, r24
     268:	22 8b       	std	Z+18, r18	; 0x12
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	0f 90       	pop	r0
     26e:	0f 90       	pop	r0
     270:	0f 90       	pop	r0
     272:	0f 90       	pop	r0
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	08 95       	ret

0000027a <_ZN2IRC1Ev>:
volatile uint8_t old_cnt_state = 0;

//-----------------------------------------------------------------------------

// Setup the IR LED
IR::IR() {
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	00 d0       	rcall	.+0      	; 0x280 <_ZN2IRC1Ev+0x6>
     280:	cd b7       	in	r28, 0x3d	; 61
     282:	de b7       	in	r29, 0x3e	; 62
     284:	9a 83       	std	Y+2, r25	; 0x02
     286:	89 83       	std	Y+1, r24	; 0x01
	// IR LED Init
	REMOTE_REGISTER |= (REMOTE_LED);
     288:	8a e2       	ldi	r24, 0x2A	; 42
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	2a e2       	ldi	r18, 0x2A	; 42
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	f9 01       	movw	r30, r18
     292:	30 81       	ld	r19, Z
     294:	22 e0       	ldi	r18, 0x02	; 2
     296:	23 2b       	or	r18, r19
     298:	fc 01       	movw	r30, r24
     29a:	20 83       	st	Z, r18
	REMOTE_PORT |= (REMOTE_LED); // LED off (active low)
     29c:	8b e2       	ldi	r24, 0x2B	; 43
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	2b e2       	ldi	r18, 0x2B	; 43
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	f9 01       	movw	r30, r18
     2a6:	30 81       	ld	r19, Z
     2a8:	22 e0       	ldi	r18, 0x02	; 2
     2aa:	23 2b       	or	r18, r19
     2ac:	fc 01       	movw	r30, r24
     2ae:	20 83       	st	Z, r18

	// IR Init
	// Timer: 8bit, Clock: 8MHz via XTAL, Prescaler 1024, Overflow = 32.768ms, Tick = 0.128ms
	TCCR0A &= ~((1 << WGM00) | (1 << WGM01));
     2b0:	84 e4       	ldi	r24, 0x44	; 68
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	24 e4       	ldi	r18, 0x44	; 68
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	f9 01       	movw	r30, r18
     2ba:	20 81       	ld	r18, Z
     2bc:	2c 7f       	andi	r18, 0xFC	; 252
     2be:	fc 01       	movw	r30, r24
     2c0:	20 83       	st	Z, r18
	TCCR0B |= ((1 << CS00) | (1 << CS02)); // Prescaler 1024
     2c2:	85 e4       	ldi	r24, 0x45	; 69
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	25 e4       	ldi	r18, 0x45	; 69
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	f9 01       	movw	r30, r18
     2cc:	20 81       	ld	r18, Z
     2ce:	25 60       	ori	r18, 0x05	; 5
     2d0:	fc 01       	movw	r30, r24
     2d2:	20 83       	st	Z, r18
	TIMSK0 |= (1 << TOIE0); // When the TOIE0 bit is written to one,
     2d4:	8e e6       	ldi	r24, 0x6E	; 110
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	2e e6       	ldi	r18, 0x6E	; 110
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	f9 01       	movw	r30, r18
     2de:	20 81       	ld	r18, Z
     2e0:	21 60       	ori	r18, 0x01	; 1
     2e2:	fc 01       	movw	r30, r24
     2e4:	20 83       	st	Z, r18
	// and the I-bit in the Status Register is set (one), the
	// Timer/Counter0 Overflow interrupt is enabled.

	// Interrupt 0 (PD2): Inverted signal input, triggered by logical change
	REMOTE_REGISTER &= ~(1 << PD2);
     2e6:	8a e2       	ldi	r24, 0x2A	; 42
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	2a e2       	ldi	r18, 0x2A	; 42
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	f9 01       	movw	r30, r18
     2f0:	20 81       	ld	r18, Z
     2f2:	2b 7f       	andi	r18, 0xFB	; 251
     2f4:	fc 01       	movw	r30, r24
     2f6:	20 83       	st	Z, r18
	REMOTE_PORT |= REMOTE_IR;
     2f8:	8b e2       	ldi	r24, 0x2B	; 43
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	2b e2       	ldi	r18, 0x2B	; 43
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	f9 01       	movw	r30, r18
     302:	30 81       	ld	r19, Z
     304:	24 e0       	ldi	r18, 0x04	; 4
     306:	23 2b       	or	r18, r19
     308:	fc 01       	movw	r30, r24
     30a:	20 83       	st	Z, r18
	
	EICRA |= (1 << ISC00);			// Logical change ICS00 = 1, ISC01 = 0
     30c:	89 e6       	ldi	r24, 0x69	; 105
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	29 e6       	ldi	r18, 0x69	; 105
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	f9 01       	movw	r30, r18
     316:	20 81       	ld	r18, Z
     318:	21 60       	ori	r18, 0x01	; 1
     31a:	fc 01       	movw	r30, r24
     31c:	20 83       	st	Z, r18
	EICRA &= ~(1 << ISC01);
     31e:	89 e6       	ldi	r24, 0x69	; 105
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	29 e6       	ldi	r18, 0x69	; 105
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	f9 01       	movw	r30, r18
     328:	20 81       	ld	r18, Z
     32a:	2d 7f       	andi	r18, 0xFD	; 253
     32c:	fc 01       	movw	r30, r24
     32e:	20 83       	st	Z, r18
	EIMSK |= (1 << INT0);			// Enable INT0
     330:	8d e3       	ldi	r24, 0x3D	; 61
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	2d e3       	ldi	r18, 0x3D	; 61
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	f9 01       	movw	r30, r18
     33a:	20 81       	ld	r18, Z
     33c:	21 60       	ori	r18, 0x01	; 1
     33e:	fc 01       	movw	r30, r24
     340:	20 83       	st	Z, r18

	// Reset state
	ir_state = IR_BURST;
     342:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__data_end>
	
	this->status &= ~(1 << IR_RECEIVED);
     346:	89 81       	ldd	r24, Y+1	; 0x01
     348:	9a 81       	ldd	r25, Y+2	; 0x02
     34a:	fc 01       	movw	r30, r24
     34c:	80 81       	ld	r24, Z
     34e:	28 2f       	mov	r18, r24
     350:	2e 7f       	andi	r18, 0xFE	; 254
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	9a 81       	ldd	r25, Y+2	; 0x02
     356:	fc 01       	movw	r30, r24
     358:	20 83       	st	Z, r18
	
	// Reset global variables
	ir_tmp_keyhold = 0;
     35a:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <ir_tmp_keyhold>
	ir_tmp_ovf = 0;
     35e:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <ir_tmp_ovf>
	TCNT0 = 0;
     362:	86 e4       	ldi	r24, 0x46	; 70
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	fc 01       	movw	r30, r24
     368:	10 82       	st	Z, r1
}
     36a:	00 00       	nop
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	08 95       	ret

00000376 <_ZN2IR4stopEv>:

//-----------------------------------------------------------------------------

 // ###### Stops ir function ######
 void IR::stop() {
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	00 d0       	rcall	.+0      	; 0x37c <_ZN2IR4stopEv+0x6>
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	9a 83       	std	Y+2, r25	; 0x02
     382:	89 83       	std	Y+1, r24	; 0x01
   // Stop timer and disable interrupt.
   TCCR0B &= ~((1 << CS00)| (1 << CS02));
     384:	85 e4       	ldi	r24, 0x45	; 69
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	25 e4       	ldi	r18, 0x45	; 69
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	f9 01       	movw	r30, r18
     38e:	20 81       	ld	r18, Z
     390:	2a 7f       	andi	r18, 0xFA	; 250
     392:	fc 01       	movw	r30, r24
     394:	20 83       	st	Z, r18
   TIMSK0 &= ~(1<<TOIE0);
     396:	8e e6       	ldi	r24, 0x6E	; 110
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	2e e6       	ldi	r18, 0x6E	; 110
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	f9 01       	movw	r30, r18
     3a0:	20 81       	ld	r18, Z
     3a2:	2e 7f       	andi	r18, 0xFE	; 254
     3a4:	fc 01       	movw	r30, r24
     3a6:	20 83       	st	Z, r18
   EIMSK &= ~(1 << INT0);
     3a8:	8d e3       	ldi	r24, 0x3D	; 61
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	2d e3       	ldi	r18, 0x3D	; 61
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	f9 01       	movw	r30, r18
     3b2:	20 81       	ld	r18, Z
     3b4:	2e 7f       	andi	r18, 0xFE	; 254
     3b6:	fc 01       	movw	r30, r24
     3b8:	20 83       	st	Z, r18
}
     3ba:	00 00       	nop
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <_ZN2IR6decodeEv>:

//-----------------------------------------------------------------------------

void IR::decode() {
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	00 d0       	rcall	.+0      	; 0x3cc <_ZN2IR6decodeEv+0x6>
     3cc:	1f 92       	push	r1
     3ce:	cd b7       	in	r28, 0x3d	; 61
     3d0:	de b7       	in	r29, 0x3e	; 62
     3d2:	9b 83       	std	Y+3, r25	; 0x03
     3d4:	8a 83       	std	Y+2, r24	; 0x02
 // ###### INT0 for decoding ######  
 //ISR(INT0_vect) {
	// Get current port state to check if we triggered on rising or falling edge
	cli();
     3d6:	f8 94       	cli
    uint8_t port_state = (PIND & REMOTE_IR);
     3d8:	89 e2       	ldi	r24, 0x29	; 41
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	fc 01       	movw	r30, r24
     3de:	80 81       	ld	r24, Z
     3e0:	84 70       	andi	r24, 0x04	; 4
     3e2:	89 83       	std	Y+1, r24	; 0x01
    cnt_state = TCNT0;
     3e4:	86 e4       	ldi	r24, 0x46	; 70
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	fc 01       	movw	r30, r24
     3ea:	80 81       	ld	r24, Z
     3ec:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <cnt_state>
    sei();
     3f0:	78 94       	sei
   

    if (ir_tmp_ovf != 0) {
     3f2:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <ir_tmp_ovf>
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	99 23       	and	r25, r25
     3fa:	09 f4       	brne	.+2      	; 0x3fe <_ZN2IR6decodeEv+0x38>
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	88 23       	and	r24, r24
     400:	49 f0       	breq	.+18     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		// Overflow, so reset and ignore.
		ir_tmp_ovf = 0;
     402:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <ir_tmp_ovf>
		ir_state = IR_BURST;
     406:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__data_end>
		TCNT0 = 0;
     40a:	86 e4       	ldi	r24, 0x46	; 70
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	fc 01       	movw	r30, r24
     410:	10 82       	st	Z, r1
		return;
     412:	24 c3       	rjmp	.+1608   	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
    }

    switch (ir_state) {
     414:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
     418:	88 2f       	mov	r24, r24
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	82 30       	cpi	r24, 0x02	; 2
     41e:	91 05       	cpc	r25, r1
     420:	09 f4       	brne	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     422:	81 c0       	rjmp	.+258    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     424:	83 30       	cpi	r24, 0x03	; 3
     426:	91 05       	cpc	r25, r1
     428:	2c f4       	brge	.+10     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     42a:	00 97       	sbiw	r24, 0x00	; 0
     42c:	79 f0       	breq	.+30     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	59 f1       	breq	.+86     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     432:	14 c3       	rjmp	.+1576   	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
     434:	84 30       	cpi	r24, 0x04	; 4
     436:	91 05       	cpc	r25, r1
     438:	09 f4       	brne	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     43a:	83 c1       	rjmp	.+774    	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
     43c:	84 30       	cpi	r24, 0x04	; 4
     43e:	91 05       	cpc	r25, r1
     440:	0c f4       	brge	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     442:	f8 c0       	rjmp	.+496    	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
     444:	05 97       	sbiw	r24, 0x05	; 5
     446:	09 f4       	brne	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	03 c2       	rjmp	.+1030   	; 0x850 <__LOCK_REGION_LENGTH__+0x450>
     44a:	08 c3       	rjmp	.+1552   	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
     
		case IR_BURST:
			if (!port_state) {  // falling edge (active low)
     44c:	89 81       	ldd	r24, Y+1	; 0x01
     44e:	88 23       	and	r24, r24
     450:	29 f4       	brne	.+10     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
				TCNT0 = 0;
     452:	86 e4       	ldi	r24, 0x46	; 70
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	fc 01       	movw	r30, r24
     458:	10 82       	st	Z, r1
				if ((cnt_state > TIME_BURST_MIN) && (cnt_state < TIME_BURST_MAX)) {
					ir_state = IR_GAP; // Next state
					TCNT0 = 0; // Reset counter
				}        
			}
			break;
     45a:	ef c2       	rjmp	.+1502   	; 0xa3a <__LOCK_REGION_LENGTH__+0x63a>
     
		case IR_BURST:
			if (!port_state) {  // falling edge (active low)
				TCNT0 = 0;
			} else {
				if ((cnt_state > TIME_BURST_MIN) && (cnt_state < TIME_BURST_MAX)) {
     45c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     460:	82 34       	cpi	r24, 0x42	; 66
     462:	30 f0       	brcs	.+12     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     464:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     468:	80 35       	cpi	r24, 0x50	; 80
     46a:	10 f4       	brcc	.+4      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	01 c0       	rjmp	.+2      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	88 23       	and	r24, r24
     474:	09 f4       	brne	.+2      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     476:	e1 c2       	rjmp	.+1474   	; 0xa3a <__LOCK_REGION_LENGTH__+0x63a>
					ir_state = IR_GAP; // Next state
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
					TCNT0 = 0; // Reset counter
     47e:	86 e4       	ldi	r24, 0x46	; 70
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	fc 01       	movw	r30, r24
     484:	10 82       	st	Z, r1
				}        
			}
			break;
     486:	d9 c2       	rjmp	.+1458   	; 0xa3a <__LOCK_REGION_LENGTH__+0x63a>
      
		case IR_GAP: 
			if (!port_state) {
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	88 23       	and	r24, r24
     48c:	09 f0       	breq	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48e:	48 c0       	rjmp	.+144    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
				if ((cnt_state>TIME_GAP_MIN) && (cnt_state<TIME_GAP_MAX)) {    
     490:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     494:	8f 31       	cpi	r24, 0x1F	; 31
     496:	30 f0       	brcs	.+12     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     498:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     49c:	88 32       	cpi	r24, 0x28	; 40
     49e:	10 f4       	brcc	.+4      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	01 c0       	rjmp	.+2      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	88 23       	and	r24, r24
     4a8:	a1 f0       	breq	.+40     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
					TCNT0 = 0; // Reset counter         
     4aa:	86 e4       	ldi	r24, 0x46	; 70
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	fc 01       	movw	r30, r24
     4b0:	10 82       	st	Z, r1
					ir_state = IR_ADDRESS; // Next state
     4b2:	82 e0       	ldi	r24, 0x02	; 2
     4b4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
					ir_bitctr = 0; // Reset bit counter
     4b8:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <ir_bitctr>
					this->status &= ~(1<<IR_KEYHOLD);
     4bc:	8a 81       	ldd	r24, Y+2	; 0x02
     4be:	9b 81       	ldd	r25, Y+3	; 0x03
     4c0:	fc 01       	movw	r30, r24
     4c2:	80 81       	ld	r24, Z
     4c4:	28 2f       	mov	r18, r24
     4c6:	2d 7f       	andi	r18, 0xFD	; 253
     4c8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ca:	9b 81       	ldd	r25, Y+3	; 0x03
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 83       	st	Z, r18
					break;
     4d0:	c5 c2       	rjmp	.+1418   	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
				} else {
					if ((cnt_state > TIME_HOLD_MIN) && (cnt_state < TIME_HOLD_MAX)) {
     4d2:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     4d6:	80 31       	cpi	r24, 0x10	; 16
     4d8:	30 f0       	brcs	.+12     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4da:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     4de:	84 31       	cpi	r24, 0x14	; 20
     4e0:	10 f4       	brcc	.+4      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	88 23       	and	r24, r24
     4ea:	d1 f0       	breq	.+52     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
						if(this->status & (1<<IR_SIGVALID)) {
     4ec:	8a 81       	ldd	r24, Y+2	; 0x02
     4ee:	9b 81       	ldd	r25, Y+3	; 0x03
     4f0:	fc 01       	movw	r30, r24
     4f2:	80 81       	ld	r24, Z
     4f4:	88 2f       	mov	r24, r24
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	84 70       	andi	r24, 0x04	; 4
     4fa:	99 27       	eor	r25, r25
     4fc:	89 2b       	or	r24, r25
     4fe:	69 f0       	breq	.+26     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
							this->status |= (1<<IR_KEYHOLD);
     500:	8a 81       	ldd	r24, Y+2	; 0x02
     502:	9b 81       	ldd	r25, Y+3	; 0x03
     504:	fc 01       	movw	r30, r24
     506:	80 81       	ld	r24, Z
     508:	28 2f       	mov	r18, r24
     50a:	22 60       	ori	r18, 0x02	; 2
     50c:	8a 81       	ldd	r24, Y+2	; 0x02
     50e:	9b 81       	ldd	r25, Y+3	; 0x03
     510:	fc 01       	movw	r30, r24
     512:	20 83       	st	Z, r18
							ir_tmp_keyhold = IR_HOLD_OVF;
     514:	85 e0       	ldi	r24, 0x05	; 5
     516:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <ir_tmp_keyhold>
						}
						ir_state = IR_BURST;
     51a:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__data_end>
						break;
     51e:	9e c2       	rjmp	.+1340   	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
				   }  
				}                                                                      
			}             
			// Should not happen, must be invalid. Reset.
			ir_state = IR_BURST;   
     520:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__data_end>
			break;
     524:	9b c2       	rjmp	.+1334   	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
	  
		case IR_ADDRESS:
			if (port_state) {
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	88 23       	and	r24, r24
     52a:	a9 f0       	breq	.+42     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
				// Must be short pulse
				if((cnt_state > TIME_PULSE_MIN) && (cnt_state < TIME_PULSE_MAX)) {    
     52c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     530:	83 30       	cpi	r24, 0x03	; 3
     532:	30 f0       	brcs	.+12     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
     534:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     538:	87 30       	cpi	r24, 0x07	; 7
     53a:	10 f4       	brcc	.+4      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	01 c0       	rjmp	.+2      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	88 23       	and	r24, r24
     544:	29 f0       	breq	.+10     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
					TCNT0 = 0; // Reset counter
     546:	86 e4       	ldi	r24, 0x46	; 70
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	fc 01       	movw	r30, r24
     54c:	10 82       	st	Z, r1
					break;        
     54e:	86 c2       	rjmp	.+1292   	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;
     550:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__data_end>
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;                
				break;  
			}
			break;   
     554:	83 c2       	rjmp	.+1286   	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
					break;        
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;
			} else {
				if ((cnt_state > TIME_ZERO_MIN) && (cnt_state < TIME_ZERO_MAX)) {
     556:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     55a:	83 30       	cpi	r24, 0x03	; 3
     55c:	30 f0       	brcs	.+12     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     55e:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     562:	87 30       	cpi	r24, 0x07	; 7
     564:	10 f4       	brcc	.+4      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	01 c0       	rjmp	.+2      	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	88 23       	and	r24, r24
     56e:	51 f1       	breq	.+84     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
					// 0
					#ifdef PROTOCOL_NEC_EXTENDED
						ir_tmp_address_l &= ~(1<<ir_bitctr++);
     570:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <ir_bitctr>
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	98 0f       	add	r25, r24
     578:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <ir_bitctr>
     57c:	28 2f       	mov	r18, r24
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	02 c0       	rjmp	.+4      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
     586:	88 0f       	add	r24, r24
     588:	99 1f       	adc	r25, r25
     58a:	2a 95       	dec	r18
     58c:	e2 f7       	brpl	.-8      	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     58e:	80 95       	com	r24
     590:	90 95       	com	r25
     592:	98 2f       	mov	r25, r24
     594:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <ir_tmp_address_l>
     598:	89 23       	and	r24, r25
     59a:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <ir_tmp_address_l>
					#else
						ir_tmp_address &= ~(1<<ir_bitctr++);
					#endif 
					TCNT0 = 0; // Reset counter
     59e:	86 e4       	ldi	r24, 0x46	; 70
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	fc 01       	movw	r30, r24
     5a4:	10 82       	st	Z, r1
					if (ir_bitctr >= 8) {
     5a6:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <ir_bitctr>
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	98 30       	cpi	r25, 0x08	; 8
     5ae:	08 f4       	brcc	.+2      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	88 23       	and	r24, r24
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     5b6:	43 c2       	rjmp	.+1158   	; 0xa3e <__LOCK_REGION_LENGTH__+0x63e>
						ir_state = IR_ADDRESS_INV; // Next state
     5b8:	83 e0       	ldi	r24, 0x03	; 3
     5ba:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
						ir_bitctr = 0; // Reset bit counter
     5be:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <ir_bitctr>
					}
					break;
     5c2:	3d c2       	rjmp	.+1146   	; 0xa3e <__LOCK_REGION_LENGTH__+0x63e>
				} else {
					if ((cnt_state > TIME_ONE_MIN) && (cnt_state < TIME_ONE_MAX)) {
     5c4:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     5c8:	8a 30       	cpi	r24, 0x0A	; 10
     5ca:	30 f0       	brcs	.+12     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
     5cc:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     5d0:	83 31       	cpi	r24, 0x13	; 19
     5d2:	10 f4       	brcc	.+4      	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	01 c0       	rjmp	.+2      	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	88 23       	and	r24, r24
     5dc:	41 f1       	breq	.+80     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
						// 1
						#ifdef PROTOCOL_NEC_EXTENDED
							ir_tmp_address_l |= (1<<ir_bitctr++);
     5de:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <ir_bitctr>
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	98 0f       	add	r25, r24
     5e6:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <ir_bitctr>
     5ea:	28 2f       	mov	r18, r24
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
     5f4:	88 0f       	add	r24, r24
     5f6:	99 1f       	adc	r25, r25
     5f8:	2a 95       	dec	r18
     5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
     5fc:	98 2f       	mov	r25, r24
     5fe:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <ir_tmp_address_l>
     602:	89 2b       	or	r24, r25
     604:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <ir_tmp_address_l>
						#else
							ir_tmp_address |= (1<<ir_bitctr++);
						#endif
						TCNT0 = 0; // Reset counter
     608:	86 e4       	ldi	r24, 0x46	; 70
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	fc 01       	movw	r30, r24
     60e:	10 82       	st	Z, r1
						if (ir_bitctr >= 8) {
     610:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <ir_bitctr>
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	98 30       	cpi	r25, 0x08	; 8
     618:	08 f4       	brcc	.+2      	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	88 23       	and	r24, r24
     61e:	09 f4       	brne	.+2      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
     620:	10 c2       	rjmp	.+1056   	; 0xa42 <__LOCK_REGION_LENGTH__+0x642>
							ir_state = IR_ADDRESS_INV; // Next state
     622:	83 e0       	ldi	r24, 0x03	; 3
     624:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
							ir_bitctr = 0; // Reset bit counter
     628:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <ir_bitctr>
						}
						break;
     62c:	0a c2       	rjmp	.+1044   	; 0xa42 <__LOCK_REGION_LENGTH__+0x642>
					}
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;                
     62e:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__data_end>
				break;  
     632:	14 c2       	rjmp	.+1064   	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
			}
			break;   
 
		case IR_ADDRESS_INV:
			if (port_state) {
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	88 23       	and	r24, r24
     638:	a9 f0       	breq	.+42     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
				// Must be short pulse
				if ((cnt_state > TIME_PULSE_MIN) && (cnt_state < TIME_PULSE_MAX)) {    
     63a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     63e:	83 30       	cpi	r24, 0x03	; 3
     640:	30 f0       	brcs	.+12     	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
     642:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     646:	87 30       	cpi	r24, 0x07	; 7
     648:	10 f4       	brcc	.+4      	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	01 c0       	rjmp	.+2      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	88 23       	and	r24, r24
     652:	29 f0       	breq	.+10     	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
					TCNT0 = 0; // Reset counter
     654:	86 e4       	ldi	r24, 0x46	; 70
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	fc 01       	movw	r30, r24
     65a:	10 82       	st	Z, r1
					break;        
     65c:	ff c1       	rjmp	.+1022   	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;
     65e:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__data_end>
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;              
				break; 
			}
			break;
     662:	fc c1       	rjmp	.+1016   	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
					break;        
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;
			} else {
				if ((cnt_state > TIME_ZERO_MIN) && (cnt_state < TIME_ZERO_MAX)) {
     664:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     668:	83 30       	cpi	r24, 0x03	; 3
     66a:	30 f0       	brcs	.+12     	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
     66c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     670:	87 30       	cpi	r24, 0x07	; 7
     672:	10 f4       	brcc	.+4      	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	01 c0       	rjmp	.+2      	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	88 23       	and	r24, r24
     67c:	51 f1       	breq	.+84     	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
					// 0 (inverted) or high address
					#ifdef PROTOCOL_NEC_EXTENDED
						ir_tmp_address_h &= ~(1<<ir_bitctr++);
     67e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <ir_bitctr>
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	98 0f       	add	r25, r24
     686:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <ir_bitctr>
     68a:	28 2f       	mov	r18, r24
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	02 c0       	rjmp	.+4      	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
     694:	88 0f       	add	r24, r24
     696:	99 1f       	adc	r25, r25
     698:	2a 95       	dec	r18
     69a:	e2 f7       	brpl	.-8      	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
     69c:	80 95       	com	r24
     69e:	90 95       	com	r25
     6a0:	98 2f       	mov	r25, r24
     6a2:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <ir_tmp_address_h>
     6a6:	89 23       	and	r24, r25
     6a8:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <ir_tmp_address_h>
							// Should not happen, must be invalid. Reset.
							ir_state = IR_BURST;
							break;
						}
					#endif 
					TCNT0 = 0; // Reset counter
     6ac:	86 e4       	ldi	r24, 0x46	; 70
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	fc 01       	movw	r30, r24
     6b2:	10 82       	st	Z, r1
					if (ir_bitctr >= 8) {
     6b4:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <ir_bitctr>
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	98 30       	cpi	r25, 0x08	; 8
     6bc:	08 f4       	brcc	.+2      	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	88 23       	and	r24, r24
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
     6c4:	c0 c1       	rjmp	.+896    	; 0xa46 <__LOCK_REGION_LENGTH__+0x646>
						ir_state = IR_COMMAND; // Next state
     6c6:	84 e0       	ldi	r24, 0x04	; 4
     6c8:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
						ir_bitctr = 0; // Reset bit counter
     6cc:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <ir_bitctr>
					}
					break;
     6d0:	ba c1       	rjmp	.+884    	; 0xa46 <__LOCK_REGION_LENGTH__+0x646>
				} else {
					if ((cnt_state > TIME_ONE_MIN) && (cnt_state < TIME_ONE_MAX)) {
     6d2:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     6d6:	8a 30       	cpi	r24, 0x0A	; 10
     6d8:	30 f0       	brcs	.+12     	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
     6da:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     6de:	83 31       	cpi	r24, 0x13	; 19
     6e0:	10 f4       	brcc	.+4      	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	01 c0       	rjmp	.+2      	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	88 23       	and	r24, r24
     6ea:	41 f1       	breq	.+80     	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
						// 1 (inverted) or high address
						#ifdef PROTOCOL_NEC_EXTENDED
							ir_tmp_address_h |= (1<<ir_bitctr++);
     6ec:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <ir_bitctr>
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	98 0f       	add	r25, r24
     6f4:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <ir_bitctr>
     6f8:	28 2f       	mov	r18, r24
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	02 c0       	rjmp	.+4      	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	2a 95       	dec	r18
     708:	e2 f7       	brpl	.-8      	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
     70a:	98 2f       	mov	r25, r24
     70c:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <ir_tmp_address_h>
     710:	89 2b       	or	r24, r25
     712:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <ir_tmp_address_h>
								// Should not happen, must be invalid. Reset.
								ir_state = IR_BURST;
								break;
							}
						#endif
						TCNT0 = 0; // Reset counter
     716:	86 e4       	ldi	r24, 0x46	; 70
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	fc 01       	movw	r30, r24
     71c:	10 82       	st	Z, r1
						if (ir_bitctr >= 8) {
     71e:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <ir_bitctr>
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	98 30       	cpi	r25, 0x08	; 8
     726:	08 f4       	brcc	.+2      	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	88 23       	and	r24, r24
     72c:	09 f4       	brne	.+2      	; 0x730 <__LOCK_REGION_LENGTH__+0x330>
     72e:	8d c1       	rjmp	.+794    	; 0xa4a <__LOCK_REGION_LENGTH__+0x64a>
							ir_state = IR_COMMAND; // Next state
     730:	84 e0       	ldi	r24, 0x04	; 4
     732:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
							ir_bitctr = 0; // Reset bit counter
     736:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <ir_bitctr>
						} 
						break;
     73a:	87 c1       	rjmp	.+782    	; 0xa4a <__LOCK_REGION_LENGTH__+0x64a>
					}
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;              
     73c:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__data_end>
				break; 
     740:	8d c1       	rjmp	.+794    	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
			}
			break;
     
		case IR_COMMAND:
			if (port_state) {
     742:	89 81       	ldd	r24, Y+1	; 0x01
     744:	88 23       	and	r24, r24
     746:	a9 f0       	breq	.+42     	; 0x772 <__LOCK_REGION_LENGTH__+0x372>
				// Must be short pulse
				if ((cnt_state > TIME_PULSE_MIN) && (cnt_state < TIME_PULSE_MAX)) {    
     748:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     74c:	83 30       	cpi	r24, 0x03	; 3
     74e:	30 f0       	brcs	.+12     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
     750:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     754:	87 30       	cpi	r24, 0x07	; 7
     756:	10 f4       	brcc	.+4      	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	01 c0       	rjmp	.+2      	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	88 23       	and	r24, r24
     760:	29 f0       	breq	.+10     	; 0x76c <__LOCK_REGION_LENGTH__+0x36c>
					TCNT0 = 0; // Reset counter
     762:	86 e4       	ldi	r24, 0x46	; 70
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	fc 01       	movw	r30, r24
     768:	10 82       	st	Z, r1
					break;        
     76a:	78 c1       	rjmp	.+752    	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;
     76c:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__data_end>
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;                
				break;  
			}
			break;
     770:	75 c1       	rjmp	.+746    	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
					break;        
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;
			} else {
				if ((cnt_state > TIME_ZERO_MIN) && (cnt_state < TIME_ZERO_MAX)) {
     772:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     776:	83 30       	cpi	r24, 0x03	; 3
     778:	30 f0       	brcs	.+12     	; 0x786 <__LOCK_REGION_LENGTH__+0x386>
     77a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     77e:	87 30       	cpi	r24, 0x07	; 7
     780:	10 f4       	brcc	.+4      	; 0x786 <__LOCK_REGION_LENGTH__+0x386>
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	01 c0       	rjmp	.+2      	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	88 23       	and	r24, r24
     78a:	51 f1       	breq	.+84     	; 0x7e0 <__LOCK_REGION_LENGTH__+0x3e0>
					// 0
					ir_tmp_command &= ~(1<<ir_bitctr++);
     78c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <ir_bitctr>
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	98 0f       	add	r25, r24
     794:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <ir_bitctr>
     798:	28 2f       	mov	r18, r24
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <__LOCK_REGION_LENGTH__+0x3a6>
     7a2:	88 0f       	add	r24, r24
     7a4:	99 1f       	adc	r25, r25
     7a6:	2a 95       	dec	r18
     7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <__LOCK_REGION_LENGTH__+0x3a2>
     7aa:	80 95       	com	r24
     7ac:	90 95       	com	r25
     7ae:	98 2f       	mov	r25, r24
     7b0:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <ir_tmp_command>
     7b4:	89 23       	and	r24, r25
     7b6:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <ir_tmp_command>
					TCNT0 = 0; // Reset counter
     7ba:	86 e4       	ldi	r24, 0x46	; 70
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	fc 01       	movw	r30, r24
     7c0:	10 82       	st	Z, r1
					if(ir_bitctr >= 8) {
     7c2:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <ir_bitctr>
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	98 30       	cpi	r25, 0x08	; 8
     7ca:	08 f4       	brcc	.+2      	; 0x7ce <__LOCK_REGION_LENGTH__+0x3ce>
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	88 23       	and	r24, r24
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <__LOCK_REGION_LENGTH__+0x3d4>
     7d2:	3d c1       	rjmp	.+634    	; 0xa4e <__LOCK_REGION_LENGTH__+0x64e>
						ir_state = IR_COMMAND_INV; // Next state
     7d4:	85 e0       	ldi	r24, 0x05	; 5
     7d6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
						ir_bitctr = 0; // Reset bit counter
     7da:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <ir_bitctr>
					}
					break;
     7de:	37 c1       	rjmp	.+622    	; 0xa4e <__LOCK_REGION_LENGTH__+0x64e>
				} else {
					if((cnt_state > TIME_ONE_MIN) && (cnt_state < TIME_ONE_MAX)) {
     7e0:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     7e4:	8a 30       	cpi	r24, 0x0A	; 10
     7e6:	30 f0       	brcs	.+12     	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>
     7e8:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     7ec:	83 31       	cpi	r24, 0x13	; 19
     7ee:	10 f4       	brcc	.+4      	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <__LOCK_REGION_LENGTH__+0x3f6>
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	88 23       	and	r24, r24
     7f8:	41 f1       	breq	.+80     	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
						// 1
						ir_tmp_command |= (1<<ir_bitctr++);
     7fa:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <ir_bitctr>
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	98 0f       	add	r25, r24
     802:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <ir_bitctr>
     806:	28 2f       	mov	r18, r24
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	02 c0       	rjmp	.+4      	; 0x814 <__LOCK_REGION_LENGTH__+0x414>
     810:	88 0f       	add	r24, r24
     812:	99 1f       	adc	r25, r25
     814:	2a 95       	dec	r18
     816:	e2 f7       	brpl	.-8      	; 0x810 <__LOCK_REGION_LENGTH__+0x410>
     818:	98 2f       	mov	r25, r24
     81a:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <ir_tmp_command>
     81e:	89 2b       	or	r24, r25
     820:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <ir_tmp_command>
						TCNT0 = 0; // Reset counter
     824:	86 e4       	ldi	r24, 0x46	; 70
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	fc 01       	movw	r30, r24
     82a:	10 82       	st	Z, r1
						if (ir_bitctr >= 8) {
     82c:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <ir_bitctr>
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	98 30       	cpi	r25, 0x08	; 8
     834:	08 f4       	brcc	.+2      	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	88 23       	and	r24, r24
     83a:	09 f4       	brne	.+2      	; 0x83e <__LOCK_REGION_LENGTH__+0x43e>
     83c:	0a c1       	rjmp	.+532    	; 0xa52 <__LOCK_REGION_LENGTH__+0x652>
							ir_state = IR_COMMAND_INV; // Next state
     83e:	85 e0       	ldi	r24, 0x05	; 5
     840:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
							ir_bitctr = 0; // Reset bit counter
     844:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <ir_bitctr>
						}
						break;
     848:	04 c1       	rjmp	.+520    	; 0xa52 <__LOCK_REGION_LENGTH__+0x652>
					}
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;                
     84a:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__data_end>
				break;  
     84e:	06 c1       	rjmp	.+524    	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
			}
			break;
	  
		case IR_COMMAND_INV:
			if (port_state) {
     850:	89 81       	ldd	r24, Y+1	; 0x01
     852:	88 23       	and	r24, r24
     854:	a9 f0       	breq	.+42     	; 0x880 <__LOCK_REGION_LENGTH__+0x480>
				// Must be short pulse
				if ((cnt_state > TIME_PULSE_MIN) && (cnt_state < TIME_PULSE_MAX)) {    
     856:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     85a:	83 30       	cpi	r24, 0x03	; 3
     85c:	30 f0       	brcs	.+12     	; 0x86a <__LOCK_REGION_LENGTH__+0x46a>
     85e:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     862:	87 30       	cpi	r24, 0x07	; 7
     864:	10 f4       	brcc	.+4      	; 0x86a <__LOCK_REGION_LENGTH__+0x46a>
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	01 c0       	rjmp	.+2      	; 0x86c <__LOCK_REGION_LENGTH__+0x46c>
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	88 23       	and	r24, r24
     86e:	29 f0       	breq	.+10     	; 0x87a <__LOCK_REGION_LENGTH__+0x47a>
					TCNT0 = 0; // Reset counter
     870:	86 e4       	ldi	r24, 0x46	; 70
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	fc 01       	movw	r30, r24
     876:	10 82       	st	Z, r1
					break;        
     878:	f1 c0       	rjmp	.+482    	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;
     87a:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__data_end>
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;                
				break; 
			}    
			break;
     87e:	ee c0       	rjmp	.+476    	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
					break;        
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;
			} else {
				if ((cnt_state > TIME_ZERO_MIN) && (cnt_state < TIME_ZERO_MAX)) {
     880:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     884:	83 30       	cpi	r24, 0x03	; 3
     886:	30 f0       	brcs	.+12     	; 0x894 <__LOCK_REGION_LENGTH__+0x494>
     888:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     88c:	87 30       	cpi	r24, 0x07	; 7
     88e:	10 f4       	brcc	.+4      	; 0x894 <__LOCK_REGION_LENGTH__+0x494>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	01 c0       	rjmp	.+2      	; 0x896 <__LOCK_REGION_LENGTH__+0x496>
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	88 23       	and	r24, r24
     898:	09 f4       	brne	.+2      	; 0x89c <__LOCK_REGION_LENGTH__+0x49c>
     89a:	60 c0       	rjmp	.+192    	; 0x95c <__LOCK_REGION_LENGTH__+0x55c>
					// 0 (inverted)
					#ifdef PROTOCOL_APPLE_EXTENDED
						ir_tmp_id &= ~(1<<ir_bitctr++);
     89c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <ir_bitctr>
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	98 0f       	add	r25, r24
     8a4:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <ir_bitctr>
     8a8:	28 2f       	mov	r18, r24
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <__LOCK_REGION_LENGTH__+0x4b6>
     8b2:	88 0f       	add	r24, r24
     8b4:	99 1f       	adc	r25, r25
     8b6:	2a 95       	dec	r18
     8b8:	e2 f7       	brpl	.-8      	; 0x8b2 <__LOCK_REGION_LENGTH__+0x4b2>
     8ba:	80 95       	com	r24
     8bc:	90 95       	com	r25
     8be:	98 2f       	mov	r25, r24
     8c0:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <ir_tmp_id>
     8c4:	89 23       	and	r24, r25
     8c6:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <ir_tmp_id>
							// Should not happen, must be invalid. Reset.
							ir_state = IR_BURST;
							break;
						}
					#endif
					TCNT0 = 0; // Reset counter
     8ca:	86 e4       	ldi	r24, 0x46	; 70
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	fc 01       	movw	r30, r24
     8d0:	10 82       	st	Z, r1
					if (ir_bitctr >= 8) {
     8d2:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <ir_bitctr>
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	98 30       	cpi	r25, 0x08	; 8
     8da:	08 f4       	brcc	.+2      	; 0x8de <__LOCK_REGION_LENGTH__+0x4de>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	88 23       	and	r24, r24
     8e0:	09 f4       	brne	.+2      	; 0x8e4 <__LOCK_REGION_LENGTH__+0x4e4>
     8e2:	b9 c0       	rjmp	.+370    	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
						ir_state = IR_BURST; // Decoding finished.
     8e4:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__data_end>
						// Only apply if received flag is not set, must be done
						// by the main program after reading address and command
						if(!(this->status & (1<<IR_RECEIVED))) {
     8e8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ea:	9b 81       	ldd	r25, Y+3	; 0x03
     8ec:	fc 01       	movw	r30, r24
     8ee:	80 81       	ld	r24, Z
     8f0:	88 2f       	mov	r24, r24
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	81 70       	andi	r24, 0x01	; 1
     8f6:	99 27       	eor	r25, r25
     8f8:	89 2b       	or	r24, r25
     8fa:	69 f5       	brne	.+90     	; 0x956 <__LOCK_REGION_LENGTH__+0x556>
							#ifdef PROTOCOL_NEC_EXTENDED
								this->address_l = ir_tmp_address_l;
     8fc:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <ir_tmp_address_l>
     900:	8a 81       	ldd	r24, Y+2	; 0x02
     902:	9b 81       	ldd	r25, Y+3	; 0x03
     904:	fc 01       	movw	r30, r24
     906:	21 83       	std	Z+1, r18	; 0x01
								this->address_h = ir_tmp_address_h;
     908:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <ir_tmp_address_h>
     90c:	8a 81       	ldd	r24, Y+2	; 0x02
     90e:	9b 81       	ldd	r25, Y+3	; 0x03
     910:	fc 01       	movw	r30, r24
     912:	22 83       	std	Z+2, r18	; 0x02
							#else
								ir.address = ir_tmp_address;
							#endif
    						#ifdef PROTOCOL_APPLE_EXTENDED
								this->id = ir_tmp_id;
     914:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <ir_tmp_id>
     918:	8a 81       	ldd	r24, Y+2	; 0x02
     91a:	9b 81       	ldd	r25, Y+3	; 0x03
     91c:	fc 01       	movw	r30, r24
     91e:	23 83       	std	Z+3, r18	; 0x03
								// According to https://hifiduino.wordpress.com/apple-aluminum-remote/
								// LSB is a parity check so let's shift it out!
								ir_tmp_command = ir_tmp_command >> 1;
     920:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <ir_tmp_command>
     924:	88 2f       	mov	r24, r24
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	95 95       	asr	r25
     92a:	87 95       	ror	r24
     92c:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <ir_tmp_command>
							#endif
							this->command = ir_tmp_command;
     930:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <ir_tmp_command>
     934:	8a 81       	ldd	r24, Y+2	; 0x02
     936:	9b 81       	ldd	r25, Y+3	; 0x03
     938:	fc 01       	movw	r30, r24
     93a:	24 83       	std	Z+4, r18	; 0x04
							this->status |= (1<<IR_RECEIVED) | (1<<IR_SIGVALID);
     93c:	8a 81       	ldd	r24, Y+2	; 0x02
     93e:	9b 81       	ldd	r25, Y+3	; 0x03
     940:	fc 01       	movw	r30, r24
     942:	80 81       	ld	r24, Z
     944:	28 2f       	mov	r18, r24
     946:	25 60       	ori	r18, 0x05	; 5
     948:	8a 81       	ldd	r24, Y+2	; 0x02
     94a:	9b 81       	ldd	r25, Y+3	; 0x03
     94c:	fc 01       	movw	r30, r24
     94e:	20 83       	st	Z, r18
							ir_tmp_keyhold = IR_HOLD_OVF; // To make sure that valid flag is cleared
     950:	85 e0       	ldi	r24, 0x05	; 5
     952:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <ir_tmp_keyhold>
							// Don't go to sleep.
							//sleep_reset();
						}
						ir_bitctr = 0; // Reset bit counter
     956:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <ir_bitctr>
					}
					break;
     95a:	7d c0       	rjmp	.+250    	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
				} else {
					if ((cnt_state > TIME_ONE_MIN) && (cnt_state < TIME_ONE_MAX)) {
     95c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     960:	8a 30       	cpi	r24, 0x0A	; 10
     962:	30 f0       	brcs	.+12     	; 0x970 <__LOCK_REGION_LENGTH__+0x570>
     964:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cnt_state>
     968:	83 31       	cpi	r24, 0x13	; 19
     96a:	10 f4       	brcc	.+4      	; 0x970 <__LOCK_REGION_LENGTH__+0x570>
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	01 c0       	rjmp	.+2      	; 0x972 <__LOCK_REGION_LENGTH__+0x572>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	88 23       	and	r24, r24
     974:	09 f4       	brne	.+2      	; 0x978 <__LOCK_REGION_LENGTH__+0x578>
     976:	5e c0       	rjmp	.+188    	; 0xa34 <__LOCK_REGION_LENGTH__+0x634>
						// 1 (inverted)
						#ifdef PROTOCOL_APPLE_EXTENDED
							ir_tmp_id |= (1<<ir_bitctr++);
     978:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <ir_bitctr>
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	98 0f       	add	r25, r24
     980:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <ir_bitctr>
     984:	28 2f       	mov	r18, r24
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	02 c0       	rjmp	.+4      	; 0x992 <__LOCK_REGION_LENGTH__+0x592>
     98e:	88 0f       	add	r24, r24
     990:	99 1f       	adc	r25, r25
     992:	2a 95       	dec	r18
     994:	e2 f7       	brpl	.-8      	; 0x98e <__LOCK_REGION_LENGTH__+0x58e>
     996:	98 2f       	mov	r25, r24
     998:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <ir_tmp_id>
     99c:	89 2b       	or	r24, r25
     99e:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <ir_tmp_id>
								// Should not happen, must be invalid. Reset.
								ir_state = IR_BURST;
								break;
							}
						#endif
						TCNT0 = 0; // Reset counter
     9a2:	86 e4       	ldi	r24, 0x46	; 70
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	fc 01       	movw	r30, r24
     9a8:	10 82       	st	Z, r1
						if (ir_bitctr >= 8) {
     9aa:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <ir_bitctr>
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	98 30       	cpi	r25, 0x08	; 8
     9b2:	08 f4       	brcc	.+2      	; 0x9b6 <__LOCK_REGION_LENGTH__+0x5b6>
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	88 23       	and	r24, r24
     9b8:	09 f4       	brne	.+2      	; 0x9bc <__LOCK_REGION_LENGTH__+0x5bc>
     9ba:	4f c0       	rjmp	.+158    	; 0xa5a <__LOCK_REGION_LENGTH__+0x65a>
							ir_state = IR_BURST; // Decoding finished.
     9bc:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__data_end>
							// Only apply if received flag is not set, must be done
							// by the main program after reading address and command
							if (!(this->status & (1<<IR_RECEIVED))) {
     9c0:	8a 81       	ldd	r24, Y+2	; 0x02
     9c2:	9b 81       	ldd	r25, Y+3	; 0x03
     9c4:	fc 01       	movw	r30, r24
     9c6:	80 81       	ld	r24, Z
     9c8:	88 2f       	mov	r24, r24
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	81 70       	andi	r24, 0x01	; 1
     9ce:	99 27       	eor	r25, r25
     9d0:	89 2b       	or	r24, r25
     9d2:	69 f5       	brne	.+90     	; 0xa2e <__LOCK_REGION_LENGTH__+0x62e>
								#ifdef PROTOCOL_NEC_EXTENDED
									this->address_l = ir_tmp_address_l;
     9d4:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <ir_tmp_address_l>
     9d8:	8a 81       	ldd	r24, Y+2	; 0x02
     9da:	9b 81       	ldd	r25, Y+3	; 0x03
     9dc:	fc 01       	movw	r30, r24
     9de:	21 83       	std	Z+1, r18	; 0x01
									this->address_h = ir_tmp_address_h;
     9e0:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <ir_tmp_address_h>
     9e4:	8a 81       	ldd	r24, Y+2	; 0x02
     9e6:	9b 81       	ldd	r25, Y+3	; 0x03
     9e8:	fc 01       	movw	r30, r24
     9ea:	22 83       	std	Z+2, r18	; 0x02
								#else
									this->address = ir_tmp_address;
								#endif
								#ifdef PROTOCOL_APPLE_EXTENDED
									this->id = ir_tmp_id;
     9ec:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <ir_tmp_id>
     9f0:	8a 81       	ldd	r24, Y+2	; 0x02
     9f2:	9b 81       	ldd	r25, Y+3	; 0x03
     9f4:	fc 01       	movw	r30, r24
     9f6:	23 83       	std	Z+3, r18	; 0x03
									// According to https://hifiduino.wordpress.com/apple-aluminum-remote/ 
									// LSB is a parity check so let's shift it out!
									ir_tmp_command = ir_tmp_command >> 1;
     9f8:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <ir_tmp_command>
     9fc:	88 2f       	mov	r24, r24
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	95 95       	asr	r25
     a02:	87 95       	ror	r24
     a04:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <ir_tmp_command>
								#endif
								this->command = ir_tmp_command;
     a08:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <ir_tmp_command>
     a0c:	8a 81       	ldd	r24, Y+2	; 0x02
     a0e:	9b 81       	ldd	r25, Y+3	; 0x03
     a10:	fc 01       	movw	r30, r24
     a12:	24 83       	std	Z+4, r18	; 0x04
								this->status |= (1<<IR_RECEIVED) | (1<<IR_SIGVALID);
     a14:	8a 81       	ldd	r24, Y+2	; 0x02
     a16:	9b 81       	ldd	r25, Y+3	; 0x03
     a18:	fc 01       	movw	r30, r24
     a1a:	80 81       	ld	r24, Z
     a1c:	28 2f       	mov	r18, r24
     a1e:	25 60       	ori	r18, 0x05	; 5
     a20:	8a 81       	ldd	r24, Y+2	; 0x02
     a22:	9b 81       	ldd	r25, Y+3	; 0x03
     a24:	fc 01       	movw	r30, r24
     a26:	20 83       	st	Z, r18
								ir_tmp_keyhold = IR_HOLD_OVF; // To make sure that valid flag is cleared
     a28:	85 e0       	ldi	r24, 0x05	; 5
     a2a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <ir_tmp_keyhold>
								// Don't go to sleep.
								//sleep_reset();
							}
							ir_bitctr = 0; // Reset bit counter
     a2e:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <ir_bitctr>
						}
						break;
     a32:	13 c0       	rjmp	.+38     	; 0xa5a <__LOCK_REGION_LENGTH__+0x65a>
					}
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;                
     a34:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__data_end>
				break; 
     a38:	11 c0       	rjmp	.+34     	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
				if ((cnt_state > TIME_BURST_MIN) && (cnt_state < TIME_BURST_MAX)) {
					ir_state = IR_GAP; // Next state
					TCNT0 = 0; // Reset counter
				}        
			}
			break;
     a3a:	00 00       	nop
     a3c:	0f c0       	rjmp	.+30     	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
					TCNT0 = 0; // Reset counter
					if (ir_bitctr >= 8) {
						ir_state = IR_ADDRESS_INV; // Next state
						ir_bitctr = 0; // Reset bit counter
					}
					break;
     a3e:	00 00       	nop
     a40:	0d c0       	rjmp	.+26     	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
						TCNT0 = 0; // Reset counter
						if (ir_bitctr >= 8) {
							ir_state = IR_ADDRESS_INV; // Next state
							ir_bitctr = 0; // Reset bit counter
						}
						break;
     a42:	00 00       	nop
     a44:	0b c0       	rjmp	.+22     	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
					TCNT0 = 0; // Reset counter
					if (ir_bitctr >= 8) {
						ir_state = IR_COMMAND; // Next state
						ir_bitctr = 0; // Reset bit counter
					}
					break;
     a46:	00 00       	nop
     a48:	09 c0       	rjmp	.+18     	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
						TCNT0 = 0; // Reset counter
						if (ir_bitctr >= 8) {
							ir_state = IR_COMMAND; // Next state
							ir_bitctr = 0; // Reset bit counter
						} 
						break;
     a4a:	00 00       	nop
     a4c:	07 c0       	rjmp	.+14     	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
					TCNT0 = 0; // Reset counter
					if(ir_bitctr >= 8) {
						ir_state = IR_COMMAND_INV; // Next state
						ir_bitctr = 0; // Reset bit counter
					}
					break;
     a4e:	00 00       	nop
     a50:	05 c0       	rjmp	.+10     	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
						TCNT0 = 0; // Reset counter
						if (ir_bitctr >= 8) {
							ir_state = IR_COMMAND_INV; // Next state
							ir_bitctr = 0; // Reset bit counter
						}
						break;
     a52:	00 00       	nop
     a54:	03 c0       	rjmp	.+6      	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
							// Don't go to sleep.
							//sleep_reset();
						}
						ir_bitctr = 0; // Reset bit counter
					}
					break;
     a56:	00 00       	nop
     a58:	01 c0       	rjmp	.+2      	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
								// Don't go to sleep.
								//sleep_reset();
							}
							ir_bitctr = 0; // Reset bit counter
						}
						break;
     a5a:	00 00       	nop
				ir_state = IR_BURST;                
				break; 
			}    
			break;
    }
 }
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	08 95       	ret

00000a68 <_ZN2IR8overflowEv>:

 //-----------------------------------------------------------------------------

// ###### Timer 0 Overflow for hold flag clear ###### 
// ISR (TIMER0_OVF_vect) {
void IR::overflow(void) {
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	00 d0       	rcall	.+0      	; 0xa6e <_ZN2IR8overflowEv+0x6>
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
     a72:	9a 83       	std	Y+2, r25	; 0x02
     a74:	89 83       	std	Y+1, r24	; 0x01
   ir_tmp_ovf = 1;
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <ir_tmp_ovf>
   if (ir_tmp_keyhold > 0) {
     a7c:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <ir_tmp_keyhold>
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	99 23       	and	r25, r25
     a84:	09 f4       	brne	.+2      	; 0xa88 <_ZN2IR8overflowEv+0x20>
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	88 23       	and	r24, r24
     a8a:	b9 f0       	breq	.+46     	; 0xaba <_ZN2IR8overflowEv+0x52>
     ir_tmp_keyhold--;
     a8c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <ir_tmp_keyhold>
     a90:	81 50       	subi	r24, 0x01	; 1
     a92:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <ir_tmp_keyhold>
     if (ir_tmp_keyhold==0) {
     a96:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <ir_tmp_keyhold>
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	99 23       	and	r25, r25
     a9e:	09 f0       	breq	.+2      	; 0xaa2 <_ZN2IR8overflowEv+0x3a>
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	88 23       	and	r24, r24
     aa4:	51 f0       	breq	.+20     	; 0xaba <_ZN2IR8overflowEv+0x52>
		 this->status &= ~((1<<IR_KEYHOLD) | (1<<IR_SIGVALID));
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
     aa8:	9a 81       	ldd	r25, Y+2	; 0x02
     aaa:	fc 01       	movw	r30, r24
     aac:	80 81       	ld	r24, Z
     aae:	28 2f       	mov	r18, r24
     ab0:	29 7f       	andi	r18, 0xF9	; 249
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
     ab4:	9a 81       	ldd	r25, Y+2	; 0x02
     ab6:	fc 01       	movw	r30, r24
     ab8:	20 83       	st	Z, r18
	 }
   }
 }
     aba:	00 00       	nop
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	08 95       	ret

00000ac6 <_ZN2IR13get_address_lEv>:

 //-----------------------------------------------------------------------------

 #ifdef PROTOCOL_NEC_EXTENDED
 uint8_t IR::get_address_l() {
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	00 d0       	rcall	.+0      	; 0xacc <_ZN2IR13get_address_lEv+0x6>
     acc:	cd b7       	in	r28, 0x3d	; 61
     ace:	de b7       	in	r29, 0x3e	; 62
     ad0:	9a 83       	std	Y+2, r25	; 0x02
     ad2:	89 83       	std	Y+1, r24	; 0x01
	return this->address_l;
     ad4:	89 81       	ldd	r24, Y+1	; 0x01
     ad6:	9a 81       	ldd	r25, Y+2	; 0x02
     ad8:	fc 01       	movw	r30, r24
     ada:	81 81       	ldd	r24, Z+1	; 0x01
 }
     adc:	0f 90       	pop	r0
     ade:	0f 90       	pop	r0
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	08 95       	ret

00000ae6 <_ZN2IR13get_address_hEv>:
 uint8_t IR::get_address_h() {
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	00 d0       	rcall	.+0      	; 0xaec <_ZN2IR13get_address_hEv+0x6>
     aec:	cd b7       	in	r28, 0x3d	; 61
     aee:	de b7       	in	r29, 0x3e	; 62
     af0:	9a 83       	std	Y+2, r25	; 0x02
     af2:	89 83       	std	Y+1, r24	; 0x01
	return this->address_h;
     af4:	89 81       	ldd	r24, Y+1	; 0x01
     af6:	9a 81       	ldd	r25, Y+2	; 0x02
     af8:	fc 01       	movw	r30, r24
     afa:	82 81       	ldd	r24, Z+2	; 0x02
 }
     afc:	0f 90       	pop	r0
     afe:	0f 90       	pop	r0
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	08 95       	ret

00000b06 <_ZN2IR6get_idEv>:
	return address;
 }
 #endif

 #ifdef PROTOCOL_APPLE_EXTENDED
 uint8_t IR::get_id() {
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	00 d0       	rcall	.+0      	; 0xb0c <_ZN2IR6get_idEv+0x6>
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	9a 83       	std	Y+2, r25	; 0x02
     b12:	89 83       	std	Y+1, r24	; 0x01
	return this->id;
     b14:	89 81       	ldd	r24, Y+1	; 0x01
     b16:	9a 81       	ldd	r25, Y+2	; 0x02
     b18:	fc 01       	movw	r30, r24
     b1a:	83 81       	ldd	r24, Z+3	; 0x03
 }
     b1c:	0f 90       	pop	r0
     b1e:	0f 90       	pop	r0
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	08 95       	ret

00000b26 <_ZN2IR11get_commandEv>:
 #endif

 uint8_t IR::get_command() {
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	00 d0       	rcall	.+0      	; 0xb2c <_ZN2IR11get_commandEv+0x6>
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	9a 83       	std	Y+2, r25	; 0x02
     b32:	89 83       	std	Y+1, r24	; 0x01
	return this->command;
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	9a 81       	ldd	r25, Y+2	; 0x02
     b38:	fc 01       	movw	r30, r24
     b3a:	84 81       	ldd	r24, Z+4	; 0x04
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	08 95       	ret

00000b46 <_Z14VolLimits_Initv>:
constexpr uint_fast8_t LIMIT_DOWN	= (1 << PB0);
constexpr uint_fast8_t LIMIT_UP		= (1 << PB1);

//-----------------------------------------------------------------------------

void VolLimits_Init(void) {
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	CLEARBIT(LIMIT_DDR,(LIMIT_UP | LIMIT_DOWN));
     b4e:	84 e2       	ldi	r24, 0x24	; 36
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	24 e2       	ldi	r18, 0x24	; 36
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	f9 01       	movw	r30, r18
     b58:	20 81       	ld	r18, Z
     b5a:	2c 7f       	andi	r18, 0xFC	; 252
     b5c:	fc 01       	movw	r30, r24
     b5e:	20 83       	st	Z, r18

	SETBIT(PCICR,(1 << PCIE1));
     b60:	88 e6       	ldi	r24, 0x68	; 104
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	28 e6       	ldi	r18, 0x68	; 104
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	f9 01       	movw	r30, r18
     b6a:	20 81       	ld	r18, Z
     b6c:	22 60       	ori	r18, 0x02	; 2
     b6e:	fc 01       	movw	r30, r24
     b70:	20 83       	st	Z, r18

	SETBIT(PCMSK0,(LIMIT_UP | LIMIT_DOWN)); 
     b72:	8b e6       	ldi	r24, 0x6B	; 107
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	2b e6       	ldi	r18, 0x6B	; 107
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	f9 01       	movw	r30, r18
     b7c:	20 81       	ld	r18, Z
     b7e:	23 60       	ori	r18, 0x03	; 3
     b80:	fc 01       	movw	r30, r24
     b82:	20 83       	st	Z, r18
}
     b84:	00 00       	nop
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	08 95       	ret

00000b8c <_Z12VolLimits_Upv>:

//-----------------------------------------------------------------------------

bool VolLimits_Up(void) {
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
	return (CHECKBIT(LIMIT_PIN,LIMIT_UP));
     b94:	83 e2       	ldi	r24, 0x23	; 35
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	fc 01       	movw	r30, r24
     b9a:	90 81       	ld	r25, Z
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	98 23       	and	r25, r24
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	99 23       	and	r25, r25
     ba4:	09 f4       	brne	.+2      	; 0xba8 <_Z12VolLimits_Upv+0x1c>
     ba6:	80 e0       	ldi	r24, 0x00	; 0
}
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	08 95       	ret

00000bae <_Z14VolLimits_Downv>:

//-----------------------------------------------------------------------------

bool VolLimits_Down(void) {
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
	return (CHECKBIT(LIMIT_PIN,LIMIT_DOWN));
     bb6:	83 e2       	ldi	r24, 0x23	; 35
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	fc 01       	movw	r30, r24
     bbc:	90 81       	ld	r25, Z
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	98 23       	and	r25, r24
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	99 23       	and	r25, r25
     bc6:	09 f4       	brne	.+2      	; 0xbca <_Z14VolLimits_Downv+0x1c>
     bc8:	80 e0       	ldi	r24, 0x00	; 0
}
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	08 95       	ret

00000bd0 <_Z17OutputRelays_Initv>:
constexpr uint_fast8_t OUTPUT_RELAYS_MUTE	= (1 << PC0);
constexpr uint_fast8_t OUTPUT_RELAYS_HIGH	= (1 << PC1);
constexpr uint_fast8_t OUTPUT_RELAYS_MED	= (1 << PC2);
constexpr uint_fast8_t OUTPUT_RELAYS_LOW	= (1 << PC3);

void OutputRelays_Init(void) {
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
	SETBIT(OUTPUT_RELAYS_DDR,(OUTPUT_RELAYS_MUTE
								| OUTPUT_RELAYS_HIGH
								| OUTPUT_RELAYS_MED
								| OUTPUT_RELAYS_LOW));
     bd8:	87 e2       	ldi	r24, 0x27	; 39
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	27 e2       	ldi	r18, 0x27	; 39
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	f9 01       	movw	r30, r18
     be2:	20 81       	ld	r18, Z
     be4:	2f 60       	ori	r18, 0x0F	; 15
     be6:	fc 01       	movw	r30, r24
     be8:	20 83       	st	Z, r18

	CLEARBIT(OUTPUT_RELAYS_PORT,(OUTPUT_RELAYS_MUTE
								| OUTPUT_RELAYS_HIGH
								| OUTPUT_RELAYS_MED
								| OUTPUT_RELAYS_LOW));
     bea:	88 e2       	ldi	r24, 0x28	; 40
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	28 e2       	ldi	r18, 0x28	; 40
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	f9 01       	movw	r30, r18
     bf4:	20 81       	ld	r18, Z
     bf6:	20 7f       	andi	r18, 0xF0	; 240
     bf8:	fc 01       	movw	r30, r24
     bfa:	20 83       	st	Z, r18
}
     bfc:	00 00       	nop
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	08 95       	ret

00000c04 <_Z17PanelButtons_Initv>:
constexpr uint_fast8_t BUTTON_MED	= (1 << PA2);
constexpr uint_fast8_t BUTTON_LOW	= (1 << PA3);

//-----------------------------------------------------------------------------

void PanelButtons_Init(void) {
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
	CLEARBIT(PANEL_BUTTONS_DDR,(BUTTON_MUTE
								| BUTTON_HIGH
								| BUTTON_MED
								| BUTTON_LOW));
     c0c:	81 e2       	ldi	r24, 0x21	; 33
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	21 e2       	ldi	r18, 0x21	; 33
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	f9 01       	movw	r30, r18
     c16:	20 81       	ld	r18, Z
     c18:	20 7f       	andi	r18, 0xF0	; 240
     c1a:	fc 01       	movw	r30, r24
     c1c:	20 83       	st	Z, r18
	
	SETBIT(PCICR,(1 << PCIE0));
     c1e:	88 e6       	ldi	r24, 0x68	; 104
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	28 e6       	ldi	r18, 0x68	; 104
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	f9 01       	movw	r30, r18
     c28:	20 81       	ld	r18, Z
     c2a:	21 60       	ori	r18, 0x01	; 1
     c2c:	fc 01       	movw	r30, r24
     c2e:	20 83       	st	Z, r18

	SETBIT(PCMSK0,(BUTTON_MUTE
					| BUTTON_HIGH
					| BUTTON_MED
					| BUTTON_LOW));
     c30:	8b e6       	ldi	r24, 0x6B	; 107
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	2b e6       	ldi	r18, 0x6B	; 107
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	f9 01       	movw	r30, r18
     c3a:	20 81       	ld	r18, Z
     c3c:	2f 60       	ori	r18, 0x0F	; 15
     c3e:	fc 01       	movw	r30, r24
     c40:	20 83       	st	Z, r18

	//CLEARBIT(EICRA,((1 << ISC11) | (1 << ISC10)));
	//SETBIT(EIMSK,(1 << INT1));
}
     c42:	00 00       	nop
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	08 95       	ret

00000c4a <_Z14OutputLED_Initv>:
constexpr uint_fast8_t OUTPUT_LED_MUTE	= (1 << PC4);
constexpr uint_fast8_t OUTPUT_LED_HIGH	= (1 << PC5);
constexpr uint_fast8_t OUTPUT_LED_MED	= (1 << PC6);
constexpr uint_fast8_t OUTPUT_LED_LOW	= (1 << PC7);

void OutputLED_Init(void) {
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
	SETBIT(OUTPUT_LED_DDR,(OUTPUT_LED_MUTE
		| OUTPUT_LED_HIGH
		| OUTPUT_LED_MED
		| OUTPUT_LED_LOW));
     c52:	87 e2       	ldi	r24, 0x27	; 39
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	27 e2       	ldi	r18, 0x27	; 39
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	f9 01       	movw	r30, r18
     c5c:	20 81       	ld	r18, Z
     c5e:	20 6f       	ori	r18, 0xF0	; 240
     c60:	fc 01       	movw	r30, r24
     c62:	20 83       	st	Z, r18

	CLEARBIT(OUTPUT_LED_PORT,(OUTPUT_LED_MUTE
		| OUTPUT_LED_MED
		| OUTPUT_LED_LOW));
     c64:	88 e2       	ldi	r24, 0x28	; 40
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	28 e2       	ldi	r18, 0x28	; 40
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	f9 01       	movw	r30, r18
     c6e:	20 81       	ld	r18, Z
     c70:	2f 72       	andi	r18, 0x2F	; 47
     c72:	fc 01       	movw	r30, r24
     c74:	20 83       	st	Z, r18

	SETBIT(OUTPUT_LED_PORT,OUTPUT_LED_HIGH);
     c76:	88 e2       	ldi	r24, 0x28	; 40
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	28 e2       	ldi	r18, 0x28	; 40
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	f9 01       	movw	r30, r18
     c80:	30 81       	ld	r19, Z
     c82:	20 e2       	ldi	r18, 0x20	; 32
     c84:	23 2b       	or	r18, r19
     c86:	fc 01       	movw	r30, r24
     c88:	20 83       	st	Z, r18
}
     c8a:	00 00       	nop
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	08 95       	ret

00000c92 <__vector_1>:
static inline void setLevelMedium();
static inline void setLevelLow();

//-----------------------------------------------------------------------------

ISR (INT0_vect) {
     c92:	1f 92       	push	r1
     c94:	0f 92       	push	r0
     c96:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c9a:	0f 92       	push	r0
     c9c:	11 24       	eor	r1, r1
     c9e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     ca2:	0f 92       	push	r0
     ca4:	2f 93       	push	r18
     ca6:	3f 93       	push	r19
     ca8:	4f 93       	push	r20
     caa:	5f 93       	push	r21
     cac:	6f 93       	push	r22
     cae:	7f 93       	push	r23
     cb0:	8f 93       	push	r24
     cb2:	9f 93       	push	r25
     cb4:	af 93       	push	r26
     cb6:	bf 93       	push	r27
     cb8:	ef 93       	push	r30
     cba:	ff 93       	push	r31
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
	if (powerDown) {
     cc4:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <_ZL9powerDown>
     cc8:	88 23       	and	r24, r24
     cca:	b1 f0       	breq	.+44     	; 0xcf8 <__vector_1+0x66>
		sleep_disable();
     ccc:	83 e5       	ldi	r24, 0x53	; 83
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	23 e5       	ldi	r18, 0x53	; 83
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	f9 01       	movw	r30, r18
     cd6:	20 81       	ld	r18, Z
     cd8:	2e 7f       	andi	r18, 0xFE	; 254
     cda:	fc 01       	movw	r30, r24
     cdc:	20 83       	st	Z, r18
		cli();
     cde:	f8 94       	cli

		// Change interrupt to state change
		SETBIT(EICRA,(1 << ISC00));
     ce0:	89 e6       	ldi	r24, 0x69	; 105
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	29 e6       	ldi	r18, 0x69	; 105
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	f9 01       	movw	r30, r18
     cea:	20 81       	ld	r18, Z
     cec:	21 60       	ori	r18, 0x01	; 1
     cee:	fc 01       	movw	r30, r24
     cf0:	20 83       	st	Z, r18
		powerDown = false;
     cf2:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <_ZL9powerDown>

		sei();
     cf6:	78 94       	sei
	}

	ir.decode();
     cf8:	80 e6       	ldi	r24, 0x60	; 96
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	64 db       	rcall	.-2360   	; 0x3c6 <_ZN2IR6decodeEv>
}
     cfe:	00 00       	nop
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	ff 91       	pop	r31
     d06:	ef 91       	pop	r30
     d08:	bf 91       	pop	r27
     d0a:	af 91       	pop	r26
     d0c:	9f 91       	pop	r25
     d0e:	8f 91       	pop	r24
     d10:	7f 91       	pop	r23
     d12:	6f 91       	pop	r22
     d14:	5f 91       	pop	r21
     d16:	4f 91       	pop	r20
     d18:	3f 91       	pop	r19
     d1a:	2f 91       	pop	r18
     d1c:	0f 90       	pop	r0
     d1e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     d22:	0f 90       	pop	r0
     d24:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d28:	0f 90       	pop	r0
     d2a:	1f 90       	pop	r1
     d2c:	18 95       	reti

00000d2e <__vector_4>:

//-----------------------------------------------------------------------------

ISR (PCINT0_vect) {
     d2e:	1f 92       	push	r1
     d30:	0f 92       	push	r0
     d32:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d36:	0f 92       	push	r0
     d38:	11 24       	eor	r1, r1
     d3a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     d3e:	0f 92       	push	r0
     d40:	2f 93       	push	r18
     d42:	3f 93       	push	r19
     d44:	4f 93       	push	r20
     d46:	5f 93       	push	r21
     d48:	6f 93       	push	r22
     d4a:	7f 93       	push	r23
     d4c:	8f 93       	push	r24
     d4e:	9f 93       	push	r25
     d50:	af 93       	push	r26
     d52:	bf 93       	push	r27
     d54:	ef 93       	push	r30
     d56:	ff 93       	push	r31
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
	if (powerDown) {
     d60:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <_ZL9powerDown>
     d64:	88 23       	and	r24, r24
     d66:	69 f0       	breq	.+26     	; 0xd82 <__vector_4+0x54>
		sleep_disable();
     d68:	83 e5       	ldi	r24, 0x53	; 83
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	23 e5       	ldi	r18, 0x53	; 83
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	f9 01       	movw	r30, r18
     d72:	20 81       	ld	r18, Z
     d74:	2e 7f       	andi	r18, 0xFE	; 254
     d76:	fc 01       	movw	r30, r24
     d78:	20 83       	st	Z, r18
		cli();
     d7a:	f8 94       	cli

		powerDown = false;
     d7c:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <_ZL9powerDown>

		sei();
     d80:	78 94       	sei
	}

	decodeButton();
     d82:	0e 94 4f 13 	call	0x269e	; 0x269e <_ZL12decodeButtonv>
}
     d86:	00 00       	nop
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	ff 91       	pop	r31
     d8e:	ef 91       	pop	r30
     d90:	bf 91       	pop	r27
     d92:	af 91       	pop	r26
     d94:	9f 91       	pop	r25
     d96:	8f 91       	pop	r24
     d98:	7f 91       	pop	r23
     d9a:	6f 91       	pop	r22
     d9c:	5f 91       	pop	r21
     d9e:	4f 91       	pop	r20
     da0:	3f 91       	pop	r19
     da2:	2f 91       	pop	r18
     da4:	0f 90       	pop	r0
     da6:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     daa:	0f 90       	pop	r0
     dac:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     db0:	0f 90       	pop	r0
     db2:	1f 90       	pop	r1
     db4:	18 95       	reti

00000db6 <__vector_5>:

//-----------------------------------------------------------------------------

ISR (PCINT1_vect) {
     db6:	1f 92       	push	r1
     db8:	0f 92       	push	r0
     dba:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     dbe:	0f 92       	push	r0
     dc0:	11 24       	eor	r1, r1
     dc2:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     dc6:	0f 92       	push	r0
     dc8:	2f 93       	push	r18
     dca:	3f 93       	push	r19
     dcc:	4f 93       	push	r20
     dce:	5f 93       	push	r21
     dd0:	6f 93       	push	r22
     dd2:	7f 93       	push	r23
     dd4:	8f 93       	push	r24
     dd6:	9f 93       	push	r25
     dd8:	af 93       	push	r26
     dda:	bf 93       	push	r27
     ddc:	ef 93       	push	r30
     dde:	ff 93       	push	r31
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
	if (powerDown) {
     de8:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <_ZL9powerDown>
     dec:	88 23       	and	r24, r24
     dee:	69 f0       	breq	.+26     	; 0xe0a <__vector_5+0x54>
		sleep_disable();
     df0:	83 e5       	ldi	r24, 0x53	; 83
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	23 e5       	ldi	r18, 0x53	; 83
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	f9 01       	movw	r30, r18
     dfa:	20 81       	ld	r18, Z
     dfc:	2e 7f       	andi	r18, 0xFE	; 254
     dfe:	fc 01       	movw	r30, r24
     e00:	20 83       	st	Z, r18
		cli();
     e02:	f8 94       	cli

		powerDown = false;
     e04:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <_ZL9powerDown>

		sei();
     e08:	78 94       	sei
	}

	decodeKnob();
     e0a:	0e 94 2c 14 	call	0x2858	; 0x2858 <_ZL10decodeKnobv>
}
     e0e:	00 00       	nop
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	ff 91       	pop	r31
     e16:	ef 91       	pop	r30
     e18:	bf 91       	pop	r27
     e1a:	af 91       	pop	r26
     e1c:	9f 91       	pop	r25
     e1e:	8f 91       	pop	r24
     e20:	7f 91       	pop	r23
     e22:	6f 91       	pop	r22
     e24:	5f 91       	pop	r21
     e26:	4f 91       	pop	r20
     e28:	3f 91       	pop	r19
     e2a:	2f 91       	pop	r18
     e2c:	0f 90       	pop	r0
     e2e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     e32:	0f 90       	pop	r0
     e34:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e38:	0f 90       	pop	r0
     e3a:	1f 90       	pop	r1
     e3c:	18 95       	reti

00000e3e <__vector_18>:

//-----------------------------------------------------------------------------

ISR (TIMER0_OVF_vect) {
     e3e:	1f 92       	push	r1
     e40:	0f 92       	push	r0
     e42:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e46:	0f 92       	push	r0
     e48:	11 24       	eor	r1, r1
     e4a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     e4e:	0f 92       	push	r0
     e50:	2f 93       	push	r18
     e52:	3f 93       	push	r19
     e54:	4f 93       	push	r20
     e56:	5f 93       	push	r21
     e58:	6f 93       	push	r22
     e5a:	7f 93       	push	r23
     e5c:	8f 93       	push	r24
     e5e:	9f 93       	push	r25
     e60:	af 93       	push	r26
     e62:	bf 93       	push	r27
     e64:	ef 93       	push	r30
     e66:	ff 93       	push	r31
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	ir.overflow();
     e70:	80 e6       	ldi	r24, 0x60	; 96
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	f9 dd       	rcall	.-1038   	; 0xa68 <_ZN2IR8overflowEv>
}
     e76:	00 00       	nop
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	ff 91       	pop	r31
     e7e:	ef 91       	pop	r30
     e80:	bf 91       	pop	r27
     e82:	af 91       	pop	r26
     e84:	9f 91       	pop	r25
     e86:	8f 91       	pop	r24
     e88:	7f 91       	pop	r23
     e8a:	6f 91       	pop	r22
     e8c:	5f 91       	pop	r21
     e8e:	4f 91       	pop	r20
     e90:	3f 91       	pop	r19
     e92:	2f 91       	pop	r18
     e94:	0f 90       	pop	r0
     e96:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     e9a:	0f 90       	pop	r0
     e9c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ea0:	0f 90       	pop	r0
     ea2:	1f 90       	pop	r1
     ea4:	18 95       	reti

00000ea6 <main>:

//-----------------------------------------------------------------------------

int main(void)
{
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	00 d0       	rcall	.+0      	; 0xeac <main+0x6>
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
	uint8_t paired_id = 0;
	uint8_t last_level = 0;

	VolLimits_Init();
     eb0:	19 82       	std	Y+1, r1	; 0x01
	OutputRelays_Init();
     eb2:	1a 82       	std	Y+2, r1	; 0x02
     eb4:	48 de       	rcall	.-880    	; 0xb46 <_Z14VolLimits_Initv>
	OutputLED_Init();
     eb6:	8c de       	rcall	.-744    	; 0xbd0 <_Z17OutputRelays_Initv>
     eb8:	c8 de       	rcall	.-624    	; 0xc4a <_Z14OutputLED_Initv>
	PanelButtons_Init();
     eba:	a4 de       	rcall	.-696    	; 0xc04 <_Z17PanelButtons_Initv>
     ebc:	60 e0       	ldi	r22, 0x00	; 0

	paired_id = eeprom.read(PAIR_ADDR);
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	8e e8       	ldi	r24, 0x8E	; 142
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	0e 94 aa 19 	call	0x3354	; 0x3354 <_ZN6EEPROM4readEj>
     ec8:	89 83       	std	Y+1, r24	; 0x01
     eca:	61 e0       	ldi	r22, 0x01	; 1
	last_level = eeprom.read(LEVEL_ADDR);
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	8e e8       	ldi	r24, 0x8E	; 142
     ed0:	91 e0       	ldi	r25, 0x01	; 1
     ed2:	0e 94 aa 19 	call	0x3354	; 0x3354 <_ZN6EEPROM4readEj>
     ed6:	8a 83       	std	Y+2, r24	; 0x02
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
	
	switch (last_level) {
     eda:	88 2f       	mov	r24, r24
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	80 34       	cpi	r24, 0x40	; 64
     ee0:	91 05       	cpc	r25, r1
     ee2:	41 f0       	breq	.+16     	; 0xef4 <main+0x4e>
     ee4:	80 38       	cpi	r24, 0x80	; 128
     ee6:	91 05       	cpc	r25, r1
     ee8:	41 f0       	breq	.+16     	; 0xefa <main+0x54>
     eea:	80 97       	sbiw	r24, 0x20	; 32
     eec:	49 f4       	brne	.+18     	; 0xf00 <main+0x5a>
     eee:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <_ZL12setLevelHighv>
		case OUTPUT_LED_HIGH: {									// Switch to medium
			setLevelHigh();
     ef2:	09 c0       	rjmp	.+18     	; 0xf06 <main+0x60>

			break;
     ef4:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <_ZL14setLevelMediumv>
		}

		case OUTPUT_LED_MED: {									// Switch to low
			setLevelMedium();
     ef8:	06 c0       	rjmp	.+12     	; 0xf06 <main+0x60>

			break;
     efa:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <_ZL11setLevelLowv>
		}

		case OUTPUT_LED_LOW: {									// Switch to high
			setLevelLow();
     efe:	03 c0       	rjmp	.+6      	; 0xf06 <main+0x60>
			
			break;
     f00:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <_ZL11setLevelLowv>
		}

		default: {
			setLevelLow();
     f04:	00 00       	nop
			
			break;
     f06:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <ir>
		}
	}

	while (1) {
		if (CHECKBIT(ir.status,(1 << IR_RECEIVED))) {
     f0a:	88 2f       	mov	r24, r24
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	81 70       	andi	r24, 0x01	; 1
     f10:	99 27       	eor	r25, r25
     f12:	89 2b       	or	r24, r25
     f14:	41 f1       	breq	.+80     	; 0xf66 <main+0xc0>
			cli();
     f16:	f8 94       	cli
			//CLEARBIT(REMOTE_PORT,REMOTE_LED);

			if (ir.get_address_l() == 0xEE /*238*/ && ir.get_address_h() == 0x87 /*135*/) {
     f18:	80 e6       	ldi	r24, 0x60	; 96
     f1a:	91 e0       	ldi	r25, 0x01	; 1
     f1c:	d4 dd       	rcall	.-1112   	; 0xac6 <_ZN2IR13get_address_lEv>
     f1e:	8e 3e       	cpi	r24, 0xEE	; 238
     f20:	39 f4       	brne	.+14     	; 0xf30 <main+0x8a>
     f22:	80 e6       	ldi	r24, 0x60	; 96
     f24:	91 e0       	ldi	r25, 0x01	; 1
     f26:	df dd       	rcall	.-1090   	; 0xae6 <_ZN2IR13get_address_hEv>
     f28:	87 38       	cpi	r24, 0x87	; 135
     f2a:	11 f4       	brne	.+4      	; 0xf30 <main+0x8a>
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	01 c0       	rjmp	.+2      	; 0xf32 <main+0x8c>
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	88 23       	and	r24, r24
     f34:	91 f0       	breq	.+36     	; 0xf5a <main+0xb4>
				if (paired_id == ir.get_id()) {
     f36:	80 e6       	ldi	r24, 0x60	; 96
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	e5 dd       	rcall	.-1078   	; 0xb06 <_ZN2IR6get_idEv>
     f3c:	28 2f       	mov	r18, r24
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	99 81       	ldd	r25, Y+1	; 0x01
     f42:	29 17       	cp	r18, r25
     f44:	09 f0       	breq	.+2      	; 0xf48 <main+0xa2>
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	88 23       	and	r24, r24
					fifo.put(ir.get_command());
     f4a:	39 f0       	breq	.+14     	; 0xf5a <main+0xb4>
     f4c:	80 e6       	ldi	r24, 0x60	; 96
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	ea dd       	rcall	.-1068   	; 0xb26 <_ZN2IR11get_commandEv>
     f52:	68 2f       	mov	r22, r24
     f54:	8b e7       	ldi	r24, 0x7B	; 123
     f56:	91 e0       	ldi	r25, 0x01	; 1
     f58:	0c d9       	rcall	.-3560   	; 0x172 <_ZN4Fifo3putEh>
     f5a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <ir>
				}
			
			}

			// Reset state
			CLEARBIT(ir.status,(1 << IR_RECEIVED));
     f5e:	8e 7f       	andi	r24, 0xFE	; 254
     f60:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <ir>
     f64:	22 c0       	rjmp	.+68     	; 0xfaa <main+0x104>
     f66:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <ir>
		} else if (CHECKBIT(ir.status,(1 << IR_KEYHOLD))) {
     f6a:	88 2f       	mov	r24, r24
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	82 70       	andi	r24, 0x02	; 2
     f70:	99 27       	eor	r25, r25
     f72:	89 2b       	or	r24, r25
     f74:	c9 f0       	breq	.+50     	; 0xfa8 <main+0x102>
     f76:	40 91 60 01 	lds	r20, 0x0160	; 0x800160 <ir>
			remoteAlternateCommands(ir);
     f7a:	50 91 61 01 	lds	r21, 0x0161	; 0x800161 <ir+0x1>
     f7e:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <ir+0x2>
     f82:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <ir+0x3>
     f86:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <ir+0x4>
     f8a:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <_ZL23remoteAlternateCommands2IR>
     f8e:	60 e0       	ldi	r22, 0x00	; 0
			paired_id = eeprom.read(PAIR_ADDR);
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	8e e8       	ldi	r24, 0x8E	; 142
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	0e 94 aa 19 	call	0x3354	; 0x3354 <_ZN6EEPROM4readEj>
     f9a:	89 83       	std	Y+1, r24	; 0x01

			// Reset state
			CLEARBIT(ir.status,((1 << IR_RECEIVED) | (1 << IR_KEYHOLD)));
     f9c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <ir>
     fa0:	8c 7f       	andi	r24, 0xFC	; 252
     fa2:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <ir>
     fa6:	01 c0       	rjmp	.+2      	; 0xfaa <main+0x104>
		} else {
			decodeCommand();
     fa8:	59 d0       	rcall	.+178    	; 0x105c <_ZL13decodeCommandv>
     faa:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <_ZL5count>
			//SETBIT(REMOTE_PORT,REMOTE_LED);		
		}

		++count;
     fae:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <_ZL5count+0x1>
     fb2:	a0 91 95 01 	lds	r26, 0x0195	; 0x800195 <_ZL5count+0x2>
     fb6:	b0 91 96 01 	lds	r27, 0x0196	; 0x800196 <_ZL5count+0x3>
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	a1 1d       	adc	r26, r1
     fbe:	b1 1d       	adc	r27, r1
     fc0:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <_ZL5count>
     fc4:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <_ZL5count+0x1>
     fc8:	a0 93 95 01 	sts	0x0195, r26	; 0x800195 <_ZL5count+0x2>
     fcc:	b0 93 96 01 	sts	0x0196, r27	; 0x800196 <_ZL5count+0x3>
     fd0:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <_ZL5count>

		if (count >= SLEEP_DELAY) {
     fd4:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <_ZL5count+0x1>
     fd8:	a0 91 95 01 	lds	r26, 0x0195	; 0x800195 <_ZL5count+0x2>
     fdc:	b0 91 96 01 	lds	r27, 0x0196	; 0x800196 <_ZL5count+0x3>
     fe0:	21 e0       	ldi	r18, 0x01	; 1
     fe2:	80 3a       	cpi	r24, 0xA0	; 160
     fe4:	96 48       	sbci	r25, 0x86	; 134
     fe6:	a1 40       	sbci	r26, 0x01	; 1
     fe8:	b1 05       	cpc	r27, r1
     fea:	08 f4       	brcc	.+2      	; 0xfee <main+0x148>
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	22 23       	and	r18, r18
     ff0:	49 f0       	breq	.+18     	; 0x1004 <main+0x15e>
			count = 0;
     ff2:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <_ZL5count>
     ff6:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <_ZL5count+0x1>
     ffa:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <_ZL5count+0x2>
     ffe:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <_ZL5count+0x3>
			sleepNow();
    1002:	02 d0       	rcall	.+4      	; 0x1008 <_ZL8sleepNowv>
    1004:	78 94       	sei
		}

		sei();
    1006:	7f cf       	rjmp	.-258    	; 0xf06 <main+0x60>

00001008 <_ZL8sleepNowv>:
			
			break;
		}
	}

	while (1) {
    1008:	cf 93       	push	r28
	return 0;
}

//-----------------------------------------------------------------------------

static void sleepNow(void) {
    100a:	df 93       	push	r29
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	f8 94       	cli
	cli();
    1012:	83 e5       	ldi	r24, 0x53	; 83
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	23 e5       	ldi	r18, 0x53	; 83
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	f9 01       	movw	r30, r18
    101c:	20 81       	ld	r18, Z
    101e:	21 7f       	andi	r18, 0xF1	; 241
    1020:	24 60       	ori	r18, 0x04	; 4
    1022:	fc 01       	movw	r30, r24
    1024:	20 83       	st	Z, r18
    1026:	83 e5       	ldi	r24, 0x53	; 83
	sleep_enable();
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	23 e5       	ldi	r18, 0x53	; 83
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	f9 01       	movw	r30, r18
    1030:	20 81       	ld	r18, Z
    1032:	21 60       	ori	r18, 0x01	; 1
    1034:	fc 01       	movw	r30, r24
    1036:	20 83       	st	Z, r18
    1038:	89 e6       	ldi	r24, 0x69	; 105
	
	// Change interrupt to low state trigger
	CLEARBIT(EICRA,((1 << ISC01) | (1 << ISC00)));
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	29 e6       	ldi	r18, 0x69	; 105
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	f9 01       	movw	r30, r18
    1042:	20 81       	ld	r18, Z
    1044:	2c 7f       	andi	r18, 0xFC	; 252
    1046:	fc 01       	movw	r30, r24
    1048:	20 83       	st	Z, r18
    104a:	81 e0       	ldi	r24, 0x01	; 1
	powerDown = true;
    104c:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <_ZL9powerDown>
    1050:	78 94       	sei

	sei();
    1052:	88 95       	sleep
	sleep_cpu();
    1054:	00 00       	nop
}
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	08 95       	ret

0000105c <_ZL13decodeCommandv>:
    105c:	0f 93       	push	r16

//-----------------------------------------------------------------------------

static void decodeCommand(void) {
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	ce 58       	subi	r28, 0x8E	; 142
    106a:	d1 09       	sbc	r29, r1
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	cd bf       	out	0x3d, r28	; 61
	uint8_t command = 0;
    1076:	ce 01       	movw	r24, r28
    1078:	82 57       	subi	r24, 0x72	; 114
    107a:	9f 4f       	sbci	r25, 0xFF	; 255
    107c:	fc 01       	movw	r30, r24
    107e:	10 82       	st	Z, r1
	bool remaining = fifo.get(&command);
    1080:	ce 01       	movw	r24, r28
    1082:	82 57       	subi	r24, 0x72	; 114
    1084:	9f 4f       	sbci	r25, 0xFF	; 255
    1086:	bc 01       	movw	r22, r24
    1088:	8b e7       	ldi	r24, 0x7B	; 123
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	b7 d8       	rcall	.-3730   	; 0x1fc <_ZN4Fifo3getEPh>
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	89 81       	ldd	r24, Y+1	; 0x01
	
	while (remaining) {
    1092:	88 23       	and	r24, r24
    1094:	09 f4       	brne	.+2      	; 0x1098 <_ZL13decodeCommandv+0x3c>
    1096:	7c c7       	rjmp	.+3832   	; 0x1f90 <_ZL13decodeCommandv+0xf34>
    1098:	ce 01       	movw	r24, r28

		switch (command) {
    109a:	82 57       	subi	r24, 0x72	; 114
    109c:	9f 4f       	sbci	r25, 0xFF	; 255
    109e:	fc 01       	movw	r30, r24
    10a0:	80 81       	ld	r24, Z
    10a2:	88 2f       	mov	r24, r24
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	09 2e       	mov	r0, r25
    10a8:	00 0c       	add	r0, r0
    10aa:	aa 0b       	sbc	r26, r26
    10ac:	bb 0b       	sbc	r27, r27
    10ae:	41 e0       	ldi	r20, 0x01	; 1
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	2e e2       	ldi	r18, 0x2E	; 46
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	84 1b       	sub	r24, r20
    10b8:	95 0b       	sbc	r25, r21
    10ba:	28 17       	cp	r18, r24
    10bc:	39 07       	cpc	r19, r25
    10be:	08 f4       	brcc	.+2      	; 0x10c2 <_ZL13decodeCommandv+0x66>
    10c0:	52 c7       	rjmp	.+3748   	; 0x1f66 <_ZL13decodeCommandv+0xf0a>
    10c2:	8a 5b       	subi	r24, 0xBA	; 186
    10c4:	9f 4f       	sbci	r25, 0xFF	; 255
    10c6:	fc 01       	movw	r30, r24
    10c8:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__tablejump2__>
    10cc:	88 e2       	ldi	r24, 0x28	; 40
			case REMOTE_UP: {
				CLEARBIT(OUTPUT_RELAYS_PORT,OUTPUT_RELAYS_MUTE);			// Mute off
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	28 e2       	ldi	r18, 0x28	; 40
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	f9 01       	movw	r30, r18
    10d6:	20 81       	ld	r18, Z
    10d8:	2e 7f       	andi	r18, 0xFE	; 254
    10da:	fc 01       	movw	r30, r24
    10dc:	20 83       	st	Z, r18
    10de:	88 e2       	ldi	r24, 0x28	; 40
				CLEARBIT(OUTPUT_LED_PORT,OUTPUT_LED_MUTE);
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	28 e2       	ldi	r18, 0x28	; 40
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	f9 01       	movw	r30, r18
    10e8:	20 81       	ld	r18, Z
    10ea:	2f 7e       	andi	r18, 0xEF	; 239
    10ec:	fc 01       	movw	r30, r24
    10ee:	20 83       	st	Z, r18
    10f0:	85 e6       	ldi	r24, 0x65	; 101

				//if (!VolLimits_Up() && ((OUTPUT_LED_PIN & 0xe0) != OUTPUT_LED_HIGH)) {
					stepper.CW();											// Volume up (stepper clockwise)
    10f2:	91 e0       	ldi	r25, 0x01	; 1
    10f4:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <_ZN7Stepper2CWEv>
    10f8:	8b e2       	ldi	r24, 0x2B	; 43
				//}
				
				CLEARBIT(REMOTE_PORT,REMOTE_LED);
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	2b e2       	ldi	r18, 0x2B	; 43
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	f9 01       	movw	r30, r18
    1102:	20 81       	ld	r18, Z
    1104:	2d 7f       	andi	r18, 0xFD	; 253
    1106:	fc 01       	movw	r30, r24
    1108:	20 83       	st	Z, r18
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	a6 e1       	ldi	r26, 0x16	; 22
    1110:	b3 e4       	ldi	r27, 0x43	; 67
    1112:	8e 83       	std	Y+6, r24	; 0x06
    1114:	9f 83       	std	Y+7, r25	; 0x07
    1116:	a8 87       	std	Y+8, r26	; 0x08
    1118:	b9 87       	std	Y+9, r27	; 0x09
    111a:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	4a ef       	ldi	r20, 0xFA	; 250
    1120:	54 e4       	ldi	r21, 0x44	; 68
    1122:	6e 81       	ldd	r22, Y+6	; 0x06
    1124:	7f 81       	ldd	r23, Y+7	; 0x07
    1126:	88 85       	ldd	r24, Y+8	; 0x08
    1128:	99 85       	ldd	r25, Y+9	; 0x09
    112a:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	8c ab       	std	Y+52, r24	; 0x34
    1134:	9d ab       	std	Y+53, r25	; 0x35
    1136:	ae ab       	std	Y+54, r26	; 0x36
    1138:	bf ab       	std	Y+55, r27	; 0x37
    113a:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	40 e8       	ldi	r20, 0x80	; 128
    1140:	5f e3       	ldi	r21, 0x3F	; 63
    1142:	6c a9       	ldd	r22, Y+52	; 0x34
    1144:	7d a9       	ldd	r23, Y+53	; 0x35
    1146:	8e a9       	ldd	r24, Y+54	; 0x36
    1148:	9f a9       	ldd	r25, Y+55	; 0x37
    114a:	0e 94 de 19 	call	0x33bc	; 0x33bc <__cmpsf2>
    114e:	88 23       	and	r24, r24
    1150:	2c f4       	brge	.+10     	; 0x115c <_ZL13decodeCommandv+0x100>
    1152:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	99 af       	std	Y+57, r25	; 0x39
    1158:	88 af       	std	Y+56, r24	; 0x38
    115a:	3e c0       	rjmp	.+124    	; 0x11d8 <_ZL13decodeCommandv+0x17c>
    115c:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    115e:	3f ef       	ldi	r19, 0xFF	; 255
    1160:	4f e7       	ldi	r20, 0x7F	; 127
    1162:	57 e4       	ldi	r21, 0x47	; 71
    1164:	6c a9       	ldd	r22, Y+52	; 0x34
    1166:	7d a9       	ldd	r23, Y+53	; 0x35
    1168:	8e a9       	ldd	r24, Y+54	; 0x36
    116a:	9f a9       	ldd	r25, Y+55	; 0x37
    116c:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__gesf2>
    1170:	18 16       	cp	r1, r24
    1172:	44 f5       	brge	.+80     	; 0x11c4 <_ZL13decodeCommandv+0x168>
    1174:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	40 e2       	ldi	r20, 0x20	; 32
    117a:	51 e4       	ldi	r21, 0x41	; 65
    117c:	6e 81       	ldd	r22, Y+6	; 0x06
    117e:	7f 81       	ldd	r23, Y+7	; 0x07
    1180:	88 85       	ldd	r24, Y+8	; 0x08
    1182:	99 85       	ldd	r25, Y+9	; 0x09
    1184:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	bc 01       	movw	r22, r24
    118e:	cd 01       	movw	r24, r26
    1190:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	99 af       	std	Y+57, r25	; 0x39
    119a:	88 af       	std	Y+56, r24	; 0x38
    119c:	88 ad       	ldd	r24, Y+56	; 0x38
		while(__ticks)
    119e:	99 ad       	ldd	r25, Y+57	; 0x39
    11a0:	89 2b       	or	r24, r25
    11a2:	21 f1       	breq	.+72     	; 0x11ec <_ZL13decodeCommandv+0x190>
    11a4:	88 ec       	ldi	r24, 0xC8	; 200
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	9b af       	std	Y+59, r25	; 0x3b
    11aa:	8a af       	std	Y+58, r24	; 0x3a
    11ac:	8a ad       	ldd	r24, Y+58	; 0x3a
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    11ae:	9b ad       	ldd	r25, Y+59	; 0x3b
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <_ZL13decodeCommandv+0x154>
    11b4:	9b af       	std	Y+59, r25	; 0x3b
    11b6:	8a af       	std	Y+58, r24	; 0x3a
    11b8:	88 ad       	ldd	r24, Y+56	; 0x38
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ba:	99 ad       	ldd	r25, Y+57	; 0x39
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	99 af       	std	Y+57, r25	; 0x39
    11c0:	88 af       	std	Y+56, r24	; 0x38
    11c2:	ec cf       	rjmp	.-40     	; 0x119c <_ZL13decodeCommandv+0x140>
    11c4:	6c a9       	ldd	r22, Y+52	; 0x34
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c6:	7d a9       	ldd	r23, Y+53	; 0x35
    11c8:	8e a9       	ldd	r24, Y+54	; 0x36
    11ca:	9f a9       	ldd	r25, Y+55	; 0x37
    11cc:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	99 af       	std	Y+57, r25	; 0x39
    11d6:	88 af       	std	Y+56, r24	; 0x38
    11d8:	88 ad       	ldd	r24, Y+56	; 0x38
    11da:	99 ad       	ldd	r25, Y+57	; 0x39
    11dc:	9d af       	std	Y+61, r25	; 0x3d
    11de:	8c af       	std	Y+60, r24	; 0x3c
    11e0:	8c ad       	ldd	r24, Y+60	; 0x3c
    11e2:	9d ad       	ldd	r25, Y+61	; 0x3d
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <_ZL13decodeCommandv+0x188>
    11e8:	9d af       	std	Y+61, r25	; 0x3d
    11ea:	8c af       	std	Y+60, r24	; 0x3c
    11ec:	8b e2       	ldi	r24, 0x2B	; 43
				_delay_ms(IR_LED_DELAY);
				SETBIT(REMOTE_PORT,REMOTE_LED);
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	2b e2       	ldi	r18, 0x2B	; 43
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	f9 01       	movw	r30, r18
    11f6:	30 81       	ld	r19, Z
    11f8:	22 e0       	ldi	r18, 0x02	; 2
    11fa:	23 2b       	or	r18, r19
    11fc:	fc 01       	movw	r30, r24
    11fe:	20 83       	st	Z, r18
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	a8 ec       	ldi	r26, 0xC8	; 200
    1206:	b2 e4       	ldi	r27, 0x42	; 66
    1208:	8e a3       	std	Y+38, r24	; 0x26
    120a:	9f a3       	std	Y+39, r25	; 0x27
    120c:	a8 a7       	std	Y+40, r26	; 0x28
    120e:	b9 a7       	std	Y+41, r27	; 0x29
    1210:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	4a ef       	ldi	r20, 0xFA	; 250
    1216:	54 e4       	ldi	r21, 0x44	; 68
    1218:	6e a1       	ldd	r22, Y+38	; 0x26
    121a:	7f a1       	ldd	r23, Y+39	; 0x27
    121c:	88 a5       	ldd	r24, Y+40	; 0x28
    121e:	99 a5       	ldd	r25, Y+41	; 0x29
    1220:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	8a a7       	std	Y+42, r24	; 0x2a
    122a:	9b a7       	std	Y+43, r25	; 0x2b
    122c:	ac a7       	std	Y+44, r26	; 0x2c
    122e:	bd a7       	std	Y+45, r27	; 0x2d
    1230:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e8       	ldi	r20, 0x80	; 128
    1236:	5f e3       	ldi	r21, 0x3F	; 63
    1238:	6a a5       	ldd	r22, Y+42	; 0x2a
    123a:	7b a5       	ldd	r23, Y+43	; 0x2b
    123c:	8c a5       	ldd	r24, Y+44	; 0x2c
    123e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1240:	0e 94 de 19 	call	0x33bc	; 0x33bc <__cmpsf2>
    1244:	88 23       	and	r24, r24
    1246:	2c f4       	brge	.+10     	; 0x1252 <_ZL13decodeCommandv+0x1f6>
    1248:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	9f a7       	std	Y+47, r25	; 0x2f
    124e:	8e a7       	std	Y+46, r24	; 0x2e
    1250:	3f c0       	rjmp	.+126    	; 0x12d0 <_ZL13decodeCommandv+0x274>
    1252:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    1254:	3f ef       	ldi	r19, 0xFF	; 255
    1256:	4f e7       	ldi	r20, 0x7F	; 127
    1258:	57 e4       	ldi	r21, 0x47	; 71
    125a:	6a a5       	ldd	r22, Y+42	; 0x2a
    125c:	7b a5       	ldd	r23, Y+43	; 0x2b
    125e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1260:	9d a5       	ldd	r25, Y+45	; 0x2d
    1262:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__gesf2>
    1266:	18 16       	cp	r1, r24
    1268:	4c f5       	brge	.+82     	; 0x12bc <_ZL13decodeCommandv+0x260>
    126a:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 e2       	ldi	r20, 0x20	; 32
    1270:	51 e4       	ldi	r21, 0x41	; 65
    1272:	6e a1       	ldd	r22, Y+38	; 0x26
    1274:	7f a1       	ldd	r23, Y+39	; 0x27
    1276:	88 a5       	ldd	r24, Y+40	; 0x28
    1278:	99 a5       	ldd	r25, Y+41	; 0x29
    127a:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    127e:	dc 01       	movw	r26, r24
    1280:	cb 01       	movw	r24, r22
    1282:	bc 01       	movw	r22, r24
    1284:	cd 01       	movw	r24, r26
    1286:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	9f a7       	std	Y+47, r25	; 0x2f
    1290:	8e a7       	std	Y+46, r24	; 0x2e
    1292:	8e a5       	ldd	r24, Y+46	; 0x2e
		while(__ticks)
    1294:	9f a5       	ldd	r25, Y+47	; 0x2f
    1296:	89 2b       	or	r24, r25
    1298:	09 f4       	brne	.+2      	; 0x129c <_ZL13decodeCommandv+0x240>
    129a:	67 c6       	rjmp	.+3278   	; 0x1f6a <_ZL13decodeCommandv+0xf0e>
    129c:	88 ec       	ldi	r24, 0xC8	; 200
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	99 ab       	std	Y+49, r25	; 0x31
    12a2:	88 ab       	std	Y+48, r24	; 0x30
    12a4:	88 a9       	ldd	r24, Y+48	; 0x30
    12a6:	99 a9       	ldd	r25, Y+49	; 0x31
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	f1 f7       	brne	.-4      	; 0x12a8 <_ZL13decodeCommandv+0x24c>
    12ac:	99 ab       	std	Y+49, r25	; 0x31
    12ae:	88 ab       	std	Y+48, r24	; 0x30
    12b0:	8e a5       	ldd	r24, Y+46	; 0x2e
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b2:	9f a5       	ldd	r25, Y+47	; 0x2f
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	9f a7       	std	Y+47, r25	; 0x2f
    12b8:	8e a7       	std	Y+46, r24	; 0x2e
    12ba:	eb cf       	rjmp	.-42     	; 0x1292 <_ZL13decodeCommandv+0x236>
    12bc:	6a a5       	ldd	r22, Y+42	; 0x2a
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12be:	7b a5       	ldd	r23, Y+43	; 0x2b
    12c0:	8c a5       	ldd	r24, Y+44	; 0x2c
    12c2:	9d a5       	ldd	r25, Y+45	; 0x2d
    12c4:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	9f a7       	std	Y+47, r25	; 0x2f
    12ce:	8e a7       	std	Y+46, r24	; 0x2e
    12d0:	8e a5       	ldd	r24, Y+46	; 0x2e
    12d2:	9f a5       	ldd	r25, Y+47	; 0x2f
    12d4:	9b ab       	std	Y+51, r25	; 0x33
    12d6:	8a ab       	std	Y+50, r24	; 0x32
    12d8:	8a a9       	ldd	r24, Y+50	; 0x32
    12da:	9b a9       	ldd	r25, Y+51	; 0x33
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	f1 f7       	brne	.-4      	; 0x12dc <_ZL13decodeCommandv+0x280>
    12e0:	9b ab       	std	Y+51, r25	; 0x33
    12e2:	8a ab       	std	Y+50, r24	; 0x32
    12e4:	42 c6       	rjmp	.+3204   	; 0x1f6a <_ZL13decodeCommandv+0xf0e>
				
				_delay_ms(DEBOUNCE_DELAY);
				
				break;
    12e6:	88 e2       	ldi	r24, 0x28	; 40
			}
			
			case REMOTE_DOWN: {
				CLEARBIT(OUTPUT_RELAYS_PORT,OUTPUT_RELAYS_MUTE);			// Mute off
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	28 e2       	ldi	r18, 0x28	; 40
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	f9 01       	movw	r30, r18
    12f0:	20 81       	ld	r18, Z
    12f2:	2e 7f       	andi	r18, 0xFE	; 254
    12f4:	fc 01       	movw	r30, r24
    12f6:	20 83       	st	Z, r18
    12f8:	88 e2       	ldi	r24, 0x28	; 40
				CLEARBIT(OUTPUT_LED_PORT,OUTPUT_LED_MUTE);
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	28 e2       	ldi	r18, 0x28	; 40
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	f9 01       	movw	r30, r18
    1302:	20 81       	ld	r18, Z
    1304:	2f 7e       	andi	r18, 0xEF	; 239
    1306:	fc 01       	movw	r30, r24
    1308:	20 83       	st	Z, r18
    130a:	85 e6       	ldi	r24, 0x65	; 101

				//if (!VolLimits_Down() && ((OUTPUT_LED_PIN & 0xe0) != OUTPUT_LED_LOW)) {
					stepper.CCW();											// Volume down (stepper counter clockwise)
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <_ZN7Stepper3CCWEv>
    1312:	8b e2       	ldi	r24, 0x2B	; 43
				//}
				
				CLEARBIT(REMOTE_PORT,REMOTE_LED);
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	2b e2       	ldi	r18, 0x2B	; 43
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	f9 01       	movw	r30, r18
    131c:	20 81       	ld	r18, Z
    131e:	2d 7f       	andi	r18, 0xFD	; 253
    1320:	fc 01       	movw	r30, r24
    1322:	20 83       	st	Z, r18
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	a6 e1       	ldi	r26, 0x16	; 22
    132a:	b3 e4       	ldi	r27, 0x43	; 67
    132c:	8e 87       	std	Y+14, r24	; 0x0e
    132e:	9f 87       	std	Y+15, r25	; 0x0f
    1330:	a8 8b       	std	Y+16, r26	; 0x10
    1332:	b9 8b       	std	Y+17, r27	; 0x11
    1334:	8e 01       	movw	r16, r28

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1336:	08 5b       	subi	r16, 0xB8	; 184
    1338:	1f 4f       	sbci	r17, 0xFF	; 255
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	4a ef       	ldi	r20, 0xFA	; 250
    1340:	54 e4       	ldi	r21, 0x44	; 68
    1342:	6e 85       	ldd	r22, Y+14	; 0x0e
    1344:	7f 85       	ldd	r23, Y+15	; 0x0f
    1346:	88 89       	ldd	r24, Y+16	; 0x10
    1348:	99 89       	ldd	r25, Y+17	; 0x11
    134a:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	f8 01       	movw	r30, r16
    1354:	80 83       	st	Z, r24
    1356:	91 83       	std	Z+1, r25	; 0x01
    1358:	a2 83       	std	Z+2, r26	; 0x02
    135a:	b3 83       	std	Z+3, r27	; 0x03
    135c:	ce 01       	movw	r24, r28
	if (__tmp < 1.0)
    135e:	88 5b       	subi	r24, 0xB8	; 184
    1360:	9f 4f       	sbci	r25, 0xFF	; 255
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	40 e8       	ldi	r20, 0x80	; 128
    1368:	5f e3       	ldi	r21, 0x3F	; 63
    136a:	fc 01       	movw	r30, r24
    136c:	60 81       	ld	r22, Z
    136e:	71 81       	ldd	r23, Z+1	; 0x01
    1370:	82 81       	ldd	r24, Z+2	; 0x02
    1372:	93 81       	ldd	r25, Z+3	; 0x03
    1374:	0e 94 de 19 	call	0x33bc	; 0x33bc <__cmpsf2>
    1378:	88 23       	and	r24, r24
    137a:	4c f4       	brge	.+18     	; 0x138e <_ZL13decodeCommandv+0x332>
    137c:	ce 01       	movw	r24, r28
		__ticks = 1;
    137e:	84 5b       	subi	r24, 0xB4	; 180
    1380:	9f 4f       	sbci	r25, 0xFF	; 255
    1382:	21 e0       	ldi	r18, 0x01	; 1
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	fc 01       	movw	r30, r24
    1388:	31 83       	std	Z+1, r19	; 0x01
    138a:	20 83       	st	Z, r18
    138c:	69 c0       	rjmp	.+210    	; 0x1460 <_ZL13decodeCommandv+0x404>
    138e:	ce 01       	movw	r24, r28
	else if (__tmp > 65535)
    1390:	88 5b       	subi	r24, 0xB8	; 184
    1392:	9f 4f       	sbci	r25, 0xFF	; 255
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	3f ef       	ldi	r19, 0xFF	; 255
    1398:	4f e7       	ldi	r20, 0x7F	; 127
    139a:	57 e4       	ldi	r21, 0x47	; 71
    139c:	fc 01       	movw	r30, r24
    139e:	60 81       	ld	r22, Z
    13a0:	71 81       	ldd	r23, Z+1	; 0x01
    13a2:	82 81       	ldd	r24, Z+2	; 0x02
    13a4:	93 81       	ldd	r25, Z+3	; 0x03
    13a6:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__gesf2>
    13aa:	18 16       	cp	r1, r24
    13ac:	0c f0       	brlt	.+2      	; 0x13b0 <_ZL13decodeCommandv+0x354>
    13ae:	46 c0       	rjmp	.+140    	; 0x143c <_ZL13decodeCommandv+0x3e0>
    13b0:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	40 e2       	ldi	r20, 0x20	; 32
    13b6:	51 e4       	ldi	r21, 0x41	; 65
    13b8:	6e 85       	ldd	r22, Y+14	; 0x0e
    13ba:	7f 85       	ldd	r23, Y+15	; 0x0f
    13bc:	88 89       	ldd	r24, Y+16	; 0x10
    13be:	99 89       	ldd	r25, Y+17	; 0x11
    13c0:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	8e 01       	movw	r16, r28
    13ca:	04 5b       	subi	r16, 0xB4	; 180
    13cc:	1f 4f       	sbci	r17, 0xFF	; 255
    13ce:	bc 01       	movw	r22, r24
    13d0:	cd 01       	movw	r24, r26
    13d2:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	f8 01       	movw	r30, r16
    13dc:	91 83       	std	Z+1, r25	; 0x01
    13de:	80 83       	st	Z, r24
    13e0:	ce 01       	movw	r24, r28
		while(__ticks)
    13e2:	84 5b       	subi	r24, 0xB4	; 180
    13e4:	9f 4f       	sbci	r25, 0xFF	; 255
    13e6:	fc 01       	movw	r30, r24
    13e8:	80 81       	ld	r24, Z
    13ea:	91 81       	ldd	r25, Z+1	; 0x01
    13ec:	89 2b       	or	r24, r25
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <_ZL13decodeCommandv+0x396>
    13f0:	51 c0       	rjmp	.+162    	; 0x1494 <_ZL13decodeCommandv+0x438>
    13f2:	ce 01       	movw	r24, r28
    13f4:	82 5b       	subi	r24, 0xB2	; 178
    13f6:	9f 4f       	sbci	r25, 0xFF	; 255
    13f8:	28 ec       	ldi	r18, 0xC8	; 200
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	fc 01       	movw	r30, r24
    13fe:	31 83       	std	Z+1, r19	; 0x01
    1400:	20 83       	st	Z, r18
    1402:	ce 01       	movw	r24, r28
    1404:	82 5b       	subi	r24, 0xB2	; 178
    1406:	9f 4f       	sbci	r25, 0xFF	; 255
    1408:	fc 01       	movw	r30, r24
    140a:	80 81       	ld	r24, Z
    140c:	91 81       	ldd	r25, Z+1	; 0x01
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	f1 f7       	brne	.-4      	; 0x140e <_ZL13decodeCommandv+0x3b2>
    1412:	9e 01       	movw	r18, r28
    1414:	22 5b       	subi	r18, 0xB2	; 178
    1416:	3f 4f       	sbci	r19, 0xFF	; 255
    1418:	f9 01       	movw	r30, r18
    141a:	91 83       	std	Z+1, r25	; 0x01
    141c:	80 83       	st	Z, r24
    141e:	ce 01       	movw	r24, r28
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1420:	84 5b       	subi	r24, 0xB4	; 180
    1422:	9f 4f       	sbci	r25, 0xFF	; 255
    1424:	9e 01       	movw	r18, r28
    1426:	24 5b       	subi	r18, 0xB4	; 180
    1428:	3f 4f       	sbci	r19, 0xFF	; 255
    142a:	f9 01       	movw	r30, r18
    142c:	20 81       	ld	r18, Z
    142e:	31 81       	ldd	r19, Z+1	; 0x01
    1430:	21 50       	subi	r18, 0x01	; 1
    1432:	31 09       	sbc	r19, r1
    1434:	fc 01       	movw	r30, r24
    1436:	31 83       	std	Z+1, r19	; 0x01
    1438:	20 83       	st	Z, r18
    143a:	d2 cf       	rjmp	.-92     	; 0x13e0 <_ZL13decodeCommandv+0x384>
    143c:	8e 01       	movw	r16, r28
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    143e:	04 5b       	subi	r16, 0xB4	; 180
    1440:	1f 4f       	sbci	r17, 0xFF	; 255
    1442:	ce 01       	movw	r24, r28
    1444:	88 5b       	subi	r24, 0xB8	; 184
    1446:	9f 4f       	sbci	r25, 0xFF	; 255
    1448:	fc 01       	movw	r30, r24
    144a:	60 81       	ld	r22, Z
    144c:	71 81       	ldd	r23, Z+1	; 0x01
    144e:	82 81       	ldd	r24, Z+2	; 0x02
    1450:	93 81       	ldd	r25, Z+3	; 0x03
    1452:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	f8 01       	movw	r30, r16
    145c:	91 83       	std	Z+1, r25	; 0x01
    145e:	80 83       	st	Z, r24
    1460:	ce 01       	movw	r24, r28
    1462:	80 5b       	subi	r24, 0xB0	; 176
    1464:	9f 4f       	sbci	r25, 0xFF	; 255
    1466:	9e 01       	movw	r18, r28
    1468:	24 5b       	subi	r18, 0xB4	; 180
    146a:	3f 4f       	sbci	r19, 0xFF	; 255
    146c:	f9 01       	movw	r30, r18
    146e:	20 81       	ld	r18, Z
    1470:	31 81       	ldd	r19, Z+1	; 0x01
    1472:	fc 01       	movw	r30, r24
    1474:	31 83       	std	Z+1, r19	; 0x01
    1476:	20 83       	st	Z, r18
    1478:	ce 01       	movw	r24, r28
    147a:	80 5b       	subi	r24, 0xB0	; 176
    147c:	9f 4f       	sbci	r25, 0xFF	; 255
    147e:	fc 01       	movw	r30, r24
    1480:	80 81       	ld	r24, Z
    1482:	91 81       	ldd	r25, Z+1	; 0x01
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <_ZL13decodeCommandv+0x428>
    1488:	9e 01       	movw	r18, r28
    148a:	20 5b       	subi	r18, 0xB0	; 176
    148c:	3f 4f       	sbci	r19, 0xFF	; 255
    148e:	f9 01       	movw	r30, r18
    1490:	91 83       	std	Z+1, r25	; 0x01
    1492:	80 83       	st	Z, r24
    1494:	8b e2       	ldi	r24, 0x2B	; 43
				_delay_ms(IR_LED_DELAY);
				SETBIT(REMOTE_PORT,REMOTE_LED);
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	2b e2       	ldi	r18, 0x2B	; 43
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	f9 01       	movw	r30, r18
    149e:	30 81       	ld	r19, Z
    14a0:	22 e0       	ldi	r18, 0x02	; 2
    14a2:	23 2b       	or	r18, r19
    14a4:	fc 01       	movw	r30, r24
    14a6:	20 83       	st	Z, r18
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	a8 ec       	ldi	r26, 0xC8	; 200
    14ae:	b2 e4       	ldi	r27, 0x42	; 66
    14b0:	8a 83       	std	Y+2, r24	; 0x02
    14b2:	9b 83       	std	Y+3, r25	; 0x03
    14b4:	ac 83       	std	Y+4, r26	; 0x04
    14b6:	bd 83       	std	Y+5, r27	; 0x05
    14b8:	8e 01       	movw	r16, r28

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    14ba:	02 5c       	subi	r16, 0xC2	; 194
    14bc:	1f 4f       	sbci	r17, 0xFF	; 255
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	4a ef       	ldi	r20, 0xFA	; 250
    14c4:	54 e4       	ldi	r21, 0x44	; 68
    14c6:	6a 81       	ldd	r22, Y+2	; 0x02
    14c8:	7b 81       	ldd	r23, Y+3	; 0x03
    14ca:	8c 81       	ldd	r24, Y+4	; 0x04
    14cc:	9d 81       	ldd	r25, Y+5	; 0x05
    14ce:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	f8 01       	movw	r30, r16
    14d8:	80 83       	st	Z, r24
    14da:	91 83       	std	Z+1, r25	; 0x01
    14dc:	a2 83       	std	Z+2, r26	; 0x02
    14de:	b3 83       	std	Z+3, r27	; 0x03
    14e0:	ce 01       	movw	r24, r28
	if (__tmp < 1.0)
    14e2:	ce 96       	adiw	r24, 0x3e	; 62
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e8       	ldi	r20, 0x80	; 128
    14ea:	5f e3       	ldi	r21, 0x3F	; 63
    14ec:	fc 01       	movw	r30, r24
    14ee:	60 81       	ld	r22, Z
    14f0:	71 81       	ldd	r23, Z+1	; 0x01
    14f2:	82 81       	ldd	r24, Z+2	; 0x02
    14f4:	93 81       	ldd	r25, Z+3	; 0x03
    14f6:	0e 94 de 19 	call	0x33bc	; 0x33bc <__cmpsf2>
    14fa:	88 23       	and	r24, r24
    14fc:	4c f4       	brge	.+18     	; 0x1510 <_ZL13decodeCommandv+0x4b4>
    14fe:	ce 01       	movw	r24, r28
		__ticks = 1;
    1500:	8e 5b       	subi	r24, 0xBE	; 190
    1502:	9f 4f       	sbci	r25, 0xFF	; 255
    1504:	21 e0       	ldi	r18, 0x01	; 1
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	fc 01       	movw	r30, r24
    150a:	31 83       	std	Z+1, r19	; 0x01
    150c:	20 83       	st	Z, r18
    150e:	67 c0       	rjmp	.+206    	; 0x15de <_ZL13decodeCommandv+0x582>
    1510:	ce 01       	movw	r24, r28
	else if (__tmp > 65535)
    1512:	ce 96       	adiw	r24, 0x3e	; 62
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	3f ef       	ldi	r19, 0xFF	; 255
    1518:	4f e7       	ldi	r20, 0x7F	; 127
    151a:	57 e4       	ldi	r21, 0x47	; 71
    151c:	fc 01       	movw	r30, r24
    151e:	60 81       	ld	r22, Z
    1520:	71 81       	ldd	r23, Z+1	; 0x01
    1522:	82 81       	ldd	r24, Z+2	; 0x02
    1524:	93 81       	ldd	r25, Z+3	; 0x03
    1526:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__gesf2>
    152a:	18 16       	cp	r1, r24
    152c:	0c f0       	brlt	.+2      	; 0x1530 <_ZL13decodeCommandv+0x4d4>
    152e:	46 c0       	rjmp	.+140    	; 0x15bc <_ZL13decodeCommandv+0x560>
    1530:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e2       	ldi	r20, 0x20	; 32
    1536:	51 e4       	ldi	r21, 0x41	; 65
    1538:	6a 81       	ldd	r22, Y+2	; 0x02
    153a:	7b 81       	ldd	r23, Y+3	; 0x03
    153c:	8c 81       	ldd	r24, Y+4	; 0x04
    153e:	9d 81       	ldd	r25, Y+5	; 0x05
    1540:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	8e 01       	movw	r16, r28
    154a:	0e 5b       	subi	r16, 0xBE	; 190
    154c:	1f 4f       	sbci	r17, 0xFF	; 255
    154e:	bc 01       	movw	r22, r24
    1550:	cd 01       	movw	r24, r26
    1552:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	f8 01       	movw	r30, r16
    155c:	91 83       	std	Z+1, r25	; 0x01
    155e:	80 83       	st	Z, r24
    1560:	ce 01       	movw	r24, r28
		while(__ticks)
    1562:	8e 5b       	subi	r24, 0xBE	; 190
    1564:	9f 4f       	sbci	r25, 0xFF	; 255
    1566:	fc 01       	movw	r30, r24
    1568:	80 81       	ld	r24, Z
    156a:	91 81       	ldd	r25, Z+1	; 0x01
    156c:	89 2b       	or	r24, r25
    156e:	09 f4       	brne	.+2      	; 0x1572 <_ZL13decodeCommandv+0x516>
    1570:	fe c4       	rjmp	.+2556   	; 0x1f6e <_ZL13decodeCommandv+0xf12>
    1572:	ce 01       	movw	r24, r28
    1574:	8c 5b       	subi	r24, 0xBC	; 188
    1576:	9f 4f       	sbci	r25, 0xFF	; 255
    1578:	28 ec       	ldi	r18, 0xC8	; 200
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	fc 01       	movw	r30, r24
    157e:	31 83       	std	Z+1, r19	; 0x01
    1580:	20 83       	st	Z, r18
    1582:	ce 01       	movw	r24, r28
    1584:	8c 5b       	subi	r24, 0xBC	; 188
    1586:	9f 4f       	sbci	r25, 0xFF	; 255
    1588:	fc 01       	movw	r30, r24
    158a:	80 81       	ld	r24, Z
    158c:	91 81       	ldd	r25, Z+1	; 0x01
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	f1 f7       	brne	.-4      	; 0x158e <_ZL13decodeCommandv+0x532>
    1592:	9e 01       	movw	r18, r28
    1594:	2c 5b       	subi	r18, 0xBC	; 188
    1596:	3f 4f       	sbci	r19, 0xFF	; 255
    1598:	f9 01       	movw	r30, r18
    159a:	91 83       	std	Z+1, r25	; 0x01
    159c:	80 83       	st	Z, r24
    159e:	ce 01       	movw	r24, r28
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a0:	8e 5b       	subi	r24, 0xBE	; 190
    15a2:	9f 4f       	sbci	r25, 0xFF	; 255
    15a4:	9e 01       	movw	r18, r28
    15a6:	2e 5b       	subi	r18, 0xBE	; 190
    15a8:	3f 4f       	sbci	r19, 0xFF	; 255
    15aa:	f9 01       	movw	r30, r18
    15ac:	20 81       	ld	r18, Z
    15ae:	31 81       	ldd	r19, Z+1	; 0x01
    15b0:	21 50       	subi	r18, 0x01	; 1
    15b2:	31 09       	sbc	r19, r1
    15b4:	fc 01       	movw	r30, r24
    15b6:	31 83       	std	Z+1, r19	; 0x01
    15b8:	20 83       	st	Z, r18
    15ba:	d2 cf       	rjmp	.-92     	; 0x1560 <_ZL13decodeCommandv+0x504>
    15bc:	8e 01       	movw	r16, r28
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15be:	0e 5b       	subi	r16, 0xBE	; 190
    15c0:	1f 4f       	sbci	r17, 0xFF	; 255
    15c2:	ce 01       	movw	r24, r28
    15c4:	ce 96       	adiw	r24, 0x3e	; 62
    15c6:	fc 01       	movw	r30, r24
    15c8:	60 81       	ld	r22, Z
    15ca:	71 81       	ldd	r23, Z+1	; 0x01
    15cc:	82 81       	ldd	r24, Z+2	; 0x02
    15ce:	93 81       	ldd	r25, Z+3	; 0x03
    15d0:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	f8 01       	movw	r30, r16
    15da:	91 83       	std	Z+1, r25	; 0x01
    15dc:	80 83       	st	Z, r24
    15de:	ce 01       	movw	r24, r28
    15e0:	8a 5b       	subi	r24, 0xBA	; 186
    15e2:	9f 4f       	sbci	r25, 0xFF	; 255
    15e4:	9e 01       	movw	r18, r28
    15e6:	2e 5b       	subi	r18, 0xBE	; 190
    15e8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ea:	f9 01       	movw	r30, r18
    15ec:	20 81       	ld	r18, Z
    15ee:	31 81       	ldd	r19, Z+1	; 0x01
    15f0:	fc 01       	movw	r30, r24
    15f2:	31 83       	std	Z+1, r19	; 0x01
    15f4:	20 83       	st	Z, r18
    15f6:	ce 01       	movw	r24, r28
    15f8:	8a 5b       	subi	r24, 0xBA	; 186
    15fa:	9f 4f       	sbci	r25, 0xFF	; 255
    15fc:	fc 01       	movw	r30, r24
    15fe:	80 81       	ld	r24, Z
    1600:	91 81       	ldd	r25, Z+1	; 0x01
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <_ZL13decodeCommandv+0x5a6>
    1606:	9e 01       	movw	r18, r28
    1608:	2a 5b       	subi	r18, 0xBA	; 186
    160a:	3f 4f       	sbci	r19, 0xFF	; 255
    160c:	f9 01       	movw	r30, r18
    160e:	91 83       	std	Z+1, r25	; 0x01
    1610:	80 83       	st	Z, r24
    1612:	ad c4       	rjmp	.+2394   	; 0x1f6e <_ZL13decodeCommandv+0xf12>
				
				_delay_ms(DEBOUNCE_DELAY);
				
				break;
    1614:	86 e2       	ldi	r24, 0x26	; 38
			}
			
			case REMOTE_LEFT: {
				switch(OUTPUT_LED_PIN & 0xe0) {
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	fc 01       	movw	r30, r24
    161a:	80 81       	ld	r24, Z
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	80 7e       	andi	r24, 0xE0	; 224
    1622:	99 27       	eor	r25, r25
    1624:	80 34       	cpi	r24, 0x40	; 64
    1626:	91 05       	cpc	r25, r1
    1628:	49 f0       	breq	.+18     	; 0x163c <_ZL13decodeCommandv+0x5e0>
    162a:	80 38       	cpi	r24, 0x80	; 128
    162c:	91 05       	cpc	r25, r1
    162e:	49 f0       	breq	.+18     	; 0x1642 <_ZL13decodeCommandv+0x5e6>
    1630:	80 97       	sbiw	r24, 0x20	; 32
    1632:	09 f0       	breq	.+2      	; 0x1636 <_ZL13decodeCommandv+0x5da>
    1634:	07 c0       	rjmp	.+14     	; 0x1644 <_ZL13decodeCommandv+0x5e8>

						break;
					}

					default: {
						break;
    1636:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <_ZL14setLevelMediumv>
			}
			
			case REMOTE_LEFT: {
				switch(OUTPUT_LED_PIN & 0xe0) {
					case OUTPUT_LED_HIGH: {									// Switch to medium
						setLevelMedium();
    163a:	04 c0       	rjmp	.+8      	; 0x1644 <_ZL13decodeCommandv+0x5e8>

						break;
    163c:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <_ZL11setLevelLowv>
					}

					case OUTPUT_LED_MED: {									// Switch to low
						setLevelLow();
    1640:	01 c0       	rjmp	.+2      	; 0x1644 <_ZL13decodeCommandv+0x5e8>

						break;
    1642:	00 00       	nop
					}

					case OUTPUT_LED_LOW: {									// Switch to high

						break;
    1644:	8b e2       	ldi	r24, 0x2B	; 43
					default: {
						break;
					}
				}
				
				CLEARBIT(REMOTE_PORT,REMOTE_LED);
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	2b e2       	ldi	r18, 0x2B	; 43
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	f9 01       	movw	r30, r18
    164e:	20 81       	ld	r18, Z
    1650:	2d 7f       	andi	r18, 0xFD	; 253
    1652:	fc 01       	movw	r30, r24
    1654:	20 83       	st	Z, r18
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	a6 e1       	ldi	r26, 0x16	; 22
    165c:	b3 e4       	ldi	r27, 0x43	; 67
    165e:	8e 8b       	std	Y+22, r24	; 0x16
    1660:	9f 8b       	std	Y+23, r25	; 0x17
    1662:	a8 8f       	std	Y+24, r26	; 0x18
    1664:	b9 8f       	std	Y+25, r27	; 0x19
    1666:	8e 01       	movw	r16, r28

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1668:	04 5a       	subi	r16, 0xA4	; 164
    166a:	1f 4f       	sbci	r17, 0xFF	; 255
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	4a ef       	ldi	r20, 0xFA	; 250
    1672:	54 e4       	ldi	r21, 0x44	; 68
    1674:	6e 89       	ldd	r22, Y+22	; 0x16
    1676:	7f 89       	ldd	r23, Y+23	; 0x17
    1678:	88 8d       	ldd	r24, Y+24	; 0x18
    167a:	99 8d       	ldd	r25, Y+25	; 0x19
    167c:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	f8 01       	movw	r30, r16
    1686:	80 83       	st	Z, r24
    1688:	91 83       	std	Z+1, r25	; 0x01
    168a:	a2 83       	std	Z+2, r26	; 0x02
    168c:	b3 83       	std	Z+3, r27	; 0x03
    168e:	ce 01       	movw	r24, r28
	if (__tmp < 1.0)
    1690:	84 5a       	subi	r24, 0xA4	; 164
    1692:	9f 4f       	sbci	r25, 0xFF	; 255
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e8       	ldi	r20, 0x80	; 128
    169a:	5f e3       	ldi	r21, 0x3F	; 63
    169c:	fc 01       	movw	r30, r24
    169e:	60 81       	ld	r22, Z
    16a0:	71 81       	ldd	r23, Z+1	; 0x01
    16a2:	82 81       	ldd	r24, Z+2	; 0x02
    16a4:	93 81       	ldd	r25, Z+3	; 0x03
    16a6:	0e 94 de 19 	call	0x33bc	; 0x33bc <__cmpsf2>
    16aa:	88 23       	and	r24, r24
    16ac:	4c f4       	brge	.+18     	; 0x16c0 <_ZL13decodeCommandv+0x664>
    16ae:	ce 01       	movw	r24, r28
		__ticks = 1;
    16b0:	80 5a       	subi	r24, 0xA0	; 160
    16b2:	9f 4f       	sbci	r25, 0xFF	; 255
    16b4:	21 e0       	ldi	r18, 0x01	; 1
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	fc 01       	movw	r30, r24
    16ba:	31 83       	std	Z+1, r19	; 0x01
    16bc:	20 83       	st	Z, r18
    16be:	69 c0       	rjmp	.+210    	; 0x1792 <_ZL13decodeCommandv+0x736>
    16c0:	ce 01       	movw	r24, r28
	else if (__tmp > 65535)
    16c2:	84 5a       	subi	r24, 0xA4	; 164
    16c4:	9f 4f       	sbci	r25, 0xFF	; 255
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	3f ef       	ldi	r19, 0xFF	; 255
    16ca:	4f e7       	ldi	r20, 0x7F	; 127
    16cc:	57 e4       	ldi	r21, 0x47	; 71
    16ce:	fc 01       	movw	r30, r24
    16d0:	60 81       	ld	r22, Z
    16d2:	71 81       	ldd	r23, Z+1	; 0x01
    16d4:	82 81       	ldd	r24, Z+2	; 0x02
    16d6:	93 81       	ldd	r25, Z+3	; 0x03
    16d8:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__gesf2>
    16dc:	18 16       	cp	r1, r24
    16de:	0c f0       	brlt	.+2      	; 0x16e2 <_ZL13decodeCommandv+0x686>
    16e0:	46 c0       	rjmp	.+140    	; 0x176e <_ZL13decodeCommandv+0x712>
    16e2:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	40 e2       	ldi	r20, 0x20	; 32
    16e8:	51 e4       	ldi	r21, 0x41	; 65
    16ea:	6e 89       	ldd	r22, Y+22	; 0x16
    16ec:	7f 89       	ldd	r23, Y+23	; 0x17
    16ee:	88 8d       	ldd	r24, Y+24	; 0x18
    16f0:	99 8d       	ldd	r25, Y+25	; 0x19
    16f2:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	8e 01       	movw	r16, r28
    16fc:	00 5a       	subi	r16, 0xA0	; 160
    16fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1700:	bc 01       	movw	r22, r24
    1702:	cd 01       	movw	r24, r26
    1704:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	f8 01       	movw	r30, r16
    170e:	91 83       	std	Z+1, r25	; 0x01
    1710:	80 83       	st	Z, r24
    1712:	ce 01       	movw	r24, r28
		while(__ticks)
    1714:	80 5a       	subi	r24, 0xA0	; 160
    1716:	9f 4f       	sbci	r25, 0xFF	; 255
    1718:	fc 01       	movw	r30, r24
    171a:	80 81       	ld	r24, Z
    171c:	91 81       	ldd	r25, Z+1	; 0x01
    171e:	89 2b       	or	r24, r25
    1720:	09 f4       	brne	.+2      	; 0x1724 <_ZL13decodeCommandv+0x6c8>
    1722:	51 c0       	rjmp	.+162    	; 0x17c6 <_ZL13decodeCommandv+0x76a>
    1724:	ce 01       	movw	r24, r28
    1726:	8e 59       	subi	r24, 0x9E	; 158
    1728:	9f 4f       	sbci	r25, 0xFF	; 255
    172a:	28 ec       	ldi	r18, 0xC8	; 200
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	fc 01       	movw	r30, r24
    1730:	31 83       	std	Z+1, r19	; 0x01
    1732:	20 83       	st	Z, r18
    1734:	ce 01       	movw	r24, r28
    1736:	8e 59       	subi	r24, 0x9E	; 158
    1738:	9f 4f       	sbci	r25, 0xFF	; 255
    173a:	fc 01       	movw	r30, r24
    173c:	80 81       	ld	r24, Z
    173e:	91 81       	ldd	r25, Z+1	; 0x01
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	f1 f7       	brne	.-4      	; 0x1740 <_ZL13decodeCommandv+0x6e4>
    1744:	9e 01       	movw	r18, r28
    1746:	2e 59       	subi	r18, 0x9E	; 158
    1748:	3f 4f       	sbci	r19, 0xFF	; 255
    174a:	f9 01       	movw	r30, r18
    174c:	91 83       	std	Z+1, r25	; 0x01
    174e:	80 83       	st	Z, r24
    1750:	ce 01       	movw	r24, r28
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1752:	80 5a       	subi	r24, 0xA0	; 160
    1754:	9f 4f       	sbci	r25, 0xFF	; 255
    1756:	9e 01       	movw	r18, r28
    1758:	20 5a       	subi	r18, 0xA0	; 160
    175a:	3f 4f       	sbci	r19, 0xFF	; 255
    175c:	f9 01       	movw	r30, r18
    175e:	20 81       	ld	r18, Z
    1760:	31 81       	ldd	r19, Z+1	; 0x01
    1762:	21 50       	subi	r18, 0x01	; 1
    1764:	31 09       	sbc	r19, r1
    1766:	fc 01       	movw	r30, r24
    1768:	31 83       	std	Z+1, r19	; 0x01
    176a:	20 83       	st	Z, r18
    176c:	d2 cf       	rjmp	.-92     	; 0x1712 <_ZL13decodeCommandv+0x6b6>
    176e:	8e 01       	movw	r16, r28
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1770:	00 5a       	subi	r16, 0xA0	; 160
    1772:	1f 4f       	sbci	r17, 0xFF	; 255
    1774:	ce 01       	movw	r24, r28
    1776:	84 5a       	subi	r24, 0xA4	; 164
    1778:	9f 4f       	sbci	r25, 0xFF	; 255
    177a:	fc 01       	movw	r30, r24
    177c:	60 81       	ld	r22, Z
    177e:	71 81       	ldd	r23, Z+1	; 0x01
    1780:	82 81       	ldd	r24, Z+2	; 0x02
    1782:	93 81       	ldd	r25, Z+3	; 0x03
    1784:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	f8 01       	movw	r30, r16
    178e:	91 83       	std	Z+1, r25	; 0x01
    1790:	80 83       	st	Z, r24
    1792:	ce 01       	movw	r24, r28
    1794:	8c 59       	subi	r24, 0x9C	; 156
    1796:	9f 4f       	sbci	r25, 0xFF	; 255
    1798:	9e 01       	movw	r18, r28
    179a:	20 5a       	subi	r18, 0xA0	; 160
    179c:	3f 4f       	sbci	r19, 0xFF	; 255
    179e:	f9 01       	movw	r30, r18
    17a0:	20 81       	ld	r18, Z
    17a2:	31 81       	ldd	r19, Z+1	; 0x01
    17a4:	fc 01       	movw	r30, r24
    17a6:	31 83       	std	Z+1, r19	; 0x01
    17a8:	20 83       	st	Z, r18
    17aa:	ce 01       	movw	r24, r28
    17ac:	8c 59       	subi	r24, 0x9C	; 156
    17ae:	9f 4f       	sbci	r25, 0xFF	; 255
    17b0:	fc 01       	movw	r30, r24
    17b2:	80 81       	ld	r24, Z
    17b4:	91 81       	ldd	r25, Z+1	; 0x01
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <_ZL13decodeCommandv+0x75a>
    17ba:	9e 01       	movw	r18, r28
    17bc:	2c 59       	subi	r18, 0x9C	; 156
    17be:	3f 4f       	sbci	r19, 0xFF	; 255
    17c0:	f9 01       	movw	r30, r18
    17c2:	91 83       	std	Z+1, r25	; 0x01
    17c4:	80 83       	st	Z, r24
    17c6:	8b e2       	ldi	r24, 0x2B	; 43
				_delay_ms(IR_LED_DELAY);
				SETBIT(REMOTE_PORT,REMOTE_LED);
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	2b e2       	ldi	r18, 0x2B	; 43
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	f9 01       	movw	r30, r18
    17d0:	30 81       	ld	r19, Z
    17d2:	22 e0       	ldi	r18, 0x02	; 2
    17d4:	23 2b       	or	r18, r19
    17d6:	fc 01       	movw	r30, r24
    17d8:	20 83       	st	Z, r18
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	a8 ec       	ldi	r26, 0xC8	; 200
    17e0:	b2 e4       	ldi	r27, 0x42	; 66
    17e2:	8a 87       	std	Y+10, r24	; 0x0a
    17e4:	9b 87       	std	Y+11, r25	; 0x0b
    17e6:	ac 87       	std	Y+12, r26	; 0x0c
    17e8:	bd 87       	std	Y+13, r27	; 0x0d
    17ea:	8e 01       	movw	r16, r28

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    17ec:	0e 5a       	subi	r16, 0xAE	; 174
    17ee:	1f 4f       	sbci	r17, 0xFF	; 255
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	4a ef       	ldi	r20, 0xFA	; 250
    17f6:	54 e4       	ldi	r21, 0x44	; 68
    17f8:	6a 85       	ldd	r22, Y+10	; 0x0a
    17fa:	7b 85       	ldd	r23, Y+11	; 0x0b
    17fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    17fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    1800:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	f8 01       	movw	r30, r16
    180a:	80 83       	st	Z, r24
    180c:	91 83       	std	Z+1, r25	; 0x01
    180e:	a2 83       	std	Z+2, r26	; 0x02
    1810:	b3 83       	std	Z+3, r27	; 0x03
    1812:	ce 01       	movw	r24, r28
	if (__tmp < 1.0)
    1814:	8e 5a       	subi	r24, 0xAE	; 174
    1816:	9f 4f       	sbci	r25, 0xFF	; 255
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e8       	ldi	r20, 0x80	; 128
    181e:	5f e3       	ldi	r21, 0x3F	; 63
    1820:	fc 01       	movw	r30, r24
    1822:	60 81       	ld	r22, Z
    1824:	71 81       	ldd	r23, Z+1	; 0x01
    1826:	82 81       	ldd	r24, Z+2	; 0x02
    1828:	93 81       	ldd	r25, Z+3	; 0x03
    182a:	0e 94 de 19 	call	0x33bc	; 0x33bc <__cmpsf2>
    182e:	88 23       	and	r24, r24
    1830:	4c f4       	brge	.+18     	; 0x1844 <_ZL13decodeCommandv+0x7e8>
    1832:	ce 01       	movw	r24, r28
		__ticks = 1;
    1834:	8a 5a       	subi	r24, 0xAA	; 170
    1836:	9f 4f       	sbci	r25, 0xFF	; 255
    1838:	21 e0       	ldi	r18, 0x01	; 1
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	fc 01       	movw	r30, r24
    183e:	31 83       	std	Z+1, r19	; 0x01
    1840:	20 83       	st	Z, r18
    1842:	69 c0       	rjmp	.+210    	; 0x1916 <_ZL13decodeCommandv+0x8ba>
    1844:	ce 01       	movw	r24, r28
	else if (__tmp > 65535)
    1846:	8e 5a       	subi	r24, 0xAE	; 174
    1848:	9f 4f       	sbci	r25, 0xFF	; 255
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	3f ef       	ldi	r19, 0xFF	; 255
    184e:	4f e7       	ldi	r20, 0x7F	; 127
    1850:	57 e4       	ldi	r21, 0x47	; 71
    1852:	fc 01       	movw	r30, r24
    1854:	60 81       	ld	r22, Z
    1856:	71 81       	ldd	r23, Z+1	; 0x01
    1858:	82 81       	ldd	r24, Z+2	; 0x02
    185a:	93 81       	ldd	r25, Z+3	; 0x03
    185c:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__gesf2>
    1860:	18 16       	cp	r1, r24
    1862:	0c f0       	brlt	.+2      	; 0x1866 <_ZL13decodeCommandv+0x80a>
    1864:	46 c0       	rjmp	.+140    	; 0x18f2 <_ZL13decodeCommandv+0x896>
    1866:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 e2       	ldi	r20, 0x20	; 32
    186c:	51 e4       	ldi	r21, 0x41	; 65
    186e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1870:	7b 85       	ldd	r23, Y+11	; 0x0b
    1872:	8c 85       	ldd	r24, Y+12	; 0x0c
    1874:	9d 85       	ldd	r25, Y+13	; 0x0d
    1876:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	8e 01       	movw	r16, r28
    1880:	0a 5a       	subi	r16, 0xAA	; 170
    1882:	1f 4f       	sbci	r17, 0xFF	; 255
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	f8 01       	movw	r30, r16
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	80 83       	st	Z, r24
    1896:	ce 01       	movw	r24, r28
		while(__ticks)
    1898:	8a 5a       	subi	r24, 0xAA	; 170
    189a:	9f 4f       	sbci	r25, 0xFF	; 255
    189c:	fc 01       	movw	r30, r24
    189e:	80 81       	ld	r24, Z
    18a0:	91 81       	ldd	r25, Z+1	; 0x01
    18a2:	89 2b       	or	r24, r25
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <_ZL13decodeCommandv+0x84c>
    18a6:	65 c3       	rjmp	.+1738   	; 0x1f72 <_ZL13decodeCommandv+0xf16>
    18a8:	ce 01       	movw	r24, r28
    18aa:	88 5a       	subi	r24, 0xA8	; 168
    18ac:	9f 4f       	sbci	r25, 0xFF	; 255
    18ae:	28 ec       	ldi	r18, 0xC8	; 200
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	fc 01       	movw	r30, r24
    18b4:	31 83       	std	Z+1, r19	; 0x01
    18b6:	20 83       	st	Z, r18
    18b8:	ce 01       	movw	r24, r28
    18ba:	88 5a       	subi	r24, 0xA8	; 168
    18bc:	9f 4f       	sbci	r25, 0xFF	; 255
    18be:	fc 01       	movw	r30, r24
    18c0:	80 81       	ld	r24, Z
    18c2:	91 81       	ldd	r25, Z+1	; 0x01
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	f1 f7       	brne	.-4      	; 0x18c4 <_ZL13decodeCommandv+0x868>
    18c8:	9e 01       	movw	r18, r28
    18ca:	28 5a       	subi	r18, 0xA8	; 168
    18cc:	3f 4f       	sbci	r19, 0xFF	; 255
    18ce:	f9 01       	movw	r30, r18
    18d0:	91 83       	std	Z+1, r25	; 0x01
    18d2:	80 83       	st	Z, r24
    18d4:	ce 01       	movw	r24, r28
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d6:	8a 5a       	subi	r24, 0xAA	; 170
    18d8:	9f 4f       	sbci	r25, 0xFF	; 255
    18da:	9e 01       	movw	r18, r28
    18dc:	2a 5a       	subi	r18, 0xAA	; 170
    18de:	3f 4f       	sbci	r19, 0xFF	; 255
    18e0:	f9 01       	movw	r30, r18
    18e2:	20 81       	ld	r18, Z
    18e4:	31 81       	ldd	r19, Z+1	; 0x01
    18e6:	21 50       	subi	r18, 0x01	; 1
    18e8:	31 09       	sbc	r19, r1
    18ea:	fc 01       	movw	r30, r24
    18ec:	31 83       	std	Z+1, r19	; 0x01
    18ee:	20 83       	st	Z, r18
    18f0:	d2 cf       	rjmp	.-92     	; 0x1896 <_ZL13decodeCommandv+0x83a>
    18f2:	8e 01       	movw	r16, r28
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f4:	0a 5a       	subi	r16, 0xAA	; 170
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	ce 01       	movw	r24, r28
    18fa:	8e 5a       	subi	r24, 0xAE	; 174
    18fc:	9f 4f       	sbci	r25, 0xFF	; 255
    18fe:	fc 01       	movw	r30, r24
    1900:	60 81       	ld	r22, Z
    1902:	71 81       	ldd	r23, Z+1	; 0x01
    1904:	82 81       	ldd	r24, Z+2	; 0x02
    1906:	93 81       	ldd	r25, Z+3	; 0x03
    1908:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	f8 01       	movw	r30, r16
    1912:	91 83       	std	Z+1, r25	; 0x01
    1914:	80 83       	st	Z, r24
    1916:	ce 01       	movw	r24, r28
    1918:	86 5a       	subi	r24, 0xA6	; 166
    191a:	9f 4f       	sbci	r25, 0xFF	; 255
    191c:	9e 01       	movw	r18, r28
    191e:	2a 5a       	subi	r18, 0xAA	; 170
    1920:	3f 4f       	sbci	r19, 0xFF	; 255
    1922:	f9 01       	movw	r30, r18
    1924:	20 81       	ld	r18, Z
    1926:	31 81       	ldd	r19, Z+1	; 0x01
    1928:	fc 01       	movw	r30, r24
    192a:	31 83       	std	Z+1, r19	; 0x01
    192c:	20 83       	st	Z, r18
    192e:	ce 01       	movw	r24, r28
    1930:	86 5a       	subi	r24, 0xA6	; 166
    1932:	9f 4f       	sbci	r25, 0xFF	; 255
    1934:	fc 01       	movw	r30, r24
    1936:	80 81       	ld	r24, Z
    1938:	91 81       	ldd	r25, Z+1	; 0x01
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	f1 f7       	brne	.-4      	; 0x193a <_ZL13decodeCommandv+0x8de>
    193e:	9e 01       	movw	r18, r28
    1940:	26 5a       	subi	r18, 0xA6	; 166
    1942:	3f 4f       	sbci	r19, 0xFF	; 255
    1944:	f9 01       	movw	r30, r18
    1946:	91 83       	std	Z+1, r25	; 0x01
    1948:	80 83       	st	Z, r24
    194a:	13 c3       	rjmp	.+1574   	; 0x1f72 <_ZL13decodeCommandv+0xf16>
				
				_delay_ms(DEBOUNCE_DELAY);

				break;
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	aa ef       	ldi	r26, 0xFA	; 250
    1952:	b3 e4       	ldi	r27, 0x43	; 67
    1954:	8a 8b       	std	Y+18, r24	; 0x12
    1956:	9b 8b       	std	Y+19, r25	; 0x13
    1958:	ac 8b       	std	Y+20, r26	; 0x14
    195a:	bd 8b       	std	Y+21, r27	; 0x15
    195c:	8e 01       	movw	r16, r28

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    195e:	0a 59       	subi	r16, 0x9A	; 154
    1960:	1f 4f       	sbci	r17, 0xFF	; 255
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	4a ef       	ldi	r20, 0xFA	; 250
    1968:	54 e4       	ldi	r21, 0x44	; 68
    196a:	6a 89       	ldd	r22, Y+18	; 0x12
    196c:	7b 89       	ldd	r23, Y+19	; 0x13
    196e:	8c 89       	ldd	r24, Y+20	; 0x14
    1970:	9d 89       	ldd	r25, Y+21	; 0x15
    1972:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	f8 01       	movw	r30, r16
    197c:	80 83       	st	Z, r24
    197e:	91 83       	std	Z+1, r25	; 0x01
    1980:	a2 83       	std	Z+2, r26	; 0x02
    1982:	b3 83       	std	Z+3, r27	; 0x03
    1984:	ce 01       	movw	r24, r28
	if (__tmp < 1.0)
    1986:	8a 59       	subi	r24, 0x9A	; 154
    1988:	9f 4f       	sbci	r25, 0xFF	; 255
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e8       	ldi	r20, 0x80	; 128
    1990:	5f e3       	ldi	r21, 0x3F	; 63
    1992:	fc 01       	movw	r30, r24
    1994:	60 81       	ld	r22, Z
    1996:	71 81       	ldd	r23, Z+1	; 0x01
    1998:	82 81       	ldd	r24, Z+2	; 0x02
    199a:	93 81       	ldd	r25, Z+3	; 0x03
    199c:	0e 94 de 19 	call	0x33bc	; 0x33bc <__cmpsf2>
    19a0:	88 23       	and	r24, r24
    19a2:	4c f4       	brge	.+18     	; 0x19b6 <_ZL13decodeCommandv+0x95a>
    19a4:	ce 01       	movw	r24, r28
		__ticks = 1;
    19a6:	86 59       	subi	r24, 0x96	; 150
    19a8:	9f 4f       	sbci	r25, 0xFF	; 255
    19aa:	21 e0       	ldi	r18, 0x01	; 1
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	fc 01       	movw	r30, r24
    19b0:	31 83       	std	Z+1, r19	; 0x01
    19b2:	20 83       	st	Z, r18
    19b4:	69 c0       	rjmp	.+210    	; 0x1a88 <_ZL13decodeCommandv+0xa2c>
    19b6:	ce 01       	movw	r24, r28
	else if (__tmp > 65535)
    19b8:	8a 59       	subi	r24, 0x9A	; 154
    19ba:	9f 4f       	sbci	r25, 0xFF	; 255
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	3f ef       	ldi	r19, 0xFF	; 255
    19c0:	4f e7       	ldi	r20, 0x7F	; 127
    19c2:	57 e4       	ldi	r21, 0x47	; 71
    19c4:	fc 01       	movw	r30, r24
    19c6:	60 81       	ld	r22, Z
    19c8:	71 81       	ldd	r23, Z+1	; 0x01
    19ca:	82 81       	ldd	r24, Z+2	; 0x02
    19cc:	93 81       	ldd	r25, Z+3	; 0x03
    19ce:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__gesf2>
    19d2:	18 16       	cp	r1, r24
    19d4:	0c f0       	brlt	.+2      	; 0x19d8 <_ZL13decodeCommandv+0x97c>
    19d6:	46 c0       	rjmp	.+140    	; 0x1a64 <_ZL13decodeCommandv+0xa08>
    19d8:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e2       	ldi	r20, 0x20	; 32
    19de:	51 e4       	ldi	r21, 0x41	; 65
    19e0:	6a 89       	ldd	r22, Y+18	; 0x12
    19e2:	7b 89       	ldd	r23, Y+19	; 0x13
    19e4:	8c 89       	ldd	r24, Y+20	; 0x14
    19e6:	9d 89       	ldd	r25, Y+21	; 0x15
    19e8:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	8e 01       	movw	r16, r28
    19f2:	06 59       	subi	r16, 0x96	; 150
    19f4:	1f 4f       	sbci	r17, 0xFF	; 255
    19f6:	bc 01       	movw	r22, r24
    19f8:	cd 01       	movw	r24, r26
    19fa:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	f8 01       	movw	r30, r16
    1a04:	91 83       	std	Z+1, r25	; 0x01
    1a06:	80 83       	st	Z, r24
    1a08:	ce 01       	movw	r24, r28
		while(__ticks)
    1a0a:	86 59       	subi	r24, 0x96	; 150
    1a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0e:	fc 01       	movw	r30, r24
    1a10:	80 81       	ld	r24, Z
    1a12:	91 81       	ldd	r25, Z+1	; 0x01
    1a14:	89 2b       	or	r24, r25
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <_ZL13decodeCommandv+0x9be>
    1a18:	51 c0       	rjmp	.+162    	; 0x1abc <_ZL13decodeCommandv+0xa60>
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	84 59       	subi	r24, 0x94	; 148
    1a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a20:	28 ec       	ldi	r18, 0xC8	; 200
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	fc 01       	movw	r30, r24
    1a26:	31 83       	std	Z+1, r19	; 0x01
    1a28:	20 83       	st	Z, r18
    1a2a:	ce 01       	movw	r24, r28
    1a2c:	84 59       	subi	r24, 0x94	; 148
    1a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a30:	fc 01       	movw	r30, r24
    1a32:	80 81       	ld	r24, Z
    1a34:	91 81       	ldd	r25, Z+1	; 0x01
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	f1 f7       	brne	.-4      	; 0x1a36 <_ZL13decodeCommandv+0x9da>
    1a3a:	9e 01       	movw	r18, r28
    1a3c:	24 59       	subi	r18, 0x94	; 148
    1a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a40:	f9 01       	movw	r30, r18
    1a42:	91 83       	std	Z+1, r25	; 0x01
    1a44:	80 83       	st	Z, r24
    1a46:	ce 01       	movw	r24, r28
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a48:	86 59       	subi	r24, 0x96	; 150
    1a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4c:	9e 01       	movw	r18, r28
    1a4e:	26 59       	subi	r18, 0x96	; 150
    1a50:	3f 4f       	sbci	r19, 0xFF	; 255
    1a52:	f9 01       	movw	r30, r18
    1a54:	20 81       	ld	r18, Z
    1a56:	31 81       	ldd	r19, Z+1	; 0x01
    1a58:	21 50       	subi	r18, 0x01	; 1
    1a5a:	31 09       	sbc	r19, r1
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	31 83       	std	Z+1, r19	; 0x01
    1a60:	20 83       	st	Z, r18
    1a62:	d2 cf       	rjmp	.-92     	; 0x1a08 <_ZL13decodeCommandv+0x9ac>
    1a64:	8e 01       	movw	r16, r28
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a66:	06 59       	subi	r16, 0x96	; 150
    1a68:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6a:	ce 01       	movw	r24, r28
    1a6c:	8a 59       	subi	r24, 0x9A	; 154
    1a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a70:	fc 01       	movw	r30, r24
    1a72:	60 81       	ld	r22, Z
    1a74:	71 81       	ldd	r23, Z+1	; 0x01
    1a76:	82 81       	ldd	r24, Z+2	; 0x02
    1a78:	93 81       	ldd	r25, Z+3	; 0x03
    1a7a:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	f8 01       	movw	r30, r16
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	80 83       	st	Z, r24
    1a88:	ce 01       	movw	r24, r28
    1a8a:	82 59       	subi	r24, 0x92	; 146
    1a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8e:	9e 01       	movw	r18, r28
    1a90:	26 59       	subi	r18, 0x96	; 150
    1a92:	3f 4f       	sbci	r19, 0xFF	; 255
    1a94:	f9 01       	movw	r30, r18
    1a96:	20 81       	ld	r18, Z
    1a98:	31 81       	ldd	r19, Z+1	; 0x01
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	31 83       	std	Z+1, r19	; 0x01
    1a9e:	20 83       	st	Z, r18
    1aa0:	ce 01       	movw	r24, r28
    1aa2:	82 59       	subi	r24, 0x92	; 146
    1aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	80 81       	ld	r24, Z
    1aaa:	91 81       	ldd	r25, Z+1	; 0x01
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <_ZL13decodeCommandv+0xa50>
    1ab0:	9e 01       	movw	r18, r28
    1ab2:	22 59       	subi	r18, 0x92	; 146
    1ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab6:	f9 01       	movw	r30, r18
    1ab8:	91 83       	std	Z+1, r25	; 0x01
    1aba:	80 83       	st	Z, r24
    1abc:	81 e0       	ldi	r24, 0x01	; 1
			}
			
			case REMOTE_RIGHT: {											// Switch to low
				_delay_ms(LEVEL_UP_DELAY);
				levelFlag = true;											// True so is executed once if button hold
    1abe:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <_ZL9levelFlag>
    1ac2:	5c c2       	rjmp	.+1208   	; 0x1f7c <_ZL13decodeCommandv+0xf20>
				
				break;
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	aa ef       	ldi	r26, 0xFA	; 250
    1aca:	b3 e4       	ldi	r27, 0x43	; 67
    1acc:	8a 8f       	std	Y+26, r24	; 0x1a
    1ace:	9b 8f       	std	Y+27, r25	; 0x1b
    1ad0:	ac 8f       	std	Y+28, r26	; 0x1c
    1ad2:	bd 8f       	std	Y+29, r27	; 0x1d
    1ad4:	8e 01       	movw	r16, r28

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ad6:	00 59       	subi	r16, 0x90	; 144
    1ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	4a ef       	ldi	r20, 0xFA	; 250
    1ae0:	54 e4       	ldi	r21, 0x44	; 68
    1ae2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ae4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ae6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ae8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1aea:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	f8 01       	movw	r30, r16
    1af4:	80 83       	st	Z, r24
    1af6:	91 83       	std	Z+1, r25	; 0x01
    1af8:	a2 83       	std	Z+2, r26	; 0x02
    1afa:	b3 83       	std	Z+3, r27	; 0x03
    1afc:	ce 01       	movw	r24, r28
	if (__tmp < 1.0)
    1afe:	80 59       	subi	r24, 0x90	; 144
    1b00:	9f 4f       	sbci	r25, 0xFF	; 255
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	40 e8       	ldi	r20, 0x80	; 128
    1b08:	5f e3       	ldi	r21, 0x3F	; 63
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	60 81       	ld	r22, Z
    1b0e:	71 81       	ldd	r23, Z+1	; 0x01
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	93 81       	ldd	r25, Z+3	; 0x03
    1b14:	0e 94 de 19 	call	0x33bc	; 0x33bc <__cmpsf2>
    1b18:	88 23       	and	r24, r24
    1b1a:	4c f4       	brge	.+18     	; 0x1b2e <_ZL13decodeCommandv+0xad2>
    1b1c:	ce 01       	movw	r24, r28
		__ticks = 1;
    1b1e:	8c 58       	subi	r24, 0x8C	; 140
    1b20:	9f 4f       	sbci	r25, 0xFF	; 255
    1b22:	21 e0       	ldi	r18, 0x01	; 1
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	fc 01       	movw	r30, r24
    1b28:	31 83       	std	Z+1, r19	; 0x01
    1b2a:	20 83       	st	Z, r18
    1b2c:	69 c0       	rjmp	.+210    	; 0x1c00 <_ZL13decodeCommandv+0xba4>
    1b2e:	ce 01       	movw	r24, r28
	else if (__tmp > 65535)
    1b30:	80 59       	subi	r24, 0x90	; 144
    1b32:	9f 4f       	sbci	r25, 0xFF	; 255
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	3f ef       	ldi	r19, 0xFF	; 255
    1b38:	4f e7       	ldi	r20, 0x7F	; 127
    1b3a:	57 e4       	ldi	r21, 0x47	; 71
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	60 81       	ld	r22, Z
    1b40:	71 81       	ldd	r23, Z+1	; 0x01
    1b42:	82 81       	ldd	r24, Z+2	; 0x02
    1b44:	93 81       	ldd	r25, Z+3	; 0x03
    1b46:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__gesf2>
    1b4a:	18 16       	cp	r1, r24
    1b4c:	0c f0       	brlt	.+2      	; 0x1b50 <_ZL13decodeCommandv+0xaf4>
    1b4e:	46 c0       	rjmp	.+140    	; 0x1bdc <_ZL13decodeCommandv+0xb80>
    1b50:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e2       	ldi	r20, 0x20	; 32
    1b56:	51 e4       	ldi	r21, 0x41	; 65
    1b58:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b5a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b5e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b60:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	8e 01       	movw	r16, r28
    1b6a:	0c 58       	subi	r16, 0x8C	; 140
    1b6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6e:	bc 01       	movw	r22, r24
    1b70:	cd 01       	movw	r24, r26
    1b72:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	f8 01       	movw	r30, r16
    1b7c:	91 83       	std	Z+1, r25	; 0x01
    1b7e:	80 83       	st	Z, r24
    1b80:	ce 01       	movw	r24, r28
		while(__ticks)
    1b82:	8c 58       	subi	r24, 0x8C	; 140
    1b84:	9f 4f       	sbci	r25, 0xFF	; 255
    1b86:	fc 01       	movw	r30, r24
    1b88:	80 81       	ld	r24, Z
    1b8a:	91 81       	ldd	r25, Z+1	; 0x01
    1b8c:	89 2b       	or	r24, r25
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <_ZL13decodeCommandv+0xb36>
    1b90:	f2 c1       	rjmp	.+996    	; 0x1f76 <_ZL13decodeCommandv+0xf1a>
    1b92:	ce 01       	movw	r24, r28
    1b94:	8a 58       	subi	r24, 0x8A	; 138
    1b96:	9f 4f       	sbci	r25, 0xFF	; 255
    1b98:	28 ec       	ldi	r18, 0xC8	; 200
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	31 83       	std	Z+1, r19	; 0x01
    1ba0:	20 83       	st	Z, r18
    1ba2:	ce 01       	movw	r24, r28
    1ba4:	8a 58       	subi	r24, 0x8A	; 138
    1ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba8:	fc 01       	movw	r30, r24
    1baa:	80 81       	ld	r24, Z
    1bac:	91 81       	ldd	r25, Z+1	; 0x01
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <_ZL13decodeCommandv+0xb52>
    1bb2:	9e 01       	movw	r18, r28
    1bb4:	2a 58       	subi	r18, 0x8A	; 138
    1bb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb8:	f9 01       	movw	r30, r18
    1bba:	91 83       	std	Z+1, r25	; 0x01
    1bbc:	80 83       	st	Z, r24
    1bbe:	ce 01       	movw	r24, r28
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc0:	8c 58       	subi	r24, 0x8C	; 140
    1bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc4:	9e 01       	movw	r18, r28
    1bc6:	2c 58       	subi	r18, 0x8C	; 140
    1bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bca:	f9 01       	movw	r30, r18
    1bcc:	20 81       	ld	r18, Z
    1bce:	31 81       	ldd	r19, Z+1	; 0x01
    1bd0:	21 50       	subi	r18, 0x01	; 1
    1bd2:	31 09       	sbc	r19, r1
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	31 83       	std	Z+1, r19	; 0x01
    1bd8:	20 83       	st	Z, r18
    1bda:	d2 cf       	rjmp	.-92     	; 0x1b80 <_ZL13decodeCommandv+0xb24>
    1bdc:	8e 01       	movw	r16, r28
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bde:	0c 58       	subi	r16, 0x8C	; 140
    1be0:	1f 4f       	sbci	r17, 0xFF	; 255
    1be2:	ce 01       	movw	r24, r28
    1be4:	80 59       	subi	r24, 0x90	; 144
    1be6:	9f 4f       	sbci	r25, 0xFF	; 255
    1be8:	fc 01       	movw	r30, r24
    1bea:	60 81       	ld	r22, Z
    1bec:	71 81       	ldd	r23, Z+1	; 0x01
    1bee:	82 81       	ldd	r24, Z+2	; 0x02
    1bf0:	93 81       	ldd	r25, Z+3	; 0x03
    1bf2:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	f8 01       	movw	r30, r16
    1bfc:	91 83       	std	Z+1, r25	; 0x01
    1bfe:	80 83       	st	Z, r24
    1c00:	ce 01       	movw	r24, r28
    1c02:	88 58       	subi	r24, 0x88	; 136
    1c04:	9f 4f       	sbci	r25, 0xFF	; 255
    1c06:	9e 01       	movw	r18, r28
    1c08:	2c 58       	subi	r18, 0x8C	; 140
    1c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0c:	f9 01       	movw	r30, r18
    1c0e:	20 81       	ld	r18, Z
    1c10:	31 81       	ldd	r19, Z+1	; 0x01
    1c12:	fc 01       	movw	r30, r24
    1c14:	31 83       	std	Z+1, r19	; 0x01
    1c16:	20 83       	st	Z, r18
    1c18:	ce 01       	movw	r24, r28
    1c1a:	88 58       	subi	r24, 0x88	; 136
    1c1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c1e:	fc 01       	movw	r30, r24
    1c20:	80 81       	ld	r24, Z
    1c22:	91 81       	ldd	r25, Z+1	; 0x01
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <_ZL13decodeCommandv+0xbc8>
    1c28:	9e 01       	movw	r18, r28
    1c2a:	28 58       	subi	r18, 0x88	; 136
    1c2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2e:	f9 01       	movw	r30, r18
    1c30:	91 83       	std	Z+1, r25	; 0x01
    1c32:	80 83       	st	Z, r24
    1c34:	a0 c1       	rjmp	.+832    	; 0x1f76 <_ZL13decodeCommandv+0xf1a>
			}
			
			case REMOTE_MENU: {
				_delay_ms(PAIRING_LED_DELAY);
				
				break;
    1c36:	88 e2       	ldi	r24, 0x28	; 40
			}
			
			case REMOTE_PLAY_2: {
				TOGGLEBIT(OUTPUT_RELAYS_PORT,OUTPUT_RELAYS_MUTE);			// Toggle output
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	28 e2       	ldi	r18, 0x28	; 40
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	f9 01       	movw	r30, r18
    1c40:	30 81       	ld	r19, Z
    1c42:	21 e0       	ldi	r18, 0x01	; 1
    1c44:	23 27       	eor	r18, r19
    1c46:	fc 01       	movw	r30, r24
    1c48:	20 83       	st	Z, r18
    1c4a:	88 e2       	ldi	r24, 0x28	; 40
				TOGGLEBIT(OUTPUT_LED_PORT,OUTPUT_LED_MUTE);
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	28 e2       	ldi	r18, 0x28	; 40
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	f9 01       	movw	r30, r18
    1c54:	30 81       	ld	r19, Z
    1c56:	20 e1       	ldi	r18, 0x10	; 16
    1c58:	23 27       	eor	r18, r19
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	20 83       	st	Z, r18
    1c5e:	8b e2       	ldi	r24, 0x2B	; 43

				CLEARBIT(REMOTE_PORT,REMOTE_LED);
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	2b e2       	ldi	r18, 0x2B	; 43
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	f9 01       	movw	r30, r18
    1c68:	20 81       	ld	r18, Z
    1c6a:	2d 7f       	andi	r18, 0xFD	; 253
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	20 83       	st	Z, r18
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	a6 e1       	ldi	r26, 0x16	; 22
    1c76:	b3 e4       	ldi	r27, 0x43	; 67
    1c78:	8a a3       	std	Y+34, r24	; 0x22
    1c7a:	9b a3       	std	Y+35, r25	; 0x23
    1c7c:	ac a3       	std	Y+36, r26	; 0x24
    1c7e:	bd a3       	std	Y+37, r27	; 0x25
    1c80:	8e 01       	movw	r16, r28

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c82:	0c 57       	subi	r16, 0x7C	; 124
    1c84:	1f 4f       	sbci	r17, 0xFF	; 255
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	4a ef       	ldi	r20, 0xFA	; 250
    1c8c:	54 e4       	ldi	r21, 0x44	; 68
    1c8e:	6a a1       	ldd	r22, Y+34	; 0x22
    1c90:	7b a1       	ldd	r23, Y+35	; 0x23
    1c92:	8c a1       	ldd	r24, Y+36	; 0x24
    1c94:	9d a1       	ldd	r25, Y+37	; 0x25
    1c96:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	80 83       	st	Z, r24
    1ca2:	91 83       	std	Z+1, r25	; 0x01
    1ca4:	a2 83       	std	Z+2, r26	; 0x02
    1ca6:	b3 83       	std	Z+3, r27	; 0x03
    1ca8:	ce 01       	movw	r24, r28
	if (__tmp < 1.0)
    1caa:	8c 57       	subi	r24, 0x7C	; 124
    1cac:	9f 4f       	sbci	r25, 0xFF	; 255
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	40 e8       	ldi	r20, 0x80	; 128
    1cb4:	5f e3       	ldi	r21, 0x3F	; 63
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	60 81       	ld	r22, Z
    1cba:	71 81       	ldd	r23, Z+1	; 0x01
    1cbc:	82 81       	ldd	r24, Z+2	; 0x02
    1cbe:	93 81       	ldd	r25, Z+3	; 0x03
    1cc0:	0e 94 de 19 	call	0x33bc	; 0x33bc <__cmpsf2>
    1cc4:	88 23       	and	r24, r24
    1cc6:	4c f4       	brge	.+18     	; 0x1cda <_ZL13decodeCommandv+0xc7e>
    1cc8:	ce 01       	movw	r24, r28
		__ticks = 1;
    1cca:	88 57       	subi	r24, 0x78	; 120
    1ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cce:	21 e0       	ldi	r18, 0x01	; 1
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	31 83       	std	Z+1, r19	; 0x01
    1cd6:	20 83       	st	Z, r18
    1cd8:	69 c0       	rjmp	.+210    	; 0x1dac <_ZL13decodeCommandv+0xd50>
    1cda:	ce 01       	movw	r24, r28
	else if (__tmp > 65535)
    1cdc:	8c 57       	subi	r24, 0x7C	; 124
    1cde:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	3f ef       	ldi	r19, 0xFF	; 255
    1ce4:	4f e7       	ldi	r20, 0x7F	; 127
    1ce6:	57 e4       	ldi	r21, 0x47	; 71
    1ce8:	fc 01       	movw	r30, r24
    1cea:	60 81       	ld	r22, Z
    1cec:	71 81       	ldd	r23, Z+1	; 0x01
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__gesf2>
    1cf6:	18 16       	cp	r1, r24
    1cf8:	0c f0       	brlt	.+2      	; 0x1cfc <_ZL13decodeCommandv+0xca0>
    1cfa:	46 c0       	rjmp	.+140    	; 0x1d88 <_ZL13decodeCommandv+0xd2c>
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e2       	ldi	r20, 0x20	; 32
    1d02:	51 e4       	ldi	r21, 0x41	; 65
    1d04:	6a a1       	ldd	r22, Y+34	; 0x22
    1d06:	7b a1       	ldd	r23, Y+35	; 0x23
    1d08:	8c a1       	ldd	r24, Y+36	; 0x24
    1d0a:	9d a1       	ldd	r25, Y+37	; 0x25
    1d0c:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	8e 01       	movw	r16, r28
    1d16:	08 57       	subi	r16, 0x78	; 120
    1d18:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1a:	bc 01       	movw	r22, r24
    1d1c:	cd 01       	movw	r24, r26
    1d1e:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	f8 01       	movw	r30, r16
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	80 83       	st	Z, r24
    1d2c:	ce 01       	movw	r24, r28
		while(__ticks)
    1d2e:	88 57       	subi	r24, 0x78	; 120
    1d30:	9f 4f       	sbci	r25, 0xFF	; 255
    1d32:	fc 01       	movw	r30, r24
    1d34:	80 81       	ld	r24, Z
    1d36:	91 81       	ldd	r25, Z+1	; 0x01
    1d38:	89 2b       	or	r24, r25
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <_ZL13decodeCommandv+0xce2>
    1d3c:	51 c0       	rjmp	.+162    	; 0x1de0 <_ZL13decodeCommandv+0xd84>
    1d3e:	ce 01       	movw	r24, r28
    1d40:	86 57       	subi	r24, 0x76	; 118
    1d42:	9f 4f       	sbci	r25, 0xFF	; 255
    1d44:	28 ec       	ldi	r18, 0xC8	; 200
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	fc 01       	movw	r30, r24
    1d4a:	31 83       	std	Z+1, r19	; 0x01
    1d4c:	20 83       	st	Z, r18
    1d4e:	ce 01       	movw	r24, r28
    1d50:	86 57       	subi	r24, 0x76	; 118
    1d52:	9f 4f       	sbci	r25, 0xFF	; 255
    1d54:	fc 01       	movw	r30, r24
    1d56:	80 81       	ld	r24, Z
    1d58:	91 81       	ldd	r25, Z+1	; 0x01
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	f1 f7       	brne	.-4      	; 0x1d5a <_ZL13decodeCommandv+0xcfe>
    1d5e:	9e 01       	movw	r18, r28
    1d60:	26 57       	subi	r18, 0x76	; 118
    1d62:	3f 4f       	sbci	r19, 0xFF	; 255
    1d64:	f9 01       	movw	r30, r18
    1d66:	91 83       	std	Z+1, r25	; 0x01
    1d68:	80 83       	st	Z, r24
    1d6a:	ce 01       	movw	r24, r28
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6c:	88 57       	subi	r24, 0x78	; 120
    1d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d70:	9e 01       	movw	r18, r28
    1d72:	28 57       	subi	r18, 0x78	; 120
    1d74:	3f 4f       	sbci	r19, 0xFF	; 255
    1d76:	f9 01       	movw	r30, r18
    1d78:	20 81       	ld	r18, Z
    1d7a:	31 81       	ldd	r19, Z+1	; 0x01
    1d7c:	21 50       	subi	r18, 0x01	; 1
    1d7e:	31 09       	sbc	r19, r1
    1d80:	fc 01       	movw	r30, r24
    1d82:	31 83       	std	Z+1, r19	; 0x01
    1d84:	20 83       	st	Z, r18
    1d86:	d2 cf       	rjmp	.-92     	; 0x1d2c <_ZL13decodeCommandv+0xcd0>
    1d88:	8e 01       	movw	r16, r28
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8a:	08 57       	subi	r16, 0x78	; 120
    1d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8e:	ce 01       	movw	r24, r28
    1d90:	8c 57       	subi	r24, 0x7C	; 124
    1d92:	9f 4f       	sbci	r25, 0xFF	; 255
    1d94:	fc 01       	movw	r30, r24
    1d96:	60 81       	ld	r22, Z
    1d98:	71 81       	ldd	r23, Z+1	; 0x01
    1d9a:	82 81       	ldd	r24, Z+2	; 0x02
    1d9c:	93 81       	ldd	r25, Z+3	; 0x03
    1d9e:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	f8 01       	movw	r30, r16
    1da8:	91 83       	std	Z+1, r25	; 0x01
    1daa:	80 83       	st	Z, r24
    1dac:	ce 01       	movw	r24, r28
    1dae:	84 57       	subi	r24, 0x74	; 116
    1db0:	9f 4f       	sbci	r25, 0xFF	; 255
    1db2:	9e 01       	movw	r18, r28
    1db4:	28 57       	subi	r18, 0x78	; 120
    1db6:	3f 4f       	sbci	r19, 0xFF	; 255
    1db8:	f9 01       	movw	r30, r18
    1dba:	20 81       	ld	r18, Z
    1dbc:	31 81       	ldd	r19, Z+1	; 0x01
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	31 83       	std	Z+1, r19	; 0x01
    1dc2:	20 83       	st	Z, r18
    1dc4:	ce 01       	movw	r24, r28
    1dc6:	84 57       	subi	r24, 0x74	; 116
    1dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dca:	fc 01       	movw	r30, r24
    1dcc:	80 81       	ld	r24, Z
    1dce:	91 81       	ldd	r25, Z+1	; 0x01
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <_ZL13decodeCommandv+0xd74>
    1dd4:	9e 01       	movw	r18, r28
    1dd6:	24 57       	subi	r18, 0x74	; 116
    1dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dda:	f9 01       	movw	r30, r18
    1ddc:	91 83       	std	Z+1, r25	; 0x01
    1dde:	80 83       	st	Z, r24
    1de0:	8b e2       	ldi	r24, 0x2B	; 43
				_delay_ms(IR_LED_DELAY);
				SETBIT(REMOTE_PORT,REMOTE_LED);
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	2b e2       	ldi	r18, 0x2B	; 43
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	f9 01       	movw	r30, r18
    1dea:	30 81       	ld	r19, Z
    1dec:	22 e0       	ldi	r18, 0x02	; 2
    1dee:	23 2b       	or	r18, r19
    1df0:	fc 01       	movw	r30, r24
    1df2:	20 83       	st	Z, r18
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a8 ec       	ldi	r26, 0xC8	; 200
    1dfa:	b2 e4       	ldi	r27, 0x42	; 66
    1dfc:	8e 8f       	std	Y+30, r24	; 0x1e
    1dfe:	9f 8f       	std	Y+31, r25	; 0x1f
    1e00:	a8 a3       	std	Y+32, r26	; 0x20
    1e02:	b9 a3       	std	Y+33, r27	; 0x21
    1e04:	8e 01       	movw	r16, r28

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e06:	06 58       	subi	r16, 0x86	; 134
    1e08:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	4a ef       	ldi	r20, 0xFA	; 250
    1e10:	54 e4       	ldi	r21, 0x44	; 68
    1e12:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1e14:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1e16:	88 a1       	ldd	r24, Y+32	; 0x20
    1e18:	99 a1       	ldd	r25, Y+33	; 0x21
    1e1a:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	f8 01       	movw	r30, r16
    1e24:	80 83       	st	Z, r24
    1e26:	91 83       	std	Z+1, r25	; 0x01
    1e28:	a2 83       	std	Z+2, r26	; 0x02
    1e2a:	b3 83       	std	Z+3, r27	; 0x03
    1e2c:	ce 01       	movw	r24, r28
	if (__tmp < 1.0)
    1e2e:	86 58       	subi	r24, 0x86	; 134
    1e30:	9f 4f       	sbci	r25, 0xFF	; 255
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	40 e8       	ldi	r20, 0x80	; 128
    1e38:	5f e3       	ldi	r21, 0x3F	; 63
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	60 81       	ld	r22, Z
    1e3e:	71 81       	ldd	r23, Z+1	; 0x01
    1e40:	82 81       	ldd	r24, Z+2	; 0x02
    1e42:	93 81       	ldd	r25, Z+3	; 0x03
    1e44:	0e 94 de 19 	call	0x33bc	; 0x33bc <__cmpsf2>
    1e48:	88 23       	and	r24, r24
    1e4a:	4c f4       	brge	.+18     	; 0x1e5e <_ZL13decodeCommandv+0xe02>
    1e4c:	ce 01       	movw	r24, r28
		__ticks = 1;
    1e4e:	82 58       	subi	r24, 0x82	; 130
    1e50:	9f 4f       	sbci	r25, 0xFF	; 255
    1e52:	21 e0       	ldi	r18, 0x01	; 1
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	fc 01       	movw	r30, r24
    1e58:	31 83       	std	Z+1, r19	; 0x01
    1e5a:	20 83       	st	Z, r18
    1e5c:	69 c0       	rjmp	.+210    	; 0x1f30 <_ZL13decodeCommandv+0xed4>
    1e5e:	ce 01       	movw	r24, r28
	else if (__tmp > 65535)
    1e60:	86 58       	subi	r24, 0x86	; 134
    1e62:	9f 4f       	sbci	r25, 0xFF	; 255
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	3f ef       	ldi	r19, 0xFF	; 255
    1e68:	4f e7       	ldi	r20, 0x7F	; 127
    1e6a:	57 e4       	ldi	r21, 0x47	; 71
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	60 81       	ld	r22, Z
    1e70:	71 81       	ldd	r23, Z+1	; 0x01
    1e72:	82 81       	ldd	r24, Z+2	; 0x02
    1e74:	93 81       	ldd	r25, Z+3	; 0x03
    1e76:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__gesf2>
    1e7a:	18 16       	cp	r1, r24
    1e7c:	0c f0       	brlt	.+2      	; 0x1e80 <_ZL13decodeCommandv+0xe24>
    1e7e:	46 c0       	rjmp	.+140    	; 0x1f0c <_ZL13decodeCommandv+0xeb0>
    1e80:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e2       	ldi	r20, 0x20	; 32
    1e86:	51 e4       	ldi	r21, 0x41	; 65
    1e88:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1e8a:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1e8c:	88 a1       	ldd	r24, Y+32	; 0x20
    1e8e:	99 a1       	ldd	r25, Y+33	; 0x21
    1e90:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	8e 01       	movw	r16, r28
    1e9a:	02 58       	subi	r16, 0x82	; 130
    1e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9e:	bc 01       	movw	r22, r24
    1ea0:	cd 01       	movw	r24, r26
    1ea2:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	f8 01       	movw	r30, r16
    1eac:	91 83       	std	Z+1, r25	; 0x01
    1eae:	80 83       	st	Z, r24
    1eb0:	ce 01       	movw	r24, r28
		while(__ticks)
    1eb2:	82 58       	subi	r24, 0x82	; 130
    1eb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	80 81       	ld	r24, Z
    1eba:	91 81       	ldd	r25, Z+1	; 0x01
    1ebc:	89 2b       	or	r24, r25
    1ebe:	09 f4       	brne	.+2      	; 0x1ec2 <_ZL13decodeCommandv+0xe66>
    1ec0:	5c c0       	rjmp	.+184    	; 0x1f7a <_ZL13decodeCommandv+0xf1e>
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	80 58       	subi	r24, 0x80	; 128
    1ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec8:	28 ec       	ldi	r18, 0xC8	; 200
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	fc 01       	movw	r30, r24
    1ece:	31 83       	std	Z+1, r19	; 0x01
    1ed0:	20 83       	st	Z, r18
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	80 58       	subi	r24, 0x80	; 128
    1ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed8:	fc 01       	movw	r30, r24
    1eda:	80 81       	ld	r24, Z
    1edc:	91 81       	ldd	r25, Z+1	; 0x01
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	f1 f7       	brne	.-4      	; 0x1ede <_ZL13decodeCommandv+0xe82>
    1ee2:	9e 01       	movw	r18, r28
    1ee4:	20 58       	subi	r18, 0x80	; 128
    1ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee8:	f9 01       	movw	r30, r18
    1eea:	91 83       	std	Z+1, r25	; 0x01
    1eec:	80 83       	st	Z, r24
    1eee:	ce 01       	movw	r24, r28
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef0:	82 58       	subi	r24, 0x82	; 130
    1ef2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef4:	9e 01       	movw	r18, r28
    1ef6:	22 58       	subi	r18, 0x82	; 130
    1ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    1efa:	f9 01       	movw	r30, r18
    1efc:	20 81       	ld	r18, Z
    1efe:	31 81       	ldd	r19, Z+1	; 0x01
    1f00:	21 50       	subi	r18, 0x01	; 1
    1f02:	31 09       	sbc	r19, r1
    1f04:	fc 01       	movw	r30, r24
    1f06:	31 83       	std	Z+1, r19	; 0x01
    1f08:	20 83       	st	Z, r18
    1f0a:	d2 cf       	rjmp	.-92     	; 0x1eb0 <_ZL13decodeCommandv+0xe54>
    1f0c:	8e 01       	movw	r16, r28
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0e:	02 58       	subi	r16, 0x82	; 130
    1f10:	1f 4f       	sbci	r17, 0xFF	; 255
    1f12:	ce 01       	movw	r24, r28
    1f14:	86 58       	subi	r24, 0x86	; 134
    1f16:	9f 4f       	sbci	r25, 0xFF	; 255
    1f18:	fc 01       	movw	r30, r24
    1f1a:	60 81       	ld	r22, Z
    1f1c:	71 81       	ldd	r23, Z+1	; 0x01
    1f1e:	82 81       	ldd	r24, Z+2	; 0x02
    1f20:	93 81       	ldd	r25, Z+3	; 0x03
    1f22:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	f8 01       	movw	r30, r16
    1f2c:	91 83       	std	Z+1, r25	; 0x01
    1f2e:	80 83       	st	Z, r24
    1f30:	ce 01       	movw	r24, r28
    1f32:	8e 57       	subi	r24, 0x7E	; 126
    1f34:	9f 4f       	sbci	r25, 0xFF	; 255
    1f36:	9e 01       	movw	r18, r28
    1f38:	22 58       	subi	r18, 0x82	; 130
    1f3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3c:	f9 01       	movw	r30, r18
    1f3e:	20 81       	ld	r18, Z
    1f40:	31 81       	ldd	r19, Z+1	; 0x01
    1f42:	fc 01       	movw	r30, r24
    1f44:	31 83       	std	Z+1, r19	; 0x01
    1f46:	20 83       	st	Z, r18
    1f48:	ce 01       	movw	r24, r28
    1f4a:	8e 57       	subi	r24, 0x7E	; 126
    1f4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4e:	fc 01       	movw	r30, r24
    1f50:	80 81       	ld	r24, Z
    1f52:	91 81       	ldd	r25, Z+1	; 0x01
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <_ZL13decodeCommandv+0xef8>
    1f58:	9e 01       	movw	r18, r28
    1f5a:	2e 57       	subi	r18, 0x7E	; 126
    1f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f5e:	f9 01       	movw	r30, r18
    1f60:	91 83       	std	Z+1, r25	; 0x01
    1f62:	80 83       	st	Z, r24
    1f64:	0a c0       	rjmp	.+20     	; 0x1f7a <_ZL13decodeCommandv+0xf1e>
				
				_delay_ms(DEBOUNCE_DELAY);
				
				break;
    1f66:	00 00       	nop
				break;
			}
			
			default: {
				
				break;
    1f68:	09 c0       	rjmp	.+18     	; 0x1f7c <_ZL13decodeCommandv+0xf20>
    1f6a:	00 00       	nop
				_delay_ms(IR_LED_DELAY);
				SETBIT(REMOTE_PORT,REMOTE_LED);
				
				_delay_ms(DEBOUNCE_DELAY);
				
				break;
    1f6c:	07 c0       	rjmp	.+14     	; 0x1f7c <_ZL13decodeCommandv+0xf20>
    1f6e:	00 00       	nop
				_delay_ms(IR_LED_DELAY);
				SETBIT(REMOTE_PORT,REMOTE_LED);
				
				_delay_ms(DEBOUNCE_DELAY);
				
				break;
    1f70:	05 c0       	rjmp	.+10     	; 0x1f7c <_ZL13decodeCommandv+0xf20>
    1f72:	00 00       	nop
				_delay_ms(IR_LED_DELAY);
				SETBIT(REMOTE_PORT,REMOTE_LED);
				
				_delay_ms(DEBOUNCE_DELAY);

				break;
    1f74:	03 c0       	rjmp	.+6      	; 0x1f7c <_ZL13decodeCommandv+0xf20>
    1f76:	00 00       	nop
			}
			
			case REMOTE_MENU: {
				_delay_ms(PAIRING_LED_DELAY);
				
				break;
    1f78:	01 c0       	rjmp	.+2      	; 0x1f7c <_ZL13decodeCommandv+0xf20>
    1f7a:	00 00       	nop
				_delay_ms(IR_LED_DELAY);
				SETBIT(REMOTE_PORT,REMOTE_LED);
				
				_delay_ms(DEBOUNCE_DELAY);
				
				break;
    1f7c:	ce 01       	movw	r24, r28
				
				break;
			}
		}

		remaining = fifo.get(&command);
    1f7e:	82 57       	subi	r24, 0x72	; 114
    1f80:	9f 4f       	sbci	r25, 0xFF	; 255
    1f82:	bc 01       	movw	r22, r24
    1f84:	8b e7       	ldi	r24, 0x7B	; 123
    1f86:	91 e0       	ldi	r25, 0x01	; 1
    1f88:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_ZN4Fifo3getEPh>
    1f8c:	89 83       	std	Y+1, r24	; 0x01
    1f8e:	80 c8       	rjmp	.-3840   	; 0x1090 <_ZL13decodeCommandv+0x34>

static void decodeCommand(void) {
	uint8_t command = 0;
	bool remaining = fifo.get(&command);
	
	while (remaining) {
    1f90:	00 00       	nop
			}
		}

		remaining = fifo.get(&command);
	}
}
    1f92:	c2 57       	subi	r28, 0x72	; 114
    1f94:	df 4f       	sbci	r29, 0xFF	; 255
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	de bf       	out	0x3e, r29	; 62
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	cd bf       	out	0x3d, r28	; 61
    1fa0:	df 91       	pop	r29
    1fa2:	cf 91       	pop	r28
    1fa4:	1f 91       	pop	r17
    1fa6:	0f 91       	pop	r16
    1fa8:	08 95       	ret

00001faa <_ZL23remoteAlternateCommands2IR>:
    1faa:	0f 93       	push	r16

//-----------------------------------------------------------------------------

static void remoteAlternateCommands(IR ir) {
    1fac:	1f 93       	push	r17
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
    1fb6:	cc 54       	subi	r28, 0x4C	; 76
    1fb8:	d1 09       	sbc	r29, r1
    1fba:	0f b6       	in	r0, 0x3f	; 63
    1fbc:	f8 94       	cli
    1fbe:	de bf       	out	0x3e, r29	; 62
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	cd bf       	out	0x3d, r28	; 61
    1fc4:	9e 01       	movw	r18, r28
    1fc6:	28 5b       	subi	r18, 0xB8	; 184
    1fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fca:	f9 01       	movw	r30, r18
    1fcc:	40 83       	st	Z, r20
    1fce:	f9 01       	movw	r30, r18
    1fd0:	51 83       	std	Z+1, r21	; 0x01
    1fd2:	f9 01       	movw	r30, r18
    1fd4:	62 83       	std	Z+2, r22	; 0x02
    1fd6:	f9 01       	movw	r30, r18
    1fd8:	73 83       	std	Z+3, r23	; 0x03
    1fda:	f9 01       	movw	r30, r18
    1fdc:	84 83       	std	Z+4, r24	; 0x04
    1fde:	ce 01       	movw	r24, r28
	// Pairing mode!
	switch (ir.get_command()) {
    1fe0:	88 5b       	subi	r24, 0xB8	; 184
    1fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe4:	0e 94 93 05 	call	0xb26	; 0xb26 <_ZN2IR11get_commandEv>
    1fe8:	88 2f       	mov	r24, r24
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	83 30       	cpi	r24, 0x03	; 3
    1fee:	91 05       	cpc	r25, r1
    1ff0:	09 f4       	brne	.+2      	; 0x1ff4 <_ZL23remoteAlternateCommands2IR+0x4a>
    1ff2:	61 c2       	rjmp	.+1218   	; 0x24b6 <_ZL23remoteAlternateCommands2IR+0x50c>
    1ff4:	84 30       	cpi	r24, 0x04	; 4
    1ff6:	91 05       	cpc	r25, r1
    1ff8:	3c f4       	brge	.+14     	; 0x2008 <_ZL23remoteAlternateCommands2IR+0x5e>
    1ffa:	81 30       	cpi	r24, 0x01	; 1
    1ffc:	91 05       	cpc	r25, r1
    1ffe:	61 f0       	breq	.+24     	; 0x2018 <_ZL23remoteAlternateCommands2IR+0x6e>
    2000:	02 97       	sbiw	r24, 0x02	; 2
    2002:	09 f4       	brne	.+2      	; 0x2006 <_ZL23remoteAlternateCommands2IR+0x5c>
    2004:	3a c3       	rjmp	.+1652   	; 0x267a <_ZL23remoteAlternateCommands2IR+0x6d0>
    2006:	3e c3       	rjmp	.+1660   	; 0x2684 <_ZL23remoteAlternateCommands2IR+0x6da>
		
		//case REMOTE_BATTERY_W:
		//case REMOTE_BATTERY_S:
		
		default:
			break;
    2008:	85 30       	cpi	r24, 0x05	; 5

//-----------------------------------------------------------------------------

static void remoteAlternateCommands(IR ir) {
	// Pairing mode!
	switch (ir.get_command()) {
    200a:	91 05       	cpc	r25, r1
    200c:	09 f4       	brne	.+2      	; 0x2010 <_ZL23remoteAlternateCommands2IR+0x66>
    200e:	12 c1       	rjmp	.+548    	; 0x2234 <_ZL23remoteAlternateCommands2IR+0x28a>
    2010:	06 97       	sbiw	r24, 0x06	; 6
    2012:	09 f4       	brne	.+2      	; 0x2016 <_ZL23remoteAlternateCommands2IR+0x6c>
    2014:	b1 c1       	rjmp	.+866    	; 0x2378 <_ZL23remoteAlternateCommands2IR+0x3ce>
    2016:	36 c3       	rjmp	.+1644   	; 0x2684 <_ZL23remoteAlternateCommands2IR+0x6da>
		
		//case REMOTE_BATTERY_W:
		//case REMOTE_BATTERY_S:
		
		default:
			break;
    2018:	ce 01       	movw	r24, r28

static void remoteAlternateCommands(IR ir) {
	// Pairing mode!
	switch (ir.get_command()) {
		case REMOTE_PAIR: {
			if (eeprom.write(PAIR_ADDR, ir.get_id())) {
    201a:	88 5b       	subi	r24, 0xB8	; 184
    201c:	9f 4f       	sbci	r25, 0xFF	; 255
    201e:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN2IR6get_idEv>
    2022:	48 2f       	mov	r20, r24
    2024:	60 e0       	ldi	r22, 0x00	; 0
    2026:	70 e0       	ldi	r23, 0x00	; 0
    2028:	8e e8       	ldi	r24, 0x8E	; 142
    202a:	91 e0       	ldi	r25, 0x01	; 1
    202c:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_ZN6EEPROM5writeEjh>
    2030:	88 23       	and	r24, r24
    2032:	09 f4       	brne	.+2      	; 0x2036 <_ZL23remoteAlternateCommands2IR+0x8c>
    2034:	24 c3       	rjmp	.+1608   	; 0x267e <_ZL23remoteAlternateCommands2IR+0x6d4>
    2036:	19 82       	std	Y+1, r1	; 0x01
				uint8_t i = 0;
    2038:	19 82       	std	Y+1, r1	; 0x01
				for (i = 0; i < 2; ++i) {
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	82 30       	cpi	r24, 0x02	; 2
    203e:	08 f0       	brcs	.+2      	; 0x2042 <_ZL23remoteAlternateCommands2IR+0x98>
    2040:	1e c3       	rjmp	.+1596   	; 0x267e <_ZL23remoteAlternateCommands2IR+0x6d4>
    2042:	8b e2       	ldi	r24, 0x2B	; 43
					CLEARBIT(REMOTE_PORT,REMOTE_LED);			// LED on
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	2b e2       	ldi	r18, 0x2B	; 43
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	f9 01       	movw	r30, r18
    204c:	20 81       	ld	r18, Z
    204e:	2d 7f       	andi	r18, 0xFD	; 253
    2050:	fc 01       	movw	r30, r24
    2052:	20 83       	st	Z, r18
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	aa ef       	ldi	r26, 0xFA	; 250
    205a:	b3 e4       	ldi	r27, 0x43	; 67
    205c:	8e 83       	std	Y+6, r24	; 0x06
    205e:	9f 83       	std	Y+7, r25	; 0x07
    2060:	a8 87       	std	Y+8, r26	; 0x08
    2062:	b9 87       	std	Y+9, r27	; 0x09
    2064:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	4a ef       	ldi	r20, 0xFA	; 250
    206a:	54 e4       	ldi	r21, 0x44	; 68
    206c:	6e 81       	ldd	r22, Y+6	; 0x06
    206e:	7f 81       	ldd	r23, Y+7	; 0x07
    2070:	88 85       	ldd	r24, Y+8	; 0x08
    2072:	99 85       	ldd	r25, Y+9	; 0x09
    2074:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	88 a3       	std	Y+32, r24	; 0x20
    207e:	99 a3       	std	Y+33, r25	; 0x21
    2080:	aa a3       	std	Y+34, r26	; 0x22
    2082:	bb a3       	std	Y+35, r27	; 0x23
    2084:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e8       	ldi	r20, 0x80	; 128
    208a:	5f e3       	ldi	r21, 0x3F	; 63
    208c:	68 a1       	ldd	r22, Y+32	; 0x20
    208e:	79 a1       	ldd	r23, Y+33	; 0x21
    2090:	8a a1       	ldd	r24, Y+34	; 0x22
    2092:	9b a1       	ldd	r25, Y+35	; 0x23
    2094:	0e 94 de 19 	call	0x33bc	; 0x33bc <__cmpsf2>
    2098:	88 23       	and	r24, r24
    209a:	2c f4       	brge	.+10     	; 0x20a6 <_ZL23remoteAlternateCommands2IR+0xfc>
    209c:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	9d a3       	std	Y+37, r25	; 0x25
    20a2:	8c a3       	std	Y+36, r24	; 0x24
    20a4:	3e c0       	rjmp	.+124    	; 0x2122 <_ZL23remoteAlternateCommands2IR+0x178>
    20a6:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    20a8:	3f ef       	ldi	r19, 0xFF	; 255
    20aa:	4f e7       	ldi	r20, 0x7F	; 127
    20ac:	57 e4       	ldi	r21, 0x47	; 71
    20ae:	68 a1       	ldd	r22, Y+32	; 0x20
    20b0:	79 a1       	ldd	r23, Y+33	; 0x21
    20b2:	8a a1       	ldd	r24, Y+34	; 0x22
    20b4:	9b a1       	ldd	r25, Y+35	; 0x23
    20b6:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__gesf2>
    20ba:	18 16       	cp	r1, r24
    20bc:	44 f5       	brge	.+80     	; 0x210e <_ZL23remoteAlternateCommands2IR+0x164>
    20be:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	40 e2       	ldi	r20, 0x20	; 32
    20c4:	51 e4       	ldi	r21, 0x41	; 65
    20c6:	6e 81       	ldd	r22, Y+6	; 0x06
    20c8:	7f 81       	ldd	r23, Y+7	; 0x07
    20ca:	88 85       	ldd	r24, Y+8	; 0x08
    20cc:	99 85       	ldd	r25, Y+9	; 0x09
    20ce:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	bc 01       	movw	r22, r24
    20d8:	cd 01       	movw	r24, r26
    20da:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	9d a3       	std	Y+37, r25	; 0x25
    20e4:	8c a3       	std	Y+36, r24	; 0x24
    20e6:	8c a1       	ldd	r24, Y+36	; 0x24
		while(__ticks)
    20e8:	9d a1       	ldd	r25, Y+37	; 0x25
    20ea:	89 2b       	or	r24, r25
    20ec:	21 f1       	breq	.+72     	; 0x2136 <_ZL23remoteAlternateCommands2IR+0x18c>
    20ee:	88 ec       	ldi	r24, 0xC8	; 200
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	9f a3       	std	Y+39, r25	; 0x27
    20f4:	8e a3       	std	Y+38, r24	; 0x26
    20f6:	8e a1       	ldd	r24, Y+38	; 0x26
    20f8:	9f a1       	ldd	r25, Y+39	; 0x27
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <_ZL23remoteAlternateCommands2IR+0x150>
    20fe:	9f a3       	std	Y+39, r25	; 0x27
    2100:	8e a3       	std	Y+38, r24	; 0x26
    2102:	8c a1       	ldd	r24, Y+36	; 0x24
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2104:	9d a1       	ldd	r25, Y+37	; 0x25
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	9d a3       	std	Y+37, r25	; 0x25
    210a:	8c a3       	std	Y+36, r24	; 0x24
    210c:	ec cf       	rjmp	.-40     	; 0x20e6 <_ZL23remoteAlternateCommands2IR+0x13c>
    210e:	68 a1       	ldd	r22, Y+32	; 0x20
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2110:	79 a1       	ldd	r23, Y+33	; 0x21
    2112:	8a a1       	ldd	r24, Y+34	; 0x22
    2114:	9b a1       	ldd	r25, Y+35	; 0x23
    2116:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	9d a3       	std	Y+37, r25	; 0x25
    2120:	8c a3       	std	Y+36, r24	; 0x24
    2122:	8c a1       	ldd	r24, Y+36	; 0x24
    2124:	9d a1       	ldd	r25, Y+37	; 0x25
    2126:	99 a7       	std	Y+41, r25	; 0x29
    2128:	88 a7       	std	Y+40, r24	; 0x28
    212a:	88 a5       	ldd	r24, Y+40	; 0x28
    212c:	99 a5       	ldd	r25, Y+41	; 0x29
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <_ZL23remoteAlternateCommands2IR+0x184>
    2132:	99 a7       	std	Y+41, r25	; 0x29
    2134:	88 a7       	std	Y+40, r24	; 0x28
    2136:	8b e2       	ldi	r24, 0x2B	; 43
					_delay_ms(PAIRING_LED_DELAY);
					SETBIT(REMOTE_PORT,REMOTE_LED);				// LED off
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	2b e2       	ldi	r18, 0x2B	; 43
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	f9 01       	movw	r30, r18
    2140:	30 81       	ld	r19, Z
    2142:	22 e0       	ldi	r18, 0x02	; 2
    2144:	23 2b       	or	r18, r19
    2146:	fc 01       	movw	r30, r24
    2148:	20 83       	st	Z, r18
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	aa ef       	ldi	r26, 0xFA	; 250
    2150:	b3 e4       	ldi	r27, 0x43	; 67
    2152:	8a 8b       	std	Y+18, r24	; 0x12
    2154:	9b 8b       	std	Y+19, r25	; 0x13
    2156:	ac 8b       	std	Y+20, r26	; 0x14
    2158:	bd 8b       	std	Y+21, r27	; 0x15
    215a:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	4a ef       	ldi	r20, 0xFA	; 250
    2160:	54 e4       	ldi	r21, 0x44	; 68
    2162:	6a 89       	ldd	r22, Y+18	; 0x12
    2164:	7b 89       	ldd	r23, Y+19	; 0x13
    2166:	8c 89       	ldd	r24, Y+20	; 0x14
    2168:	9d 89       	ldd	r25, Y+21	; 0x15
    216a:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	8e 8b       	std	Y+22, r24	; 0x16
    2174:	9f 8b       	std	Y+23, r25	; 0x17
    2176:	a8 8f       	std	Y+24, r26	; 0x18
    2178:	b9 8f       	std	Y+25, r27	; 0x19
    217a:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	40 e8       	ldi	r20, 0x80	; 128
    2180:	5f e3       	ldi	r21, 0x3F	; 63
    2182:	6e 89       	ldd	r22, Y+22	; 0x16
    2184:	7f 89       	ldd	r23, Y+23	; 0x17
    2186:	88 8d       	ldd	r24, Y+24	; 0x18
    2188:	99 8d       	ldd	r25, Y+25	; 0x19
    218a:	0e 94 de 19 	call	0x33bc	; 0x33bc <__cmpsf2>
    218e:	88 23       	and	r24, r24
    2190:	2c f4       	brge	.+10     	; 0x219c <_ZL23remoteAlternateCommands2IR+0x1f2>
    2192:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9b 8f       	std	Y+27, r25	; 0x1b
    2198:	8a 8f       	std	Y+26, r24	; 0x1a
    219a:	3e c0       	rjmp	.+124    	; 0x2218 <_ZL23remoteAlternateCommands2IR+0x26e>
    219c:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    219e:	3f ef       	ldi	r19, 0xFF	; 255
    21a0:	4f e7       	ldi	r20, 0x7F	; 127
    21a2:	57 e4       	ldi	r21, 0x47	; 71
    21a4:	6e 89       	ldd	r22, Y+22	; 0x16
    21a6:	7f 89       	ldd	r23, Y+23	; 0x17
    21a8:	88 8d       	ldd	r24, Y+24	; 0x18
    21aa:	99 8d       	ldd	r25, Y+25	; 0x19
    21ac:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__gesf2>
    21b0:	18 16       	cp	r1, r24
    21b2:	44 f5       	brge	.+80     	; 0x2204 <_ZL23remoteAlternateCommands2IR+0x25a>
    21b4:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e2       	ldi	r20, 0x20	; 32
    21ba:	51 e4       	ldi	r21, 0x41	; 65
    21bc:	6a 89       	ldd	r22, Y+18	; 0x12
    21be:	7b 89       	ldd	r23, Y+19	; 0x13
    21c0:	8c 89       	ldd	r24, Y+20	; 0x14
    21c2:	9d 89       	ldd	r25, Y+21	; 0x15
    21c4:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	bc 01       	movw	r22, r24
    21ce:	cd 01       	movw	r24, r26
    21d0:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	9b 8f       	std	Y+27, r25	; 0x1b
    21da:	8a 8f       	std	Y+26, r24	; 0x1a
    21dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
		while(__ticks)
    21de:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21e0:	89 2b       	or	r24, r25
    21e2:	21 f1       	breq	.+72     	; 0x222c <_ZL23remoteAlternateCommands2IR+0x282>
    21e4:	88 ec       	ldi	r24, 0xC8	; 200
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	9d 8f       	std	Y+29, r25	; 0x1d
    21ea:	8c 8f       	std	Y+28, r24	; 0x1c
    21ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <_ZL23remoteAlternateCommands2IR+0x246>
    21f4:	9d 8f       	std	Y+29, r25	; 0x1d
    21f6:	8c 8f       	std	Y+28, r24	; 0x1c
    21f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	9b 8f       	std	Y+27, r25	; 0x1b
    2200:	8a 8f       	std	Y+26, r24	; 0x1a
    2202:	ec cf       	rjmp	.-40     	; 0x21dc <_ZL23remoteAlternateCommands2IR+0x232>
    2204:	6e 89       	ldd	r22, Y+22	; 0x16
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2206:	7f 89       	ldd	r23, Y+23	; 0x17
    2208:	88 8d       	ldd	r24, Y+24	; 0x18
    220a:	99 8d       	ldd	r25, Y+25	; 0x19
    220c:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9b 8f       	std	Y+27, r25	; 0x1b
    2216:	8a 8f       	std	Y+26, r24	; 0x1a
    2218:	8a 8d       	ldd	r24, Y+26	; 0x1a
    221a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    221c:	9f 8f       	std	Y+31, r25	; 0x1f
    221e:	8e 8f       	std	Y+30, r24	; 0x1e
    2220:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2222:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <_ZL23remoteAlternateCommands2IR+0x27a>
    2228:	9f 8f       	std	Y+31, r25	; 0x1f
    222a:	8e 8f       	std	Y+30, r24	; 0x1e
    222c:	89 81       	ldd	r24, Y+1	; 0x01
	// Pairing mode!
	switch (ir.get_command()) {
		case REMOTE_PAIR: {
			if (eeprom.write(PAIR_ADDR, ir.get_id())) {
				uint8_t i = 0;
				for (i = 0; i < 2; ++i) {
    222e:	8f 5f       	subi	r24, 0xFF	; 255
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	03 cf       	rjmp	.-506    	; 0x203a <_ZL23remoteAlternateCommands2IR+0x90>
    2234:	88 e2       	ldi	r24, 0x28	; 40
			//}
			break;
		}

		case REMOTE_UP: {
			CLEARBIT(OUTPUT_RELAYS_PORT,OUTPUT_RELAYS_MUTE);			// Mute off
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	28 e2       	ldi	r18, 0x28	; 40
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	f9 01       	movw	r30, r18
    223e:	20 81       	ld	r18, Z
    2240:	2e 7f       	andi	r18, 0xFE	; 254
    2242:	fc 01       	movw	r30, r24
    2244:	20 83       	st	Z, r18
    2246:	88 e2       	ldi	r24, 0x28	; 40
			CLEARBIT(OUTPUT_LED_PORT,OUTPUT_LED_MUTE);
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	28 e2       	ldi	r18, 0x28	; 40
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	f9 01       	movw	r30, r18
    2250:	20 81       	ld	r18, Z
    2252:	2f 7e       	andi	r18, 0xEF	; 239
    2254:	fc 01       	movw	r30, r24
    2256:	20 83       	st	Z, r18
			
			CLEARBIT(REMOTE_PORT,REMOTE_LED);
    2258:	8b e2       	ldi	r24, 0x2B	; 43
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	2b e2       	ldi	r18, 0x2B	; 43
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	f9 01       	movw	r30, r18
    2262:	20 81       	ld	r18, Z
    2264:	2d 7f       	andi	r18, 0xFD	; 253
    2266:	fc 01       	movw	r30, r24
    2268:	20 83       	st	Z, r18

			//if (!VolLimits_Up() && ((OUTPUT_LED_PIN & 0xe0) != OUTPUT_LED_HIGH)) {
				stepper.CW();
    226a:	85 e6       	ldi	r24, 0x65	; 101
    226c:	91 e0       	ldi	r25, 0x01	; 1
    226e:	67 d5       	rcall	.+2766   	; 0x2d3e <_ZN7Stepper2CWEv>
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	a8 ec       	ldi	r26, 0xC8	; 200
    2276:	b2 e4       	ldi	r27, 0x42	; 66
    2278:	8a 83       	std	Y+2, r24	; 0x02
    227a:	9b 83       	std	Y+3, r25	; 0x03
    227c:	ac 83       	std	Y+4, r26	; 0x04
    227e:	bd 83       	std	Y+5, r27	; 0x05
    2280:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	4a ef       	ldi	r20, 0xFA	; 250
    2286:	54 e4       	ldi	r21, 0x44	; 68
    2288:	6a 81       	ldd	r22, Y+2	; 0x02
    228a:	7b 81       	ldd	r23, Y+3	; 0x03
    228c:	8c 81       	ldd	r24, Y+4	; 0x04
    228e:	9d 81       	ldd	r25, Y+5	; 0x05
    2290:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	8a a7       	std	Y+42, r24	; 0x2a
    229a:	9b a7       	std	Y+43, r25	; 0x2b
    229c:	ac a7       	std	Y+44, r26	; 0x2c
    229e:	bd a7       	std	Y+45, r27	; 0x2d
    22a0:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e8       	ldi	r20, 0x80	; 128
    22a6:	5f e3       	ldi	r21, 0x3F	; 63
    22a8:	6a a5       	ldd	r22, Y+42	; 0x2a
    22aa:	7b a5       	ldd	r23, Y+43	; 0x2b
    22ac:	8c a5       	ldd	r24, Y+44	; 0x2c
    22ae:	9d a5       	ldd	r25, Y+45	; 0x2d
    22b0:	0e 94 de 19 	call	0x33bc	; 0x33bc <__cmpsf2>
    22b4:	88 23       	and	r24, r24
    22b6:	2c f4       	brge	.+10     	; 0x22c2 <_ZL23remoteAlternateCommands2IR+0x318>
    22b8:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	9f a7       	std	Y+47, r25	; 0x2f
    22be:	8e a7       	std	Y+46, r24	; 0x2e
    22c0:	3e c0       	rjmp	.+124    	; 0x233e <_ZL23remoteAlternateCommands2IR+0x394>
    22c2:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    22c4:	3f ef       	ldi	r19, 0xFF	; 255
    22c6:	4f e7       	ldi	r20, 0x7F	; 127
    22c8:	57 e4       	ldi	r21, 0x47	; 71
    22ca:	6a a5       	ldd	r22, Y+42	; 0x2a
    22cc:	7b a5       	ldd	r23, Y+43	; 0x2b
    22ce:	8c a5       	ldd	r24, Y+44	; 0x2c
    22d0:	9d a5       	ldd	r25, Y+45	; 0x2d
    22d2:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__gesf2>
    22d6:	18 16       	cp	r1, r24
    22d8:	44 f5       	brge	.+80     	; 0x232a <_ZL23remoteAlternateCommands2IR+0x380>
    22da:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e2       	ldi	r20, 0x20	; 32
    22e0:	51 e4       	ldi	r21, 0x41	; 65
    22e2:	6a 81       	ldd	r22, Y+2	; 0x02
    22e4:	7b 81       	ldd	r23, Y+3	; 0x03
    22e6:	8c 81       	ldd	r24, Y+4	; 0x04
    22e8:	9d 81       	ldd	r25, Y+5	; 0x05
    22ea:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	bc 01       	movw	r22, r24
    22f4:	cd 01       	movw	r24, r26
    22f6:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	9f a7       	std	Y+47, r25	; 0x2f
    2300:	8e a7       	std	Y+46, r24	; 0x2e
    2302:	8e a5       	ldd	r24, Y+46	; 0x2e
		while(__ticks)
    2304:	9f a5       	ldd	r25, Y+47	; 0x2f
    2306:	89 2b       	or	r24, r25
    2308:	21 f1       	breq	.+72     	; 0x2352 <_ZL23remoteAlternateCommands2IR+0x3a8>
    230a:	88 ec       	ldi	r24, 0xC8	; 200
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	99 ab       	std	Y+49, r25	; 0x31
    2310:	88 ab       	std	Y+48, r24	; 0x30
    2312:	88 a9       	ldd	r24, Y+48	; 0x30
    2314:	99 a9       	ldd	r25, Y+49	; 0x31
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <_ZL23remoteAlternateCommands2IR+0x36c>
    231a:	99 ab       	std	Y+49, r25	; 0x31
    231c:	88 ab       	std	Y+48, r24	; 0x30
    231e:	8e a5       	ldd	r24, Y+46	; 0x2e
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2320:	9f a5       	ldd	r25, Y+47	; 0x2f
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	9f a7       	std	Y+47, r25	; 0x2f
    2326:	8e a7       	std	Y+46, r24	; 0x2e
    2328:	ec cf       	rjmp	.-40     	; 0x2302 <_ZL23remoteAlternateCommands2IR+0x358>
    232a:	6a a5       	ldd	r22, Y+42	; 0x2a
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232c:	7b a5       	ldd	r23, Y+43	; 0x2b
    232e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2330:	9d a5       	ldd	r25, Y+45	; 0x2d
    2332:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fixunssfsi>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	9f a7       	std	Y+47, r25	; 0x2f
    233c:	8e a7       	std	Y+46, r24	; 0x2e
    233e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2340:	9f a5       	ldd	r25, Y+47	; 0x2f
    2342:	9b ab       	std	Y+51, r25	; 0x33
    2344:	8a ab       	std	Y+50, r24	; 0x32
    2346:	8a a9       	ldd	r24, Y+50	; 0x32
    2348:	9b a9       	ldd	r25, Y+51	; 0x33
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	f1 f7       	brne	.-4      	; 0x234a <_ZL23remoteAlternateCommands2IR+0x3a0>
    234e:	9b ab       	std	Y+51, r25	; 0x33
    2350:	8a ab       	std	Y+50, r24	; 0x32
    2352:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <_ZL5count>
				_delay_ms(MOTOR_DELAY);
			//}
			
			count = 0;			// Reset sleep mode
    2356:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <_ZL5count+0x1>
    235a:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <_ZL5count+0x2>
    235e:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <_ZL5count+0x3>
    2362:	8b e2       	ldi	r24, 0x2B	; 43
			
			SETBIT(REMOTE_PORT,REMOTE_LED);
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	2b e2       	ldi	r18, 0x2B	; 43
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	f9 01       	movw	r30, r18
    236c:	30 81       	ld	r19, Z
    236e:	22 e0       	ldi	r18, 0x02	; 2
    2370:	23 2b       	or	r18, r19
    2372:	fc 01       	movw	r30, r24
    2374:	20 83       	st	Z, r18
    2376:	86 c1       	rjmp	.+780    	; 0x2684 <_ZL23remoteAlternateCommands2IR+0x6da>
			
			break;
    2378:	88 e2       	ldi	r24, 0x28	; 40
		}
		
		case REMOTE_DOWN: {
			CLEARBIT(OUTPUT_RELAYS_PORT,OUTPUT_RELAYS_MUTE);			// Mute off
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	28 e2       	ldi	r18, 0x28	; 40
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	f9 01       	movw	r30, r18
    2382:	20 81       	ld	r18, Z
    2384:	2e 7f       	andi	r18, 0xFE	; 254
    2386:	fc 01       	movw	r30, r24
    2388:	20 83       	st	Z, r18
    238a:	88 e2       	ldi	r24, 0x28	; 40
			CLEARBIT(OUTPUT_LED_PORT,OUTPUT_LED_MUTE);
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	28 e2       	ldi	r18, 0x28	; 40
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	f9 01       	movw	r30, r18
    2394:	20 81       	ld	r18, Z
    2396:	2f 7e       	andi	r18, 0xEF	; 239
    2398:	fc 01       	movw	r30, r24
    239a:	20 83       	st	Z, r18
			
			CLEARBIT(REMOTE_PORT,REMOTE_LED);
    239c:	8b e2       	ldi	r24, 0x2B	; 43
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	2b e2       	ldi	r18, 0x2B	; 43
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	f9 01       	movw	r30, r18
    23a6:	20 81       	ld	r18, Z
    23a8:	2d 7f       	andi	r18, 0xFD	; 253
    23aa:	fc 01       	movw	r30, r24
    23ac:	20 83       	st	Z, r18

			//if (!VolLimits_Down() && ((OUTPUT_LED_PIN & 0xe0) != OUTPUT_LED_LOW)) {
				stepper.CCW();
    23ae:	85 e6       	ldi	r24, 0x65	; 101
    23b0:	91 e0       	ldi	r25, 0x01	; 1
    23b2:	21 d6       	rcall	.+3138   	; 0x2ff6 <_ZN7Stepper3CCWEv>
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	a8 ec       	ldi	r26, 0xC8	; 200
    23ba:	b2 e4       	ldi	r27, 0x42	; 66
    23bc:	8a 87       	std	Y+10, r24	; 0x0a
    23be:	9b 87       	std	Y+11, r25	; 0x0b
    23c0:	ac 87       	std	Y+12, r26	; 0x0c
    23c2:	bd 87       	std	Y+13, r27	; 0x0d
    23c4:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	4a ef       	ldi	r20, 0xFA	; 250
    23ca:	54 e4       	ldi	r21, 0x44	; 68
    23cc:	6a 85       	ldd	r22, Y+10	; 0x0a
    23ce:	7b 85       	ldd	r23, Y+11	; 0x0b
    23d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    23d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    23d4:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	8c ab       	std	Y+52, r24	; 0x34
    23de:	9d ab       	std	Y+53, r25	; 0x35
    23e0:	ae ab       	std	Y+54, r26	; 0x36
    23e2:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 e8       	ldi	r20, 0x80	; 128
    23ea:	5f e3       	ldi	r21, 0x3F	; 63
    23ec:	6c a9       	ldd	r22, Y+52	; 0x34
    23ee:	7d a9       	ldd	r23, Y+53	; 0x35
    23f0:	8e a9       	ldd	r24, Y+54	; 0x36
    23f2:	9f a9       	ldd	r25, Y+55	; 0x37
    23f4:	e3 d7       	rcall	.+4038   	; 0x33bc <__cmpsf2>
    23f6:	88 23       	and	r24, r24
    23f8:	2c f4       	brge	.+10     	; 0x2404 <_ZL23remoteAlternateCommands2IR+0x45a>
    23fa:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	99 af       	std	Y+57, r25	; 0x39
    2400:	88 af       	std	Y+56, r24	; 0x38
    2402:	3c c0       	rjmp	.+120    	; 0x247c <_ZL23remoteAlternateCommands2IR+0x4d2>
    2404:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    2406:	3f ef       	ldi	r19, 0xFF	; 255
    2408:	4f e7       	ldi	r20, 0x7F	; 127
    240a:	57 e4       	ldi	r21, 0x47	; 71
    240c:	6c a9       	ldd	r22, Y+52	; 0x34
    240e:	7d a9       	ldd	r23, Y+53	; 0x35
    2410:	8e a9       	ldd	r24, Y+54	; 0x36
    2412:	9f a9       	ldd	r25, Y+55	; 0x37
    2414:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__gesf2>
    2418:	18 16       	cp	r1, r24
    241a:	3c f5       	brge	.+78     	; 0x246a <_ZL23remoteAlternateCommands2IR+0x4c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	40 e2       	ldi	r20, 0x20	; 32
    2422:	51 e4       	ldi	r21, 0x41	; 65
    2424:	6a 85       	ldd	r22, Y+10	; 0x0a
    2426:	7b 85       	ldd	r23, Y+11	; 0x0b
    2428:	8c 85       	ldd	r24, Y+12	; 0x0c
    242a:	9d 85       	ldd	r25, Y+13	; 0x0d
    242c:	0e 94 5f 1a 	call	0x34be	; 0x34be <__mulsf3>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	bc 01       	movw	r22, r24
    2436:	cd 01       	movw	r24, r26
    2438:	c5 d7       	rcall	.+3978   	; 0x33c4 <__fixunssfsi>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	99 af       	std	Y+57, r25	; 0x39
    2440:	88 af       	std	Y+56, r24	; 0x38
    2442:	88 ad       	ldd	r24, Y+56	; 0x38
		while(__ticks)
    2444:	99 ad       	ldd	r25, Y+57	; 0x39
    2446:	89 2b       	or	r24, r25
    2448:	19 f1       	breq	.+70     	; 0x2490 <_ZL23remoteAlternateCommands2IR+0x4e6>
    244a:	88 ec       	ldi	r24, 0xC8	; 200
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	9b af       	std	Y+59, r25	; 0x3b
    2450:	8a af       	std	Y+58, r24	; 0x3a
    2452:	8a ad       	ldd	r24, Y+58	; 0x3a
    2454:	9b ad       	ldd	r25, Y+59	; 0x3b
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	f1 f7       	brne	.-4      	; 0x2456 <_ZL23remoteAlternateCommands2IR+0x4ac>
    245a:	9b af       	std	Y+59, r25	; 0x3b
    245c:	8a af       	std	Y+58, r24	; 0x3a
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245e:	88 ad       	ldd	r24, Y+56	; 0x38
    2460:	99 ad       	ldd	r25, Y+57	; 0x39
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	99 af       	std	Y+57, r25	; 0x39
    2466:	88 af       	std	Y+56, r24	; 0x38
    2468:	ec cf       	rjmp	.-40     	; 0x2442 <_ZL23remoteAlternateCommands2IR+0x498>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246a:	6c a9       	ldd	r22, Y+52	; 0x34
    246c:	7d a9       	ldd	r23, Y+53	; 0x35
    246e:	8e a9       	ldd	r24, Y+54	; 0x36
    2470:	9f a9       	ldd	r25, Y+55	; 0x37
    2472:	a8 d7       	rcall	.+3920   	; 0x33c4 <__fixunssfsi>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	99 af       	std	Y+57, r25	; 0x39
    247a:	88 af       	std	Y+56, r24	; 0x38
    247c:	88 ad       	ldd	r24, Y+56	; 0x38
    247e:	99 ad       	ldd	r25, Y+57	; 0x39
    2480:	9d af       	std	Y+61, r25	; 0x3d
    2482:	8c af       	std	Y+60, r24	; 0x3c
    2484:	8c ad       	ldd	r24, Y+60	; 0x3c
    2486:	9d ad       	ldd	r25, Y+61	; 0x3d
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	f1 f7       	brne	.-4      	; 0x2488 <_ZL23remoteAlternateCommands2IR+0x4de>
    248c:	9d af       	std	Y+61, r25	; 0x3d
    248e:	8c af       	std	Y+60, r24	; 0x3c
    2490:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <_ZL5count>
				_delay_ms(MOTOR_DELAY);
			//}
			
			count = 0;			// Reset sleep mode
    2494:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <_ZL5count+0x1>
    2498:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <_ZL5count+0x2>
    249c:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <_ZL5count+0x3>
    24a0:	8b e2       	ldi	r24, 0x2B	; 43
			
			SETBIT(REMOTE_PORT,REMOTE_LED);
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	2b e2       	ldi	r18, 0x2B	; 43
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	f9 01       	movw	r30, r18
    24aa:	30 81       	ld	r19, Z
    24ac:	22 e0       	ldi	r18, 0x02	; 2
    24ae:	23 2b       	or	r18, r19
    24b0:	fc 01       	movw	r30, r24
    24b2:	20 83       	st	Z, r18
    24b4:	e7 c0       	rjmp	.+462    	; 0x2684 <_ZL23remoteAlternateCommands2IR+0x6da>
			
			break;
    24b6:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <_ZL9levelFlag>
		}
		
		case REMOTE_RIGHT: {
			if (!levelFlag) {											// Leave if already executed
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	89 27       	eor	r24, r25
    24be:	88 23       	and	r24, r24
    24c0:	09 f0       	breq	.+2      	; 0x24c4 <_ZL23remoteAlternateCommands2IR+0x51a>
    24c2:	df c0       	rjmp	.+446    	; 0x2682 <_ZL23remoteAlternateCommands2IR+0x6d8>
    24c4:	86 e2       	ldi	r24, 0x26	; 38
				break;
			}
			
			switch(OUTPUT_LED_PIN & 0xe0) {
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	fc 01       	movw	r30, r24
    24ca:	80 81       	ld	r24, Z
    24cc:	88 2f       	mov	r24, r24
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	80 7e       	andi	r24, 0xE0	; 224
    24d2:	99 27       	eor	r25, r25
    24d4:	80 34       	cpi	r24, 0x40	; 64
    24d6:	91 05       	cpc	r25, r1
    24d8:	31 f0       	breq	.+12     	; 0x24e6 <_ZL23remoteAlternateCommands2IR+0x53c>
    24da:	80 38       	cpi	r24, 0x80	; 128
    24dc:	91 05       	cpc	r25, r1
    24de:	29 f0       	breq	.+10     	; 0x24ea <_ZL23remoteAlternateCommands2IR+0x540>
    24e0:	80 97       	sbiw	r24, 0x20	; 32

					break;
				}

				default: {
					break;
    24e2:	29 f0       	breq	.+10     	; 0x24ee <_ZL23remoteAlternateCommands2IR+0x544>

					break;
				}

				case OUTPUT_LED_MED: {									// Switch to high
					setLevelHigh();
    24e4:	05 c0       	rjmp	.+10     	; 0x24f0 <_ZL23remoteAlternateCommands2IR+0x546>
    24e6:	dd d2       	rcall	.+1466   	; 0x2aa2 <_ZL12setLevelHighv>

					break;
    24e8:	03 c0       	rjmp	.+6      	; 0x24f0 <_ZL23remoteAlternateCommands2IR+0x546>
				}

				case OUTPUT_LED_LOW: {									// Switch to medium
					setLevelMedium();
    24ea:	05 d3       	rcall	.+1546   	; 0x2af6 <_ZL14setLevelMediumv>
    24ec:	01 c0       	rjmp	.+2      	; 0x24f0 <_ZL23remoteAlternateCommands2IR+0x546>

					break;
    24ee:	00 00       	nop
			}
			
			switch(OUTPUT_LED_PIN & 0xe0) {
				case OUTPUT_LED_HIGH: {

					break;
    24f0:	8b e2       	ldi	r24, 0x2B	; 43
				default: {
					break;
				}
			}

			CLEARBIT(REMOTE_PORT,REMOTE_LED);
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	2b e2       	ldi	r18, 0x2B	; 43
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	f9 01       	movw	r30, r18
    24fa:	20 81       	ld	r18, Z
    24fc:	2d 7f       	andi	r18, 0xFD	; 253
    24fe:	fc 01       	movw	r30, r24
    2500:	20 83       	st	Z, r18
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	a6 e1       	ldi	r26, 0x16	; 22
    2508:	b3 e4       	ldi	r27, 0x43	; 67
    250a:	8e 87       	std	Y+14, r24	; 0x0e
    250c:	9f 87       	std	Y+15, r25	; 0x0f
    250e:	a8 8b       	std	Y+16, r26	; 0x10
    2510:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2512:	8e 01       	movw	r16, r28
    2514:	02 5c       	subi	r16, 0xC2	; 194
    2516:	1f 4f       	sbci	r17, 0xFF	; 255
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	4a ef       	ldi	r20, 0xFA	; 250
    251e:	54 e4       	ldi	r21, 0x44	; 68
    2520:	6e 85       	ldd	r22, Y+14	; 0x0e
    2522:	7f 85       	ldd	r23, Y+15	; 0x0f
    2524:	88 89       	ldd	r24, Y+16	; 0x10
    2526:	99 89       	ldd	r25, Y+17	; 0x11
    2528:	ca d7       	rcall	.+3988   	; 0x34be <__mulsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	f8 01       	movw	r30, r16
    2530:	80 83       	st	Z, r24
    2532:	91 83       	std	Z+1, r25	; 0x01
    2534:	a2 83       	std	Z+2, r26	; 0x02
    2536:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2538:	ce 01       	movw	r24, r28
    253a:	ce 96       	adiw	r24, 0x3e	; 62
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	40 e8       	ldi	r20, 0x80	; 128
    2542:	5f e3       	ldi	r21, 0x3F	; 63
    2544:	fc 01       	movw	r30, r24
    2546:	60 81       	ld	r22, Z
    2548:	71 81       	ldd	r23, Z+1	; 0x01
    254a:	82 81       	ldd	r24, Z+2	; 0x02
    254c:	93 81       	ldd	r25, Z+3	; 0x03
    254e:	36 d7       	rcall	.+3692   	; 0x33bc <__cmpsf2>
    2550:	88 23       	and	r24, r24
    2552:	4c f4       	brge	.+18     	; 0x2566 <_ZL23remoteAlternateCommands2IR+0x5bc>
    2554:	ce 01       	movw	r24, r28
		__ticks = 1;
    2556:	8e 5b       	subi	r24, 0xBE	; 190
    2558:	9f 4f       	sbci	r25, 0xFF	; 255
    255a:	21 e0       	ldi	r18, 0x01	; 1
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	fc 01       	movw	r30, r24
    2560:	31 83       	std	Z+1, r19	; 0x01
    2562:	20 83       	st	Z, r18
    2564:	63 c0       	rjmp	.+198    	; 0x262c <_ZL23remoteAlternateCommands2IR+0x682>
	else if (__tmp > 65535)
    2566:	ce 01       	movw	r24, r28
    2568:	ce 96       	adiw	r24, 0x3e	; 62
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	3f ef       	ldi	r19, 0xFF	; 255
    256e:	4f e7       	ldi	r20, 0x7F	; 127
    2570:	57 e4       	ldi	r21, 0x47	; 71
    2572:	fc 01       	movw	r30, r24
    2574:	60 81       	ld	r22, Z
    2576:	71 81       	ldd	r23, Z+1	; 0x01
    2578:	82 81       	ldd	r24, Z+2	; 0x02
    257a:	93 81       	ldd	r25, Z+3	; 0x03
    257c:	9c d7       	rcall	.+3896   	; 0x34b6 <__gesf2>
    257e:	18 16       	cp	r1, r24
    2580:	0c f0       	brlt	.+2      	; 0x2584 <_ZL23remoteAlternateCommands2IR+0x5da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2582:	44 c0       	rjmp	.+136    	; 0x260c <_ZL23remoteAlternateCommands2IR+0x662>
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	40 e2       	ldi	r20, 0x20	; 32
    258a:	51 e4       	ldi	r21, 0x41	; 65
    258c:	6e 85       	ldd	r22, Y+14	; 0x0e
    258e:	7f 85       	ldd	r23, Y+15	; 0x0f
    2590:	88 89       	ldd	r24, Y+16	; 0x10
    2592:	99 89       	ldd	r25, Y+17	; 0x11
    2594:	94 d7       	rcall	.+3880   	; 0x34be <__mulsf3>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	8e 01       	movw	r16, r28
    259c:	0e 5b       	subi	r16, 0xBE	; 190
    259e:	1f 4f       	sbci	r17, 0xFF	; 255
    25a0:	bc 01       	movw	r22, r24
    25a2:	cd 01       	movw	r24, r26
    25a4:	0f d7       	rcall	.+3614   	; 0x33c4 <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	f8 01       	movw	r30, r16
    25ac:	91 83       	std	Z+1, r25	; 0x01
    25ae:	80 83       	st	Z, r24
    25b0:	ce 01       	movw	r24, r28
		while(__ticks)
    25b2:	8e 5b       	subi	r24, 0xBE	; 190
    25b4:	9f 4f       	sbci	r25, 0xFF	; 255
    25b6:	fc 01       	movw	r30, r24
    25b8:	80 81       	ld	r24, Z
    25ba:	91 81       	ldd	r25, Z+1	; 0x01
    25bc:	89 2b       	or	r24, r25
    25be:	09 f4       	brne	.+2      	; 0x25c2 <_ZL23remoteAlternateCommands2IR+0x618>
    25c0:	4f c0       	rjmp	.+158    	; 0x2660 <_ZL23remoteAlternateCommands2IR+0x6b6>
    25c2:	ce 01       	movw	r24, r28
    25c4:	8c 5b       	subi	r24, 0xBC	; 188
    25c6:	9f 4f       	sbci	r25, 0xFF	; 255
    25c8:	28 ec       	ldi	r18, 0xC8	; 200
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	fc 01       	movw	r30, r24
    25ce:	31 83       	std	Z+1, r19	; 0x01
    25d0:	20 83       	st	Z, r18
    25d2:	ce 01       	movw	r24, r28
    25d4:	8c 5b       	subi	r24, 0xBC	; 188
    25d6:	9f 4f       	sbci	r25, 0xFF	; 255
    25d8:	fc 01       	movw	r30, r24
    25da:	80 81       	ld	r24, Z
    25dc:	91 81       	ldd	r25, Z+1	; 0x01
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	f1 f7       	brne	.-4      	; 0x25de <_ZL23remoteAlternateCommands2IR+0x634>
    25e2:	9e 01       	movw	r18, r28
    25e4:	2c 5b       	subi	r18, 0xBC	; 188
    25e6:	3f 4f       	sbci	r19, 0xFF	; 255
    25e8:	f9 01       	movw	r30, r18
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	80 83       	st	Z, r24
    25ee:	ce 01       	movw	r24, r28
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f0:	8e 5b       	subi	r24, 0xBE	; 190
    25f2:	9f 4f       	sbci	r25, 0xFF	; 255
    25f4:	9e 01       	movw	r18, r28
    25f6:	2e 5b       	subi	r18, 0xBE	; 190
    25f8:	3f 4f       	sbci	r19, 0xFF	; 255
    25fa:	f9 01       	movw	r30, r18
    25fc:	20 81       	ld	r18, Z
    25fe:	31 81       	ldd	r19, Z+1	; 0x01
    2600:	21 50       	subi	r18, 0x01	; 1
    2602:	31 09       	sbc	r19, r1
    2604:	fc 01       	movw	r30, r24
    2606:	31 83       	std	Z+1, r19	; 0x01
    2608:	20 83       	st	Z, r18
    260a:	d2 cf       	rjmp	.-92     	; 0x25b0 <_ZL23remoteAlternateCommands2IR+0x606>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    260c:	8e 01       	movw	r16, r28
    260e:	0e 5b       	subi	r16, 0xBE	; 190
    2610:	1f 4f       	sbci	r17, 0xFF	; 255
    2612:	ce 01       	movw	r24, r28
    2614:	ce 96       	adiw	r24, 0x3e	; 62
    2616:	fc 01       	movw	r30, r24
    2618:	60 81       	ld	r22, Z
    261a:	71 81       	ldd	r23, Z+1	; 0x01
    261c:	82 81       	ldd	r24, Z+2	; 0x02
    261e:	93 81       	ldd	r25, Z+3	; 0x03
    2620:	d1 d6       	rcall	.+3490   	; 0x33c4 <__fixunssfsi>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	f8 01       	movw	r30, r16
    2628:	91 83       	std	Z+1, r25	; 0x01
    262a:	80 83       	st	Z, r24
    262c:	ce 01       	movw	r24, r28
    262e:	8a 5b       	subi	r24, 0xBA	; 186
    2630:	9f 4f       	sbci	r25, 0xFF	; 255
    2632:	9e 01       	movw	r18, r28
    2634:	2e 5b       	subi	r18, 0xBE	; 190
    2636:	3f 4f       	sbci	r19, 0xFF	; 255
    2638:	f9 01       	movw	r30, r18
    263a:	20 81       	ld	r18, Z
    263c:	31 81       	ldd	r19, Z+1	; 0x01
    263e:	fc 01       	movw	r30, r24
    2640:	31 83       	std	Z+1, r19	; 0x01
    2642:	20 83       	st	Z, r18
    2644:	ce 01       	movw	r24, r28
    2646:	8a 5b       	subi	r24, 0xBA	; 186
    2648:	9f 4f       	sbci	r25, 0xFF	; 255
    264a:	fc 01       	movw	r30, r24
    264c:	80 81       	ld	r24, Z
    264e:	91 81       	ldd	r25, Z+1	; 0x01
    2650:	01 97       	sbiw	r24, 0x01	; 1
    2652:	f1 f7       	brne	.-4      	; 0x2650 <_ZL23remoteAlternateCommands2IR+0x6a6>
    2654:	9e 01       	movw	r18, r28
    2656:	2a 5b       	subi	r18, 0xBA	; 186
    2658:	3f 4f       	sbci	r19, 0xFF	; 255
    265a:	f9 01       	movw	r30, r18
    265c:	91 83       	std	Z+1, r25	; 0x01
    265e:	80 83       	st	Z, r24
    2660:	8b e2       	ldi	r24, 0x2B	; 43
			_delay_ms(IR_LED_DELAY);
			SETBIT(REMOTE_PORT,REMOTE_LED);
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	2b e2       	ldi	r18, 0x2B	; 43
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	f9 01       	movw	r30, r18
    266a:	30 81       	ld	r19, Z
    266c:	22 e0       	ldi	r18, 0x02	; 2
    266e:	23 2b       	or	r18, r19
    2670:	fc 01       	movw	r30, r24
    2672:	20 83       	st	Z, r18
    2674:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <_ZL9levelFlag>
			
			levelFlag = false;											// False so is repeated only once
    2678:	05 c0       	rjmp	.+10     	; 0x2684 <_ZL23remoteAlternateCommands2IR+0x6da>
			
			break;
    267a:	00 00       	nop
			//		_delay_ms(PAIRING_LED_DELAY);
			//		SETBIT(REMOTE_PORT,REMOTE_LED);				// LED off
			//		_delay_ms(PAIRING_LED_DELAY);
			//	}
			//}
			break;
    267c:	03 c0       	rjmp	.+6      	; 0x2684 <_ZL23remoteAlternateCommands2IR+0x6da>
    267e:	00 00       	nop
					_delay_ms(PAIRING_LED_DELAY);
					SETBIT(REMOTE_PORT,REMOTE_LED);				// LED off
					_delay_ms(PAIRING_LED_DELAY);
				}
			}
			break;
    2680:	01 c0       	rjmp	.+2      	; 0x2684 <_ZL23remoteAlternateCommands2IR+0x6da>
    2682:	00 00       	nop
			break;
		}
		
		case REMOTE_RIGHT: {
			if (!levelFlag) {											// Leave if already executed
				break;
    2684:	00 00       	nop
		//case REMOTE_BATTERY_S:
		
		default:
			break;
	}
}
    2686:	c4 5b       	subi	r28, 0xB4	; 180
    2688:	df 4f       	sbci	r29, 0xFF	; 255
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	de bf       	out	0x3e, r29	; 62
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	cd bf       	out	0x3d, r28	; 61
    2694:	df 91       	pop	r29
    2696:	cf 91       	pop	r28
    2698:	1f 91       	pop	r17
    269a:	0f 91       	pop	r16
    269c:	08 95       	ret

0000269e <_ZL12decodeButtonv>:
    269e:	cf 93       	push	r28

//-----------------------------------------------------------------------------

static void decodeButton(void) {
    26a0:	df 93       	push	r29
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	2e 97       	sbiw	r28, 0x0e	; 14
    26a8:	0f b6       	in	r0, 0x3f	; 63
    26aa:	f8 94       	cli
    26ac:	de bf       	out	0x3e, r29	; 62
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	cd bf       	out	0x3d, r28	; 61
    26b2:	f8 94       	cli
	cli();
    26b4:	88 e6       	ldi	r24, 0x68	; 104

	CLEARBIT(PCICR,(1 << PCIE0));								// Disable PCINT0 because switch bouncing
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	28 e6       	ldi	r18, 0x68	; 104
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	f9 01       	movw	r30, r18
    26be:	20 81       	ld	r18, Z
    26c0:	2e 7f       	andi	r18, 0xFE	; 254
    26c2:	fc 01       	movw	r30, r24
    26c4:	20 83       	st	Z, r18
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	a8 ec       	ldi	r26, 0xC8	; 200
    26cc:	b2 e4       	ldi	r27, 0x42	; 66
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	9a 83       	std	Y+2, r25	; 0x02
    26d2:	ab 83       	std	Y+3, r26	; 0x03
    26d4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	4a ef       	ldi	r20, 0xFA	; 250
    26dc:	54 e4       	ldi	r21, 0x44	; 68
    26de:	69 81       	ldd	r22, Y+1	; 0x01
    26e0:	7a 81       	ldd	r23, Y+2	; 0x02
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	9c 81       	ldd	r25, Y+4	; 0x04
    26e6:	eb d6       	rcall	.+3542   	; 0x34be <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	8d 83       	std	Y+5, r24	; 0x05
    26ee:	9e 83       	std	Y+6, r25	; 0x06
    26f0:	af 83       	std	Y+7, r26	; 0x07
    26f2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	40 e8       	ldi	r20, 0x80	; 128
    26fa:	5f e3       	ldi	r21, 0x3F	; 63
    26fc:	6d 81       	ldd	r22, Y+5	; 0x05
    26fe:	7e 81       	ldd	r23, Y+6	; 0x06
    2700:	8f 81       	ldd	r24, Y+7	; 0x07
    2702:	98 85       	ldd	r25, Y+8	; 0x08
    2704:	5b d6       	rcall	.+3254   	; 0x33bc <__cmpsf2>
    2706:	88 23       	and	r24, r24
    2708:	2c f4       	brge	.+10     	; 0x2714 <_ZL12decodeButtonv+0x76>
		__ticks = 1;
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	9a 87       	std	Y+10, r25	; 0x0a
    2710:	89 87       	std	Y+9, r24	; 0x09
	else if (__tmp > 65535)
    2712:	3a c0       	rjmp	.+116    	; 0x2788 <_ZL12decodeButtonv+0xea>
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	3f ef       	ldi	r19, 0xFF	; 255
    2718:	4f e7       	ldi	r20, 0x7F	; 127
    271a:	57 e4       	ldi	r21, 0x47	; 71
    271c:	6d 81       	ldd	r22, Y+5	; 0x05
    271e:	7e 81       	ldd	r23, Y+6	; 0x06
    2720:	8f 81       	ldd	r24, Y+7	; 0x07
    2722:	98 85       	ldd	r25, Y+8	; 0x08
    2724:	c8 d6       	rcall	.+3472   	; 0x34b6 <__gesf2>
    2726:	18 16       	cp	r1, r24
    2728:	34 f5       	brge	.+76     	; 0x2776 <_ZL12decodeButtonv+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	40 e2       	ldi	r20, 0x20	; 32
    2730:	51 e4       	ldi	r21, 0x41	; 65
    2732:	69 81       	ldd	r22, Y+1	; 0x01
    2734:	7a 81       	ldd	r23, Y+2	; 0x02
    2736:	8b 81       	ldd	r24, Y+3	; 0x03
    2738:	9c 81       	ldd	r25, Y+4	; 0x04
    273a:	c1 d6       	rcall	.+3458   	; 0x34be <__mulsf3>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	bc 01       	movw	r22, r24
    2742:	cd 01       	movw	r24, r26
    2744:	3f d6       	rcall	.+3198   	; 0x33c4 <__fixunssfsi>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	9a 87       	std	Y+10, r25	; 0x0a
    274c:	89 87       	std	Y+9, r24	; 0x09
    274e:	89 85       	ldd	r24, Y+9	; 0x09
		while(__ticks)
    2750:	9a 85       	ldd	r25, Y+10	; 0x0a
    2752:	89 2b       	or	r24, r25
    2754:	19 f1       	breq	.+70     	; 0x279c <_ZL12decodeButtonv+0xfe>
    2756:	88 ec       	ldi	r24, 0xC8	; 200
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	9c 87       	std	Y+12, r25	; 0x0c
    275c:	8b 87       	std	Y+11, r24	; 0x0b
    275e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2760:	9c 85       	ldd	r25, Y+12	; 0x0c
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <_ZL12decodeButtonv+0xc4>
    2766:	9c 87       	std	Y+12, r25	; 0x0c
    2768:	8b 87       	std	Y+11, r24	; 0x0b
    276a:	89 85       	ldd	r24, Y+9	; 0x09
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276c:	9a 85       	ldd	r25, Y+10	; 0x0a
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	9a 87       	std	Y+10, r25	; 0x0a
    2772:	89 87       	std	Y+9, r24	; 0x09
    2774:	ec cf       	rjmp	.-40     	; 0x274e <_ZL12decodeButtonv+0xb0>
    2776:	6d 81       	ldd	r22, Y+5	; 0x05
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2778:	7e 81       	ldd	r23, Y+6	; 0x06
    277a:	8f 81       	ldd	r24, Y+7	; 0x07
    277c:	98 85       	ldd	r25, Y+8	; 0x08
    277e:	22 d6       	rcall	.+3140   	; 0x33c4 <__fixunssfsi>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	9a 87       	std	Y+10, r25	; 0x0a
    2786:	89 87       	std	Y+9, r24	; 0x09
    2788:	89 85       	ldd	r24, Y+9	; 0x09
    278a:	9a 85       	ldd	r25, Y+10	; 0x0a
    278c:	9e 87       	std	Y+14, r25	; 0x0e
    278e:	8d 87       	std	Y+13, r24	; 0x0d
    2790:	8d 85       	ldd	r24, Y+13	; 0x0d
    2792:	9e 85       	ldd	r25, Y+14	; 0x0e
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <_ZL12decodeButtonv+0xf6>
    2798:	9e 87       	std	Y+14, r25	; 0x0e
    279a:	8d 87       	std	Y+13, r24	; 0x0d
    279c:	80 e2       	ldi	r24, 0x20	; 32
    279e:	90 e0       	ldi	r25, 0x00	; 0

	_delay_ms(DEBOUNCE_DELAY);

	if (!CHECKBIT(PANEL_BUTTONS_PIN,BUTTON_MUTE)) {
    27a0:	fc 01       	movw	r30, r24
    27a2:	90 81       	ld	r25, Z
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	98 23       	and	r25, r24
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	99 23       	and	r25, r25
    27ac:	09 f0       	breq	.+2      	; 0x27b0 <_ZL12decodeButtonv+0x112>
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	88 23       	and	r24, r24
    27b2:	a9 f0       	breq	.+42     	; 0x27de <_ZL12decodeButtonv+0x140>
    27b4:	88 e2       	ldi	r24, 0x28	; 40
    27b6:	90 e0       	ldi	r25, 0x00	; 0
		TOGGLEBIT(OUTPUT_RELAYS_PORT,OUTPUT_RELAYS_MUTE);	// Toggle Mute
    27b8:	28 e2       	ldi	r18, 0x28	; 40
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	f9 01       	movw	r30, r18
    27be:	30 81       	ld	r19, Z
    27c0:	21 e0       	ldi	r18, 0x01	; 1
    27c2:	23 27       	eor	r18, r19
    27c4:	fc 01       	movw	r30, r24
    27c6:	20 83       	st	Z, r18
    27c8:	88 e2       	ldi	r24, 0x28	; 40
		TOGGLEBIT(OUTPUT_LED_PORT,OUTPUT_LED_MUTE);
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	28 e2       	ldi	r18, 0x28	; 40
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	f9 01       	movw	r30, r18
    27d2:	30 81       	ld	r19, Z
    27d4:	20 e1       	ldi	r18, 0x10	; 16
    27d6:	23 27       	eor	r18, r19
    27d8:	fc 01       	movw	r30, r24
    27da:	20 83       	st	Z, r18
    27dc:	29 c0       	rjmp	.+82     	; 0x2830 <_ZL12decodeButtonv+0x192>
	}
	else if (!CHECKBIT(PANEL_BUTTONS_PIN,BUTTON_HIGH)) {
    27de:	80 e2       	ldi	r24, 0x20	; 32
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	fc 01       	movw	r30, r24
    27e4:	90 81       	ld	r25, Z
    27e6:	82 e0       	ldi	r24, 0x02	; 2
    27e8:	98 23       	and	r25, r24
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	99 23       	and	r25, r25
    27ee:	09 f0       	breq	.+2      	; 0x27f2 <_ZL12decodeButtonv+0x154>
    27f0:	80 e0       	ldi	r24, 0x00	; 0
    27f2:	88 23       	and	r24, r24
		setLevelHigh();
    27f4:	11 f0       	breq	.+4      	; 0x27fa <_ZL12decodeButtonv+0x15c>
    27f6:	55 d1       	rcall	.+682    	; 0x2aa2 <_ZL12setLevelHighv>
    27f8:	1b c0       	rjmp	.+54     	; 0x2830 <_ZL12decodeButtonv+0x192>
	}
	else if (!CHECKBIT(PANEL_BUTTONS_PIN,BUTTON_MED)) {
    27fa:	80 e2       	ldi	r24, 0x20	; 32
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	fc 01       	movw	r30, r24
    2800:	90 81       	ld	r25, Z
    2802:	84 e0       	ldi	r24, 0x04	; 4
    2804:	98 23       	and	r25, r24
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	99 23       	and	r25, r25
    280a:	09 f0       	breq	.+2      	; 0x280e <_ZL12decodeButtonv+0x170>
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	88 23       	and	r24, r24
    2810:	11 f0       	breq	.+4      	; 0x2816 <_ZL12decodeButtonv+0x178>
		setLevelMedium();
    2812:	71 d1       	rcall	.+738    	; 0x2af6 <_ZL14setLevelMediumv>
    2814:	0d c0       	rjmp	.+26     	; 0x2830 <_ZL12decodeButtonv+0x192>
    2816:	80 e2       	ldi	r24, 0x20	; 32
	}
	else if (!CHECKBIT(PANEL_BUTTONS_PIN,BUTTON_LOW)) {
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	fc 01       	movw	r30, r24
    281c:	90 81       	ld	r25, Z
    281e:	88 e0       	ldi	r24, 0x08	; 8
    2820:	98 23       	and	r25, r24
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	99 23       	and	r25, r25
    2826:	09 f0       	breq	.+2      	; 0x282a <_ZL12decodeButtonv+0x18c>
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	88 23       	and	r24, r24
    282c:	09 f0       	breq	.+2      	; 0x2830 <_ZL12decodeButtonv+0x192>
    282e:	99 d1       	rcall	.+818    	; 0x2b62 <_ZL11setLevelLowv>
		setLevelLow();
    2830:	88 e6       	ldi	r24, 0x68	; 104
    2832:	90 e0       	ldi	r25, 0x00	; 0
			_delay_ms(PAIRING_LED_DELAY);
		}
	}
#endif

	SETBIT(PCICR,(1 << PCIE0));				// Enable PCINT0
    2834:	28 e6       	ldi	r18, 0x68	; 104
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	f9 01       	movw	r30, r18
    283a:	20 81       	ld	r18, Z
    283c:	21 60       	ori	r18, 0x01	; 1
    283e:	fc 01       	movw	r30, r24
    2840:	20 83       	st	Z, r18
    2842:	78 94       	sei
    2844:	00 00       	nop

	sei();
    2846:	2e 96       	adiw	r28, 0x0e	; 14
}
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	de bf       	out	0x3e, r29	; 62
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	cd bf       	out	0x3d, r28	; 61
    2852:	df 91       	pop	r29
    2854:	cf 91       	pop	r28
    2856:	08 95       	ret

00002858 <_ZL10decodeKnobv>:
    2858:	cf 93       	push	r28
    285a:	df 93       	push	r29

//-----------------------------------------------------------------------------

static inline void decodeKnob(void) {
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
    2860:	f8 94       	cli
    2862:	88 e6       	ldi	r24, 0x68	; 104
	cli();
    2864:	90 e0       	ldi	r25, 0x00	; 0

	CLEARBIT(PCICR,(1 << PCIE1));								// Disable PCINT1 because switch bouncing
    2866:	28 e6       	ldi	r18, 0x68	; 104
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	f9 01       	movw	r30, r18
    286c:	20 81       	ld	r18, Z
    286e:	2d 7f       	andi	r18, 0xFD	; 253
    2870:	fc 01       	movw	r30, r24
    2872:	20 83       	st	Z, r18
    2874:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_Z12VolLimits_Upv>

	if (VolLimits_Up()) {
    2878:	88 23       	and	r24, r24
    287a:	41 f0       	breq	.+16     	; 0x288c <_ZL10decodeKnobv+0x34>
    287c:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <_ZL10currentVol>
		previousVol = currentVol;
    2880:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <_ZL11previousVol>
    2884:	82 e0       	ldi	r24, 0x02	; 2
    2886:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <_ZL10currentVol>
		currentVol = LIMIT_UP;
    288a:	0b c0       	rjmp	.+22     	; 0x28a2 <_ZL10decodeKnobv+0x4a>
    288c:	0e 94 d7 05 	call	0xbae	; 0xbae <_Z14VolLimits_Downv>
		//}
	} else if (VolLimits_Down()) {
    2890:	88 23       	and	r24, r24
    2892:	39 f0       	breq	.+14     	; 0x28a2 <_ZL10decodeKnobv+0x4a>
    2894:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <_ZL10currentVol>
		previousVol = currentVol;
    2898:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <_ZL11previousVol>
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <_ZL10currentVol>
		currentVol = LIMIT_DOWN;
    28a2:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <_ZL10currentVol>
	}

	if ((currentVol == LIMIT_UP) && (previousVol == 0) && !VolLimits_Up()) {
    28a6:	82 30       	cpi	r24, 0x02	; 2
    28a8:	69 f4       	brne	.+26     	; 0x28c4 <_ZL10decodeKnobv+0x6c>
    28aa:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <_ZL11previousVol>
    28ae:	88 23       	and	r24, r24
    28b0:	49 f4       	brne	.+18     	; 0x28c4 <_ZL10decodeKnobv+0x6c>
    28b2:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_Z12VolLimits_Upv>
    28b6:	98 2f       	mov	r25, r24
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	89 27       	eor	r24, r25
    28bc:	88 23       	and	r24, r24
    28be:	11 f0       	breq	.+4      	; 0x28c4 <_ZL10decodeKnobv+0x6c>
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	01 c0       	rjmp	.+2      	; 0x28c6 <_ZL10decodeKnobv+0x6e>
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	88 23       	and	r24, r24
    28c8:	29 f0       	breq	.+10     	; 0x28d4 <_ZL10decodeKnobv+0x7c>
    28ca:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <_ZL11previousVol>
		previousVol = 0;
    28ce:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <_ZL10currentVol>
		currentVol = 0;
    28d2:	18 c0       	rjmp	.+48     	; 0x2904 <_ZL10decodeKnobv+0xac>
    28d4:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <_ZL10currentVol>
	} else if ((currentVol == LIMIT_DOWN) && (previousVol == 0) && !VolLimits_Down()) {
    28d8:	81 30       	cpi	r24, 0x01	; 1
    28da:	69 f4       	brne	.+26     	; 0x28f6 <_ZL10decodeKnobv+0x9e>
    28dc:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <_ZL11previousVol>
    28e0:	88 23       	and	r24, r24
    28e2:	49 f4       	brne	.+18     	; 0x28f6 <_ZL10decodeKnobv+0x9e>
    28e4:	0e 94 d7 05 	call	0xbae	; 0xbae <_Z14VolLimits_Downv>
    28e8:	98 2f       	mov	r25, r24
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	89 27       	eor	r24, r25
    28ee:	88 23       	and	r24, r24
    28f0:	11 f0       	breq	.+4      	; 0x28f6 <_ZL10decodeKnobv+0x9e>
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	01 c0       	rjmp	.+2      	; 0x28f8 <_ZL10decodeKnobv+0xa0>
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	88 23       	and	r24, r24
    28fa:	21 f0       	breq	.+8      	; 0x2904 <_ZL10decodeKnobv+0xac>
    28fc:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <_ZL11previousVol>
		previousVol = 0;
    2900:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <_ZL10currentVol>
		currentVol = 0;
    2904:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <_ZL10currentVol>
	}

	if ((currentVol == LIMIT_DOWN) && (previousVol == LIMIT_UP)
    2908:	81 30       	cpi	r24, 0x01	; 1
			&& ((OUTPUT_LED_PIN & 0xe0) != OUTPUT_LED_HIGH)) {
    290a:	81 f4       	brne	.+32     	; 0x292c <_ZL10decodeKnobv+0xd4>
    290c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <_ZL11previousVol>
	} else if ((currentVol == LIMIT_DOWN) && (previousVol == 0) && !VolLimits_Down()) {
		previousVol = 0;
		currentVol = 0;
	}

	if ((currentVol == LIMIT_DOWN) && (previousVol == LIMIT_UP)
    2910:	82 30       	cpi	r24, 0x02	; 2
    2912:	61 f4       	brne	.+24     	; 0x292c <_ZL10decodeKnobv+0xd4>
    2914:	86 e2       	ldi	r24, 0x26	; 38
			&& ((OUTPUT_LED_PIN & 0xe0) != OUTPUT_LED_HIGH)) {
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	fc 01       	movw	r30, r24
    291a:	80 81       	ld	r24, Z
    291c:	88 2f       	mov	r24, r24
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	80 7e       	andi	r24, 0xE0	; 224
    2922:	99 27       	eor	r25, r25
    2924:	80 97       	sbiw	r24, 0x20	; 32
    2926:	11 f0       	breq	.+4      	; 0x292c <_ZL10decodeKnobv+0xd4>
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	01 c0       	rjmp	.+2      	; 0x292e <_ZL10decodeKnobv+0xd6>
    292c:	80 e0       	ldi	r24, 0x00	; 0
	} else if ((currentVol == LIMIT_DOWN) && (previousVol == 0) && !VolLimits_Down()) {
		previousVol = 0;
		currentVol = 0;
	}

	if ((currentVol == LIMIT_DOWN) && (previousVol == LIMIT_UP)
    292e:	88 23       	and	r24, r24
    2930:	31 f0       	breq	.+12     	; 0x293e <_ZL10decodeKnobv+0xe6>
			&& ((OUTPUT_LED_PIN & 0xe0) != OUTPUT_LED_HIGH)) {
		levelShiftUp();
    2932:	2f d0       	rcall	.+94     	; 0x2992 <_ZL12levelShiftUpv>
    2934:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <_ZL11previousVol>

		previousVol = 0;
    2938:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <_ZL10currentVol>
		currentVol = 0;
    293c:	1d c0       	rjmp	.+58     	; 0x2978 <_ZL10decodeKnobv+0x120>
    293e:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <_ZL10currentVol>
	} else if ((currentVol == LIMIT_UP) && (previousVol == LIMIT_DOWN)
    2942:	82 30       	cpi	r24, 0x02	; 2
			&& ((OUTPUT_LED_PIN & 0xe0) != OUTPUT_LED_LOW)) {
    2944:	89 f4       	brne	.+34     	; 0x2968 <_ZL10decodeKnobv+0x110>
    2946:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <_ZL11previousVol>
			&& ((OUTPUT_LED_PIN & 0xe0) != OUTPUT_LED_HIGH)) {
		levelShiftUp();

		previousVol = 0;
		currentVol = 0;
	} else if ((currentVol == LIMIT_UP) && (previousVol == LIMIT_DOWN)
    294a:	81 30       	cpi	r24, 0x01	; 1
    294c:	69 f4       	brne	.+26     	; 0x2968 <_ZL10decodeKnobv+0x110>
    294e:	86 e2       	ldi	r24, 0x26	; 38
			&& ((OUTPUT_LED_PIN & 0xe0) != OUTPUT_LED_LOW)) {
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	fc 01       	movw	r30, r24
    2954:	80 81       	ld	r24, Z
    2956:	88 2f       	mov	r24, r24
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	80 7e       	andi	r24, 0xE0	; 224
    295c:	99 27       	eor	r25, r25
    295e:	80 38       	cpi	r24, 0x80	; 128
    2960:	91 05       	cpc	r25, r1
    2962:	11 f0       	breq	.+4      	; 0x2968 <_ZL10decodeKnobv+0x110>
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	01 c0       	rjmp	.+2      	; 0x296a <_ZL10decodeKnobv+0x112>
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	88 23       	and	r24, r24
			&& ((OUTPUT_LED_PIN & 0xe0) != OUTPUT_LED_HIGH)) {
		levelShiftUp();

		previousVol = 0;
		currentVol = 0;
	} else if ((currentVol == LIMIT_UP) && (previousVol == LIMIT_DOWN)
    296c:	29 f0       	breq	.+10     	; 0x2978 <_ZL10decodeKnobv+0x120>
    296e:	55 d0       	rcall	.+170    	; 0x2a1a <_ZL14levelShiftDownv>
			&& ((OUTPUT_LED_PIN & 0xe0) != OUTPUT_LED_LOW)) {
		levelShiftDown();
    2970:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <_ZL11previousVol>

		previousVol = 0;
    2974:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <_ZL10currentVol>
		currentVol = 0;
    2978:	88 e6       	ldi	r24, 0x68	; 104
    297a:	90 e0       	ldi	r25, 0x00	; 0
	}

	SETBIT(PCICR,(1 << PCIE1));									// Enable PCINT0
    297c:	28 e6       	ldi	r18, 0x68	; 104
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	f9 01       	movw	r30, r18
    2982:	20 81       	ld	r18, Z
    2984:	22 60       	ori	r18, 0x02	; 2
    2986:	fc 01       	movw	r30, r24
    2988:	20 83       	st	Z, r18
    298a:	00 00       	nop
}
    298c:	df 91       	pop	r29
    298e:	cf 91       	pop	r28
    2990:	08 95       	ret

00002992 <_ZL12levelShiftUpv>:
    2992:	cf 93       	push	r28

//-----------------------------------------------------------------------------

static inline void levelShiftUp(void) {
    2994:	df 93       	push	r29
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62
    299a:	88 e2       	ldi	r24, 0x28	; 40
	SETBIT(OUTPUT_RELAYS_PORT,OUTPUT_RELAYS_MUTE);			// Mute on
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	28 e2       	ldi	r18, 0x28	; 40
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	f9 01       	movw	r30, r18
    29a4:	30 81       	ld	r19, Z
    29a6:	21 e0       	ldi	r18, 0x01	; 1
    29a8:	23 2b       	or	r18, r19
    29aa:	fc 01       	movw	r30, r24
	SETBIT(OUTPUT_LED_PORT,OUTPUT_LED_MUTE);
    29ac:	20 83       	st	Z, r18
    29ae:	88 e2       	ldi	r24, 0x28	; 40
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	28 e2       	ldi	r18, 0x28	; 40
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	f9 01       	movw	r30, r18
    29b8:	30 81       	ld	r19, Z
    29ba:	20 e1       	ldi	r18, 0x10	; 16
    29bc:	23 2b       	or	r18, r19
    29be:	fc 01       	movw	r30, r24

	stepper.CW();
    29c0:	20 83       	st	Z, r18
    29c2:	85 e6       	ldi	r24, 0x65	; 101
    29c4:	91 e0       	ldi	r25, 0x01	; 1
    29c6:	bb d1       	rcall	.+886    	; 0x2d3e <_ZN7Stepper2CWEv>
	
	switch(OUTPUT_LED_PIN & 0xe0) {
    29c8:	86 e2       	ldi	r24, 0x26	; 38
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	fc 01       	movw	r30, r24
    29ce:	80 81       	ld	r24, Z
    29d0:	88 2f       	mov	r24, r24
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	80 7e       	andi	r24, 0xE0	; 224
    29d6:	99 27       	eor	r25, r25
    29d8:	80 34       	cpi	r24, 0x40	; 64
    29da:	91 05       	cpc	r25, r1
    29dc:	21 f0       	breq	.+8      	; 0x29e6 <_ZL12levelShiftUpv+0x54>
    29de:	80 38       	cpi	r24, 0x80	; 128
    29e0:	91 05       	cpc	r25, r1
    29e2:	19 f0       	breq	.+6      	; 0x29ea <_ZL12levelShiftUpv+0x58>

			break;
		}

		default: {
			break;
    29e4:	04 c0       	rjmp	.+8      	; 0x29ee <_ZL12levelShiftUpv+0x5c>

	stepper.CW();
	
	switch(OUTPUT_LED_PIN & 0xe0) {
		case OUTPUT_LED_MED: {								// Switch to high
			setLevelHigh();
    29e6:	5d d0       	rcall	.+186    	; 0x2aa2 <_ZL12setLevelHighv>
    29e8:	02 c0       	rjmp	.+4      	; 0x29ee <_ZL12levelShiftUpv+0x5c>

			break;
    29ea:	85 d0       	rcall	.+266    	; 0x2af6 <_ZL14setLevelMediumv>
		}

		case OUTPUT_LED_LOW: {								// Switch to medium
			setLevelMedium();
    29ec:	00 00       	nop
    29ee:	88 e2       	ldi	r24, 0x28	; 40

			break;
    29f0:	90 e0       	ldi	r25, 0x00	; 0
		default: {
			break;
		}
	}
	
	CLEARBIT(OUTPUT_RELAYS_PORT,OUTPUT_RELAYS_MUTE);		// Mute off
    29f2:	28 e2       	ldi	r18, 0x28	; 40
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	f9 01       	movw	r30, r18
    29f8:	20 81       	ld	r18, Z
    29fa:	2e 7f       	andi	r18, 0xFE	; 254
    29fc:	fc 01       	movw	r30, r24
    29fe:	20 83       	st	Z, r18
    2a00:	88 e2       	ldi	r24, 0x28	; 40
    2a02:	90 e0       	ldi	r25, 0x00	; 0
	CLEARBIT(OUTPUT_LED_PORT,OUTPUT_LED_MUTE);
    2a04:	28 e2       	ldi	r18, 0x28	; 40
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	f9 01       	movw	r30, r18
    2a0a:	20 81       	ld	r18, Z
    2a0c:	2f 7e       	andi	r18, 0xEF	; 239
    2a0e:	fc 01       	movw	r30, r24
    2a10:	20 83       	st	Z, r18
    2a12:	00 00       	nop
}
    2a14:	df 91       	pop	r29
    2a16:	cf 91       	pop	r28
    2a18:	08 95       	ret

00002a1a <_ZL14levelShiftDownv>:
    2a1a:	cf 93       	push	r28

//-----------------------------------------------------------------------------

static inline void levelShiftDown(void) {
    2a1c:	df 93       	push	r29
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
    2a22:	88 e2       	ldi	r24, 0x28	; 40
	SETBIT(OUTPUT_RELAYS_PORT,OUTPUT_RELAYS_MUTE);			// Mute on
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	28 e2       	ldi	r18, 0x28	; 40
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	f9 01       	movw	r30, r18
    2a2c:	30 81       	ld	r19, Z
    2a2e:	21 e0       	ldi	r18, 0x01	; 1
    2a30:	23 2b       	or	r18, r19
    2a32:	fc 01       	movw	r30, r24
	SETBIT(OUTPUT_LED_PORT,OUTPUT_LED_MUTE);
    2a34:	20 83       	st	Z, r18
    2a36:	88 e2       	ldi	r24, 0x28	; 40
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	28 e2       	ldi	r18, 0x28	; 40
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	f9 01       	movw	r30, r18
    2a40:	30 81       	ld	r19, Z
    2a42:	20 e1       	ldi	r18, 0x10	; 16
    2a44:	23 2b       	or	r18, r19
    2a46:	fc 01       	movw	r30, r24

	stepper.CCW();
    2a48:	20 83       	st	Z, r18
    2a4a:	85 e6       	ldi	r24, 0x65	; 101
    2a4c:	91 e0       	ldi	r25, 0x01	; 1
    2a4e:	d3 d2       	rcall	.+1446   	; 0x2ff6 <_ZN7Stepper3CCWEv>
	
	switch(OUTPUT_LED_PIN & 0xe0) {
    2a50:	86 e2       	ldi	r24, 0x26	; 38
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	fc 01       	movw	r30, r24
    2a56:	80 81       	ld	r24, Z
    2a58:	88 2f       	mov	r24, r24
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	80 7e       	andi	r24, 0xE0	; 224
    2a5e:	99 27       	eor	r25, r25
    2a60:	80 32       	cpi	r24, 0x20	; 32
    2a62:	91 05       	cpc	r25, r1
    2a64:	21 f0       	breq	.+8      	; 0x2a6e <_ZL14levelShiftDownv+0x54>
    2a66:	80 34       	cpi	r24, 0x40	; 64
    2a68:	91 05       	cpc	r25, r1
    2a6a:	19 f0       	breq	.+6      	; 0x2a72 <_ZL14levelShiftDownv+0x58>

			break;
		}

		default: {
			break;
    2a6c:	04 c0       	rjmp	.+8      	; 0x2a76 <_ZL14levelShiftDownv+0x5c>

	stepper.CCW();
	
	switch(OUTPUT_LED_PIN & 0xe0) {
		case OUTPUT_LED_HIGH: {								// Switch to medium
			setLevelMedium();
    2a6e:	43 d0       	rcall	.+134    	; 0x2af6 <_ZL14setLevelMediumv>
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <_ZL14levelShiftDownv+0x5c>

			break;
    2a72:	77 d0       	rcall	.+238    	; 0x2b62 <_ZL11setLevelLowv>
		}

		case OUTPUT_LED_MED: {								// Switch to low
			setLevelLow();
    2a74:	00 00       	nop
    2a76:	88 e2       	ldi	r24, 0x28	; 40

			break;
    2a78:	90 e0       	ldi	r25, 0x00	; 0
		default: {
			break;
		}
	}
	
	CLEARBIT(OUTPUT_RELAYS_PORT,OUTPUT_RELAYS_MUTE);		// Mute off
    2a7a:	28 e2       	ldi	r18, 0x28	; 40
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	f9 01       	movw	r30, r18
    2a80:	20 81       	ld	r18, Z
    2a82:	2e 7f       	andi	r18, 0xFE	; 254
    2a84:	fc 01       	movw	r30, r24
    2a86:	20 83       	st	Z, r18
    2a88:	88 e2       	ldi	r24, 0x28	; 40
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
	CLEARBIT(OUTPUT_LED_PORT,OUTPUT_LED_MUTE);
    2a8c:	28 e2       	ldi	r18, 0x28	; 40
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	f9 01       	movw	r30, r18
    2a92:	20 81       	ld	r18, Z
    2a94:	2f 7e       	andi	r18, 0xEF	; 239
    2a96:	fc 01       	movw	r30, r24
    2a98:	20 83       	st	Z, r18
    2a9a:	00 00       	nop
    2a9c:	df 91       	pop	r29
}
    2a9e:	cf 91       	pop	r28
    2aa0:	08 95       	ret

00002aa2 <_ZL12setLevelHighv>:
    2aa2:	cf 93       	push	r28

//-----------------------------------------------------------------------------

static inline void setLevelHigh(void) {
    2aa4:	df 93       	push	r29
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
    2aaa:	88 e2       	ldi	r24, 0x28	; 40
	CLEARBIT(OUTPUT_RELAYS_PORT,(OUTPUT_RELAYS_MED
									| OUTPUT_RELAYS_LOW
									| OUTPUT_RELAYS_HIGH));		// Button_High low because relay normally closed
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	28 e2       	ldi	r18, 0x28	; 40
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	f9 01       	movw	r30, r18
    2ab4:	20 81       	ld	r18, Z
    2ab6:	21 7f       	andi	r18, 0xF1	; 241
    2ab8:	fc 01       	movw	r30, r24
    2aba:	20 83       	st	Z, r18
    2abc:	88 e2       	ldi	r24, 0x28	; 40
	CLEARBIT(OUTPUT_LED_PORT,(OUTPUT_LED_MED
								| OUTPUT_LED_LOW));
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	28 e2       	ldi	r18, 0x28	; 40
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	f9 01       	movw	r30, r18
    2ac6:	20 81       	ld	r18, Z
    2ac8:	2f 73       	andi	r18, 0x3F	; 63
    2aca:	fc 01       	movw	r30, r24
    2acc:	20 83       	st	Z, r18
    2ace:	88 e2       	ldi	r24, 0x28	; 40
	SETBIT(OUTPUT_LED_PORT,OUTPUT_LED_HIGH);
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	28 e2       	ldi	r18, 0x28	; 40
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	f9 01       	movw	r30, r18
    2ad8:	30 81       	ld	r19, Z
    2ada:	20 e2       	ldi	r18, 0x20	; 32
    2adc:	23 2b       	or	r18, r19
    2ade:	fc 01       	movw	r30, r24
    2ae0:	20 83       	st	Z, r18
    2ae2:	40 e2       	ldi	r20, 0x20	; 32
	
	eeprom.write(LEVEL_ADDR,OUTPUT_LED_HIGH);
    2ae4:	61 e0       	ldi	r22, 0x01	; 1
    2ae6:	70 e0       	ldi	r23, 0x00	; 0
    2ae8:	8e e8       	ldi	r24, 0x8E	; 142
    2aea:	91 e0       	ldi	r25, 0x01	; 1
    2aec:	f1 d3       	rcall	.+2018   	; 0x32d0 <_ZN6EEPROM5writeEjh>
    2aee:	00 00       	nop
    2af0:	df 91       	pop	r29
}
    2af2:	cf 91       	pop	r28
    2af4:	08 95       	ret

00002af6 <_ZL14setLevelMediumv>:
    2af6:	cf 93       	push	r28
    2af8:	df 93       	push	r29

//-----------------------------------------------------------------------------

static inline void setLevelMedium(void) {
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	88 e2       	ldi	r24, 0x28	; 40
    2b00:	90 e0       	ldi	r25, 0x00	; 0
	CLEARBIT(OUTPUT_RELAYS_PORT,(OUTPUT_RELAYS_LOW));
    2b02:	28 e2       	ldi	r18, 0x28	; 40
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	f9 01       	movw	r30, r18
    2b08:	20 81       	ld	r18, Z
    2b0a:	32 2f       	mov	r19, r18
    2b0c:	28 e0       	ldi	r18, 0x08	; 8
    2b0e:	20 95       	com	r18
    2b10:	23 23       	and	r18, r19
    2b12:	fc 01       	movw	r30, r24
    2b14:	20 83       	st	Z, r18
    2b16:	88 e2       	ldi	r24, 0x28	; 40
	SETBIT(OUTPUT_RELAYS_PORT,(OUTPUT_RELAYS_MED
								| OUTPUT_RELAYS_HIGH));
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	28 e2       	ldi	r18, 0x28	; 40
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	f9 01       	movw	r30, r18
    2b20:	20 81       	ld	r18, Z
    2b22:	26 60       	ori	r18, 0x06	; 6
    2b24:	fc 01       	movw	r30, r24
    2b26:	20 83       	st	Z, r18
    2b28:	88 e2       	ldi	r24, 0x28	; 40
	CLEARBIT(OUTPUT_LED_PORT,(OUTPUT_LED_HIGH
								| OUTPUT_LED_LOW));
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	28 e2       	ldi	r18, 0x28	; 40
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	f9 01       	movw	r30, r18
    2b32:	20 81       	ld	r18, Z
    2b34:	2f 75       	andi	r18, 0x5F	; 95
    2b36:	fc 01       	movw	r30, r24
    2b38:	20 83       	st	Z, r18
    2b3a:	88 e2       	ldi	r24, 0x28	; 40
	SETBIT(OUTPUT_LED_PORT,OUTPUT_LED_MED);
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	28 e2       	ldi	r18, 0x28	; 40
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	f9 01       	movw	r30, r18
    2b44:	30 81       	ld	r19, Z
    2b46:	20 e4       	ldi	r18, 0x40	; 64
    2b48:	23 2b       	or	r18, r19
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	20 83       	st	Z, r18
    2b4e:	40 e4       	ldi	r20, 0x40	; 64
	
	eeprom.write(LEVEL_ADDR,OUTPUT_LED_MED);
    2b50:	61 e0       	ldi	r22, 0x01	; 1
    2b52:	70 e0       	ldi	r23, 0x00	; 0
    2b54:	8e e8       	ldi	r24, 0x8E	; 142
    2b56:	91 e0       	ldi	r25, 0x01	; 1
    2b58:	bb d3       	rcall	.+1910   	; 0x32d0 <_ZN6EEPROM5writeEjh>
    2b5a:	00 00       	nop
    2b5c:	df 91       	pop	r29
}
    2b5e:	cf 91       	pop	r28
    2b60:	08 95       	ret

00002b62 <_ZL11setLevelLowv>:
    2b62:	cf 93       	push	r28
    2b64:	df 93       	push	r29

//-----------------------------------------------------------------------------

static inline void setLevelLow(void) {
    2b66:	cd b7       	in	r28, 0x3d	; 61
    2b68:	de b7       	in	r29, 0x3e	; 62
    2b6a:	88 e2       	ldi	r24, 0x28	; 40
	CLEARBIT(OUTPUT_RELAYS_PORT,OUTPUT_RELAYS_MED);
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	28 e2       	ldi	r18, 0x28	; 40
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	f9 01       	movw	r30, r18
    2b74:	20 81       	ld	r18, Z
    2b76:	2b 7f       	andi	r18, 0xFB	; 251
    2b78:	fc 01       	movw	r30, r24
    2b7a:	20 83       	st	Z, r18
    2b7c:	88 e2       	ldi	r24, 0x28	; 40
	SETBIT(OUTPUT_RELAYS_PORT,(OUTPUT_RELAYS_LOW
								| OUTPUT_RELAYS_HIGH));
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	28 e2       	ldi	r18, 0x28	; 40
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	f9 01       	movw	r30, r18
    2b86:	20 81       	ld	r18, Z
    2b88:	2a 60       	ori	r18, 0x0A	; 10
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	20 83       	st	Z, r18
    2b8e:	88 e2       	ldi	r24, 0x28	; 40
	CLEARBIT(OUTPUT_LED_PORT,(OUTPUT_LED_HIGH
								| OUTPUT_LED_MED));
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	28 e2       	ldi	r18, 0x28	; 40
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	f9 01       	movw	r30, r18
    2b98:	20 81       	ld	r18, Z
    2b9a:	2f 79       	andi	r18, 0x9F	; 159
    2b9c:	fc 01       	movw	r30, r24
    2b9e:	20 83       	st	Z, r18
    2ba0:	88 e2       	ldi	r24, 0x28	; 40
	SETBIT(OUTPUT_LED_PORT,OUTPUT_LED_LOW);
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	28 e2       	ldi	r18, 0x28	; 40
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	f9 01       	movw	r30, r18
    2baa:	30 81       	ld	r19, Z
    2bac:	20 e8       	ldi	r18, 0x80	; 128
    2bae:	23 2b       	or	r18, r19
    2bb0:	fc 01       	movw	r30, r24
	
	eeprom.write(LEVEL_ADDR,OUTPUT_LED_LOW);
    2bb2:	20 83       	st	Z, r18
    2bb4:	40 e8       	ldi	r20, 0x80	; 128
    2bb6:	61 e0       	ldi	r22, 0x01	; 1
    2bb8:	70 e0       	ldi	r23, 0x00	; 0
    2bba:	8e e8       	ldi	r24, 0x8E	; 142
    2bbc:	91 e0       	ldi	r25, 0x01	; 1
    2bbe:	88 d3       	rcall	.+1808   	; 0x32d0 <_ZN6EEPROM5writeEjh>
}
    2bc0:	00 00       	nop
    2bc2:	df 91       	pop	r29
    2bc4:	cf 91       	pop	r28
    2bc6:	08 95       	ret

00002bc8 <_Z41__static_initialization_and_destruction_0ii>:
    2bc8:	cf 93       	push	r28
    2bca:	df 93       	push	r29
    2bcc:	00 d0       	rcall	.+0      	; 0x2bce <_Z41__static_initialization_and_destruction_0ii+0x6>
    2bce:	00 d0       	rcall	.+0      	; 0x2bd0 <_Z41__static_initialization_and_destruction_0ii+0x8>
    2bd0:	cd b7       	in	r28, 0x3d	; 61
    2bd2:	de b7       	in	r29, 0x3e	; 62
    2bd4:	9a 83       	std	Y+2, r25	; 0x02
    2bd6:	89 83       	std	Y+1, r24	; 0x01
    2bd8:	7c 83       	std	Y+4, r23	; 0x04
    2bda:	6b 83       	std	Y+3, r22	; 0x03
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	9a 81       	ldd	r25, Y+2	; 0x02
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	91 f4       	brne	.+36     	; 0x2c08 <_Z41__static_initialization_and_destruction_0ii+0x40>
    2be4:	8b 81       	ldd	r24, Y+3	; 0x03
    2be6:	9c 81       	ldd	r25, Y+4	; 0x04
    2be8:	01 96       	adiw	r24, 0x01	; 1
static volatile bool powerDown = false;
static volatile bool levelFlag = false;													// Flag to execute only once if button hold
static volatile uint8_t currentVol = 0;
static volatile uint8_t previousVol = 0;
static volatile uint32_t count = 0;														// Counter to power down
IR ir;
    2bea:	71 f4       	brne	.+28     	; 0x2c08 <_Z41__static_initialization_and_destruction_0ii+0x40>
    2bec:	80 e6       	ldi	r24, 0x60	; 96
    2bee:	91 e0       	ldi	r25, 0x01	; 1
    2bf0:	0e 94 3d 01 	call	0x27a	; 0x27a <_ZN2IRC1Ev>
Stepper stepper;
    2bf4:	85 e6       	ldi	r24, 0x65	; 101
    2bf6:	91 e0       	ldi	r25, 0x01	; 1
    2bf8:	1b d0       	rcall	.+54     	; 0x2c30 <_ZN7StepperC1Ev>
Fifo fifo;
    2bfa:	8b e7       	ldi	r24, 0x7B	; 123
    2bfc:	91 e0       	ldi	r25, 0x01	; 1
    2bfe:	0e 94 a0 00 	call	0x140	; 0x140 <_ZN4FifoC1Ev>
EEPROM eeprom;
    2c02:	8e e8       	ldi	r24, 0x8E	; 142
    2c04:	91 e0       	ldi	r25, 0x01	; 1
    2c06:	53 d3       	rcall	.+1702   	; 0x32ae <_ZN6EEPROMC1Ev>
    2c08:	00 00       	nop
	CLEARBIT(OUTPUT_LED_PORT,(OUTPUT_LED_HIGH
								| OUTPUT_LED_MED));
	SETBIT(OUTPUT_LED_PORT,OUTPUT_LED_LOW);
	
	eeprom.write(LEVEL_ADDR,OUTPUT_LED_LOW);
}
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	0f 90       	pop	r0
    2c12:	df 91       	pop	r29
    2c14:	cf 91       	pop	r28
    2c16:	08 95       	ret

00002c18 <_GLOBAL__sub_I__Z14VolLimits_Initv>:
    2c18:	cf 93       	push	r28
    2c1a:	df 93       	push	r29
    2c1c:	cd b7       	in	r28, 0x3d	; 61
    2c1e:	de b7       	in	r29, 0x3e	; 62
    2c20:	6f ef       	ldi	r22, 0xFF	; 255
    2c22:	7f ef       	ldi	r23, 0xFF	; 255
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	cf df       	rcall	.-98     	; 0x2bc8 <_Z41__static_initialization_and_destruction_0ii>
    2c2a:	df 91       	pop	r29
    2c2c:	cf 91       	pop	r28
    2c2e:	08 95       	ret

00002c30 <_ZN7StepperC1Ev>:

#define STEPPER PORTB

//-----------------------------------------------------------------------------

Stepper::Stepper() {
    2c30:	cf 93       	push	r28
    2c32:	df 93       	push	r29
    2c34:	00 d0       	rcall	.+0      	; 0x2c36 <_ZN7StepperC1Ev+0x6>
    2c36:	cd b7       	in	r28, 0x3d	; 61
    2c38:	de b7       	in	r29, 0x3e	; 62
    2c3a:	9a 83       	std	Y+2, r25	; 0x02
    2c3c:	89 83       	std	Y+1, r24	; 0x01
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	9a 81       	ldd	r25, Y+2	; 0x02
    2c42:	26 e0       	ldi	r18, 0x06	; 6
    2c44:	fc 01       	movw	r30, r24
    2c46:	20 83       	st	Z, r18
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4c:	9c 01       	movw	r18, r24
    2c4e:	2b 5f       	subi	r18, 0xFB	; 251
    2c50:	3f 4f       	sbci	r19, 0xFF	; 255
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	9a 81       	ldd	r25, Y+2	; 0x02
    2c56:	fc 01       	movw	r30, r24
    2c58:	32 83       	std	Z+2, r19	; 0x02
    2c5a:	21 83       	std	Z+1, r18	; 0x01
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
    2c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c60:	9c 01       	movw	r18, r24
    2c62:	21 5f       	subi	r18, 0xF1	; 241
    2c64:	3f 4f       	sbci	r19, 0xFF	; 255
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
    2c68:	9a 81       	ldd	r25, Y+2	; 0x02
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	34 83       	std	Z+4, r19	; 0x04
    2c6e:	23 83       	std	Z+3, r18	; 0x03
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	9a 81       	ldd	r25, Y+2	; 0x02
    2c74:	25 e0       	ldi	r18, 0x05	; 5
    2c76:	fc 01       	movw	r30, r24
    2c78:	25 83       	std	Z+5, r18	; 0x05
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c7e:	9c 01       	movw	r18, r24
    2c80:	26 5f       	subi	r18, 0xF6	; 246
    2c82:	3f 4f       	sbci	r19, 0xFF	; 255
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	9a 81       	ldd	r25, Y+2	; 0x02
    2c88:	fc 01       	movw	r30, r24
    2c8a:	37 83       	std	Z+7, r19	; 0x07
    2c8c:	26 83       	std	Z+6, r18	; 0x06
    2c8e:	29 81       	ldd	r18, Y+1	; 0x01
    2c90:	3a 81       	ldd	r19, Y+2	; 0x02
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	9a 81       	ldd	r25, Y+2	; 0x02
    2c96:	fc 01       	movw	r30, r24
    2c98:	31 87       	std	Z+9, r19	; 0x09
    2c9a:	20 87       	std	Z+8, r18	; 0x08
    2c9c:	89 81       	ldd	r24, Y+1	; 0x01
    2c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca0:	29 e0       	ldi	r18, 0x09	; 9
    2ca2:	fc 01       	movw	r30, r24
    2ca4:	22 87       	std	Z+10, r18	; 0x0a
    2ca6:	89 81       	ldd	r24, Y+1	; 0x01
    2ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    2caa:	9c 01       	movw	r18, r24
    2cac:	21 5f       	subi	r18, 0xF1	; 241
    2cae:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	34 87       	std	Z+12, r19	; 0x0c
    2cb8:	23 87       	std	Z+11, r18	; 0x0b
    2cba:	89 81       	ldd	r24, Y+1	; 0x01
    2cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cbe:	9c 01       	movw	r18, r24
    2cc0:	2b 5f       	subi	r18, 0xFB	; 251
    2cc2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc4:	89 81       	ldd	r24, Y+1	; 0x01
    2cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc8:	fc 01       	movw	r30, r24
    2cca:	36 87       	std	Z+14, r19	; 0x0e
    2ccc:	25 87       	std	Z+13, r18	; 0x0d
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd2:	2a e0       	ldi	r18, 0x0A	; 10
    2cd4:	fc 01       	movw	r30, r24
    2cd6:	27 87       	std	Z+15, r18	; 0x0f
    2cd8:	29 81       	ldd	r18, Y+1	; 0x01
    2cda:	3a 81       	ldd	r19, Y+2	; 0x02
    2cdc:	89 81       	ldd	r24, Y+1	; 0x01
    2cde:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	31 8b       	std	Z+17, r19	; 0x11
    2ce4:	20 8b       	std	Z+16, r18	; 0x10
    2ce6:	89 81       	ldd	r24, Y+1	; 0x01
    2ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cea:	9c 01       	movw	r18, r24
    2cec:	26 5f       	subi	r18, 0xF6	; 246
    2cee:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf0:	89 81       	ldd	r24, Y+1	; 0x01
    2cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf4:	fc 01       	movw	r30, r24
    2cf6:	33 8b       	std	Z+19, r19	; 0x13
    2cf8:	22 8b       	std	Z+18, r18	; 0x12
	SETBIT(DDRB,((1 << PB5) | (1 << PB4) | (1 << PB3) | (1 << PB2)));
    2cfa:	84 e2       	ldi	r24, 0x24	; 36
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	24 e2       	ldi	r18, 0x24	; 36
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	f9 01       	movw	r30, r18
    2d04:	20 81       	ld	r18, Z
    2d06:	2c 63       	ori	r18, 0x3C	; 60
    2d08:	fc 01       	movw	r30, r24
    2d0a:	20 83       	st	Z, r18
	
	CLEARBIT(STEPPER,((1 << PB5) | (1 << PB4) | (1 << PB3) | (1 << PB2)));
    2d0c:	85 e2       	ldi	r24, 0x25	; 37
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	25 e2       	ldi	r18, 0x25	; 37
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	f9 01       	movw	r30, r18
    2d16:	20 81       	ld	r18, Z
    2d18:	23 7c       	andi	r18, 0xC3	; 195
    2d1a:	fc 01       	movw	r30, r24
    2d1c:	20 83       	st	Z, r18

	Pt = &fsm[3];
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
    2d20:	9a 81       	ldd	r25, Y+2	; 0x02
    2d22:	9c 01       	movw	r18, r24
    2d24:	21 5f       	subi	r18, 0xF1	; 241
    2d26:	3f 4f       	sbci	r19, 0xFF	; 255
    2d28:	89 81       	ldd	r24, Y+1	; 0x01
    2d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d2c:	fc 01       	movw	r30, r24
    2d2e:	35 8b       	std	Z+21, r19	; 0x15
    2d30:	24 8b       	std	Z+20, r18	; 0x14
}
    2d32:	00 00       	nop
    2d34:	0f 90       	pop	r0
    2d36:	0f 90       	pop	r0
    2d38:	df 91       	pop	r29
    2d3a:	cf 91       	pop	r28
    2d3c:	08 95       	ret

00002d3e <_ZN7Stepper2CWEv>:

//-----------------------------------------------------------------------------

void Stepper::CW(void) {
    2d3e:	cf 93       	push	r28
    2d40:	df 93       	push	r29
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
    2d46:	6e 97       	sbiw	r28, 0x1e	; 30
    2d48:	0f b6       	in	r0, 0x3f	; 63
    2d4a:	f8 94       	cli
    2d4c:	de bf       	out	0x3e, r29	; 62
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	cd bf       	out	0x3d, r28	; 61
    2d52:	9e 8f       	std	Y+30, r25	; 0x1e
    2d54:	8d 8f       	std	Y+29, r24	; 0x1d
	Pt = Pt->Next[CLOCKWISE];
    2d56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d58:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	84 89       	ldd	r24, Z+20	; 0x14
    2d5e:	95 89       	ldd	r25, Z+21	; 0x15
    2d60:	fc 01       	movw	r30, r24
    2d62:	23 81       	ldd	r18, Z+3	; 0x03
    2d64:	34 81       	ldd	r19, Z+4	; 0x04
    2d66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d68:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d6a:	fc 01       	movw	r30, r24
    2d6c:	35 8b       	std	Z+21, r19	; 0x15
    2d6e:	24 8b       	std	Z+20, r18	; 0x14
	SETBIT(STEPPER,(Pt->Out << 2));
    2d70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d72:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d74:	fc 01       	movw	r30, r24
    2d76:	84 89       	ldd	r24, Z+20	; 0x14
    2d78:	95 89       	ldd	r25, Z+21	; 0x15
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	80 81       	ld	r24, Z
    2d7e:	88 2f       	mov	r24, r24
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	ac 01       	movw	r20, r24
    2d84:	44 0f       	add	r20, r20
    2d86:	55 1f       	adc	r21, r21
    2d88:	44 0f       	add	r20, r20
    2d8a:	55 1f       	adc	r21, r21
    2d8c:	85 e2       	ldi	r24, 0x25	; 37
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	25 e2       	ldi	r18, 0x25	; 37
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	f9 01       	movw	r30, r18
    2d96:	20 81       	ld	r18, Z
    2d98:	32 2f       	mov	r19, r18
    2d9a:	24 2f       	mov	r18, r20
    2d9c:	23 2b       	or	r18, r19
    2d9e:	fc 01       	movw	r30, r24
    2da0:	20 83       	st	Z, r18
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	a0 ea       	ldi	r26, 0xA0	; 160
    2da8:	b1 e4       	ldi	r27, 0x41	; 65
    2daa:	89 83       	std	Y+1, r24	; 0x01
    2dac:	9a 83       	std	Y+2, r25	; 0x02
    2dae:	ab 83       	std	Y+3, r26	; 0x03
    2db0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	4a ef       	ldi	r20, 0xFA	; 250
    2db8:	54 e4       	ldi	r21, 0x44	; 68
    2dba:	69 81       	ldd	r22, Y+1	; 0x01
    2dbc:	7a 81       	ldd	r23, Y+2	; 0x02
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc2:	7d d3       	rcall	.+1786   	; 0x34be <__mulsf3>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	8b 8b       	std	Y+19, r24	; 0x13
    2dca:	9c 8b       	std	Y+20, r25	; 0x14
    2dcc:	ad 8b       	std	Y+21, r26	; 0x15
    2dce:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	40 e8       	ldi	r20, 0x80	; 128
    2dd6:	5f e3       	ldi	r21, 0x3F	; 63
    2dd8:	6b 89       	ldd	r22, Y+19	; 0x13
    2dda:	7c 89       	ldd	r23, Y+20	; 0x14
    2ddc:	8d 89       	ldd	r24, Y+21	; 0x15
    2dde:	9e 89       	ldd	r25, Y+22	; 0x16
    2de0:	ed d2       	rcall	.+1498   	; 0x33bc <__cmpsf2>
    2de2:	88 23       	and	r24, r24
    2de4:	2c f4       	brge	.+10     	; 0x2df0 <_ZN7Stepper2CWEv+0xb2>
		__ticks = 1;
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	98 8f       	std	Y+24, r25	; 0x18
    2dec:	8f 8b       	std	Y+23, r24	; 0x17
    2dee:	3a c0       	rjmp	.+116    	; 0x2e64 <_ZN7Stepper2CWEv+0x126>
	else if (__tmp > 65535)
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	3f ef       	ldi	r19, 0xFF	; 255
    2df4:	4f e7       	ldi	r20, 0x7F	; 127
    2df6:	57 e4       	ldi	r21, 0x47	; 71
    2df8:	6b 89       	ldd	r22, Y+19	; 0x13
    2dfa:	7c 89       	ldd	r23, Y+20	; 0x14
    2dfc:	8d 89       	ldd	r24, Y+21	; 0x15
    2dfe:	9e 89       	ldd	r25, Y+22	; 0x16
    2e00:	5a d3       	rcall	.+1716   	; 0x34b6 <__gesf2>
    2e02:	18 16       	cp	r1, r24
    2e04:	34 f5       	brge	.+76     	; 0x2e52 <_ZN7Stepper2CWEv+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	40 e2       	ldi	r20, 0x20	; 32
    2e0c:	51 e4       	ldi	r21, 0x41	; 65
    2e0e:	69 81       	ldd	r22, Y+1	; 0x01
    2e10:	7a 81       	ldd	r23, Y+2	; 0x02
    2e12:	8b 81       	ldd	r24, Y+3	; 0x03
    2e14:	9c 81       	ldd	r25, Y+4	; 0x04
    2e16:	53 d3       	rcall	.+1702   	; 0x34be <__mulsf3>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	bc 01       	movw	r22, r24
    2e1e:	cd 01       	movw	r24, r26
    2e20:	d1 d2       	rcall	.+1442   	; 0x33c4 <__fixunssfsi>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	98 8f       	std	Y+24, r25	; 0x18
    2e28:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
    2e2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e2e:	89 2b       	or	r24, r25
    2e30:	19 f1       	breq	.+70     	; 0x2e78 <_ZN7Stepper2CWEv+0x13a>
    2e32:	88 ec       	ldi	r24, 0xC8	; 200
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	9a 8f       	std	Y+26, r25	; 0x1a
    2e38:	89 8f       	std	Y+25, r24	; 0x19
    2e3a:	89 8d       	ldd	r24, Y+25	; 0x19
    2e3c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	f1 f7       	brne	.-4      	; 0x2e3e <_ZN7Stepper2CWEv+0x100>
    2e42:	9a 8f       	std	Y+26, r25	; 0x1a
    2e44:	89 8f       	std	Y+25, r24	; 0x19
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e46:	8f 89       	ldd	r24, Y+23	; 0x17
    2e48:	98 8d       	ldd	r25, Y+24	; 0x18
    2e4a:	01 97       	sbiw	r24, 0x01	; 1
    2e4c:	98 8f       	std	Y+24, r25	; 0x18
    2e4e:	8f 8b       	std	Y+23, r24	; 0x17
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e50:	ec cf       	rjmp	.-40     	; 0x2e2a <_ZN7Stepper2CWEv+0xec>
    2e52:	6b 89       	ldd	r22, Y+19	; 0x13
    2e54:	7c 89       	ldd	r23, Y+20	; 0x14
    2e56:	8d 89       	ldd	r24, Y+21	; 0x15
    2e58:	9e 89       	ldd	r25, Y+22	; 0x16
    2e5a:	b4 d2       	rcall	.+1384   	; 0x33c4 <__fixunssfsi>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	98 8f       	std	Y+24, r25	; 0x18
    2e62:	8f 8b       	std	Y+23, r24	; 0x17
    2e64:	8f 89       	ldd	r24, Y+23	; 0x17
    2e66:	98 8d       	ldd	r25, Y+24	; 0x18
    2e68:	9c 8f       	std	Y+28, r25	; 0x1c
    2e6a:	8b 8f       	std	Y+27, r24	; 0x1b
    2e6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	f1 f7       	brne	.-4      	; 0x2e70 <_ZN7Stepper2CWEv+0x132>
    2e74:	9c 8f       	std	Y+28, r25	; 0x1c
    2e76:	8b 8f       	std	Y+27, r24	; 0x1b

	_delay_ms(STEPPER_DELAY);
	CLEARBIT(STEPPER,(Pt->Out << 2));
    2e78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e7c:	fc 01       	movw	r30, r24
    2e7e:	84 89       	ldd	r24, Z+20	; 0x14
    2e80:	95 89       	ldd	r25, Z+21	; 0x15
    2e82:	fc 01       	movw	r30, r24
    2e84:	80 81       	ld	r24, Z
    2e86:	88 2f       	mov	r24, r24
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	88 0f       	add	r24, r24
    2e8c:	99 1f       	adc	r25, r25
    2e8e:	88 0f       	add	r24, r24
    2e90:	99 1f       	adc	r25, r25
    2e92:	ac 01       	movw	r20, r24
    2e94:	40 95       	com	r20
    2e96:	50 95       	com	r21
    2e98:	85 e2       	ldi	r24, 0x25	; 37
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	25 e2       	ldi	r18, 0x25	; 37
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	f9 01       	movw	r30, r18
    2ea2:	20 81       	ld	r18, Z
    2ea4:	32 2f       	mov	r19, r18
    2ea6:	24 2f       	mov	r18, r20
    2ea8:	23 23       	and	r18, r19
    2eaa:	fc 01       	movw	r30, r24
    2eac:	20 83       	st	Z, r18
	
	Pt = Pt->Next[CLOCKWISE];
    2eae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	84 89       	ldd	r24, Z+20	; 0x14
    2eb6:	95 89       	ldd	r25, Z+21	; 0x15
    2eb8:	fc 01       	movw	r30, r24
    2eba:	23 81       	ldd	r18, Z+3	; 0x03
    2ebc:	34 81       	ldd	r19, Z+4	; 0x04
    2ebe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ec0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	35 8b       	std	Z+21, r19	; 0x15
    2ec6:	24 8b       	std	Z+20, r18	; 0x14
	SETBIT(STEPPER,(Pt->Out << 2));
    2ec8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ecc:	fc 01       	movw	r30, r24
    2ece:	84 89       	ldd	r24, Z+20	; 0x14
    2ed0:	95 89       	ldd	r25, Z+21	; 0x15
    2ed2:	fc 01       	movw	r30, r24
    2ed4:	80 81       	ld	r24, Z
    2ed6:	88 2f       	mov	r24, r24
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	ac 01       	movw	r20, r24
    2edc:	44 0f       	add	r20, r20
    2ede:	55 1f       	adc	r21, r21
    2ee0:	44 0f       	add	r20, r20
    2ee2:	55 1f       	adc	r21, r21
    2ee4:	85 e2       	ldi	r24, 0x25	; 37
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	25 e2       	ldi	r18, 0x25	; 37
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	f9 01       	movw	r30, r18
    2eee:	20 81       	ld	r18, Z
    2ef0:	32 2f       	mov	r19, r18
    2ef2:	24 2f       	mov	r18, r20
    2ef4:	23 2b       	or	r18, r19
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	20 83       	st	Z, r18
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	a0 ea       	ldi	r26, 0xA0	; 160
    2f00:	b1 e4       	ldi	r27, 0x41	; 65
    2f02:	8d 83       	std	Y+5, r24	; 0x05
    2f04:	9e 83       	std	Y+6, r25	; 0x06
    2f06:	af 83       	std	Y+7, r26	; 0x07
    2f08:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	4a ef       	ldi	r20, 0xFA	; 250
    2f10:	54 e4       	ldi	r21, 0x44	; 68
    2f12:	6d 81       	ldd	r22, Y+5	; 0x05
    2f14:	7e 81       	ldd	r23, Y+6	; 0x06
    2f16:	8f 81       	ldd	r24, Y+7	; 0x07
    2f18:	98 85       	ldd	r25, Y+8	; 0x08
    2f1a:	d1 d2       	rcall	.+1442   	; 0x34be <__mulsf3>
    2f1c:	dc 01       	movw	r26, r24
    2f1e:	cb 01       	movw	r24, r22
    2f20:	89 87       	std	Y+9, r24	; 0x09
    2f22:	9a 87       	std	Y+10, r25	; 0x0a
    2f24:	ab 87       	std	Y+11, r26	; 0x0b
    2f26:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	40 e8       	ldi	r20, 0x80	; 128
    2f2e:	5f e3       	ldi	r21, 0x3F	; 63
    2f30:	69 85       	ldd	r22, Y+9	; 0x09
    2f32:	7a 85       	ldd	r23, Y+10	; 0x0a
    2f34:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f36:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f38:	41 d2       	rcall	.+1154   	; 0x33bc <__cmpsf2>
    2f3a:	88 23       	and	r24, r24
    2f3c:	2c f4       	brge	.+10     	; 0x2f48 <_ZN7Stepper2CWEv+0x20a>
		__ticks = 1;
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	9e 87       	std	Y+14, r25	; 0x0e
    2f44:	8d 87       	std	Y+13, r24	; 0x0d
    2f46:	3a c0       	rjmp	.+116    	; 0x2fbc <_ZN7Stepper2CWEv+0x27e>
	else if (__tmp > 65535)
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	3f ef       	ldi	r19, 0xFF	; 255
    2f4c:	4f e7       	ldi	r20, 0x7F	; 127
    2f4e:	57 e4       	ldi	r21, 0x47	; 71
    2f50:	69 85       	ldd	r22, Y+9	; 0x09
    2f52:	7a 85       	ldd	r23, Y+10	; 0x0a
    2f54:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f56:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f58:	ae d2       	rcall	.+1372   	; 0x34b6 <__gesf2>
    2f5a:	18 16       	cp	r1, r24
    2f5c:	34 f5       	brge	.+76     	; 0x2faa <_ZN7Stepper2CWEv+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	40 e2       	ldi	r20, 0x20	; 32
    2f64:	51 e4       	ldi	r21, 0x41	; 65
    2f66:	6d 81       	ldd	r22, Y+5	; 0x05
    2f68:	7e 81       	ldd	r23, Y+6	; 0x06
    2f6a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f6c:	98 85       	ldd	r25, Y+8	; 0x08
    2f6e:	a7 d2       	rcall	.+1358   	; 0x34be <__mulsf3>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	bc 01       	movw	r22, r24
    2f76:	cd 01       	movw	r24, r26
    2f78:	25 d2       	rcall	.+1098   	; 0x33c4 <__fixunssfsi>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	9e 87       	std	Y+14, r25	; 0x0e
    2f80:	8d 87       	std	Y+13, r24	; 0x0d
    2f82:	8d 85       	ldd	r24, Y+13	; 0x0d
		while(__ticks)
    2f84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f86:	89 2b       	or	r24, r25
    2f88:	19 f1       	breq	.+70     	; 0x2fd0 <_ZN7Stepper2CWEv+0x292>
    2f8a:	88 ec       	ldi	r24, 0xC8	; 200
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	98 8b       	std	Y+16, r25	; 0x10
    2f90:	8f 87       	std	Y+15, r24	; 0x0f
    2f92:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f94:	98 89       	ldd	r25, Y+16	; 0x10
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	f1 f7       	brne	.-4      	; 0x2f96 <_ZN7Stepper2CWEv+0x258>
    2f9a:	98 8b       	std	Y+16, r25	; 0x10
    2f9c:	8f 87       	std	Y+15, r24	; 0x0f
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fa2:	01 97       	sbiw	r24, 0x01	; 1
    2fa4:	9e 87       	std	Y+14, r25	; 0x0e
    2fa6:	8d 87       	std	Y+13, r24	; 0x0d
    2fa8:	ec cf       	rjmp	.-40     	; 0x2f82 <_ZN7Stepper2CWEv+0x244>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2faa:	69 85       	ldd	r22, Y+9	; 0x09
    2fac:	7a 85       	ldd	r23, Y+10	; 0x0a
    2fae:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fb0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fb2:	08 d2       	rcall	.+1040   	; 0x33c4 <__fixunssfsi>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	9e 87       	std	Y+14, r25	; 0x0e
    2fba:	8d 87       	std	Y+13, r24	; 0x0d
    2fbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc0:	9a 8b       	std	Y+18, r25	; 0x12
    2fc2:	89 8b       	std	Y+17, r24	; 0x11
    2fc4:	89 89       	ldd	r24, Y+17	; 0x11
    2fc6:	9a 89       	ldd	r25, Y+18	; 0x12
    2fc8:	01 97       	sbiw	r24, 0x01	; 1
    2fca:	f1 f7       	brne	.-4      	; 0x2fc8 <_ZN7Stepper2CWEv+0x28a>
    2fcc:	9a 8b       	std	Y+18, r25	; 0x12
    2fce:	89 8b       	std	Y+17, r24	; 0x11
    2fd0:	85 e2       	ldi	r24, 0x25	; 37

	_delay_ms(STEPPER_DELAY);
	CLEARBIT(STEPPER,((1 << PB5) | (1 << PB4) | (1 << PB3) | (1 << PB2)));
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	25 e2       	ldi	r18, 0x25	; 37
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	f9 01       	movw	r30, r18
    2fda:	20 81       	ld	r18, Z
    2fdc:	23 7c       	andi	r18, 0xC3	; 195
    2fde:	fc 01       	movw	r30, r24
    2fe0:	20 83       	st	Z, r18
    2fe2:	00 00       	nop
}
    2fe4:	6e 96       	adiw	r28, 0x1e	; 30
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	f8 94       	cli
    2fea:	de bf       	out	0x3e, r29	; 62
    2fec:	0f be       	out	0x3f, r0	; 63
    2fee:	cd bf       	out	0x3d, r28	; 61
    2ff0:	df 91       	pop	r29
    2ff2:	cf 91       	pop	r28
    2ff4:	08 95       	ret

00002ff6 <_ZN7Stepper3CCWEv>:
    2ff6:	cf 93       	push	r28

//-----------------------------------------------------------------------------

void Stepper::CCW(void) {
    2ff8:	df 93       	push	r29
    2ffa:	cd b7       	in	r28, 0x3d	; 61
    2ffc:	de b7       	in	r29, 0x3e	; 62
    2ffe:	6e 97       	sbiw	r28, 0x1e	; 30
    3000:	0f b6       	in	r0, 0x3f	; 63
    3002:	f8 94       	cli
    3004:	de bf       	out	0x3e, r29	; 62
    3006:	0f be       	out	0x3f, r0	; 63
    3008:	cd bf       	out	0x3d, r28	; 61
    300a:	9e 8f       	std	Y+30, r25	; 0x1e
    300c:	8d 8f       	std	Y+29, r24	; 0x1d
    300e:	8d 8d       	ldd	r24, Y+29	; 0x1d
	Pt = Pt->Next[COUNTERCLOCKWISE];
    3010:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3012:	fc 01       	movw	r30, r24
    3014:	84 89       	ldd	r24, Z+20	; 0x14
    3016:	95 89       	ldd	r25, Z+21	; 0x15
    3018:	fc 01       	movw	r30, r24
    301a:	21 81       	ldd	r18, Z+1	; 0x01
    301c:	32 81       	ldd	r19, Z+2	; 0x02
    301e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3020:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3022:	fc 01       	movw	r30, r24
    3024:	35 8b       	std	Z+21, r19	; 0x15
    3026:	24 8b       	std	Z+20, r18	; 0x14
    3028:	8d 8d       	ldd	r24, Y+29	; 0x1d
	SETBIT(STEPPER,(Pt->Out << 2));
    302a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    302c:	fc 01       	movw	r30, r24
    302e:	84 89       	ldd	r24, Z+20	; 0x14
    3030:	95 89       	ldd	r25, Z+21	; 0x15
    3032:	fc 01       	movw	r30, r24
    3034:	80 81       	ld	r24, Z
    3036:	88 2f       	mov	r24, r24
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	ac 01       	movw	r20, r24
    303c:	44 0f       	add	r20, r20
    303e:	55 1f       	adc	r21, r21
    3040:	44 0f       	add	r20, r20
    3042:	55 1f       	adc	r21, r21
    3044:	85 e2       	ldi	r24, 0x25	; 37
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	25 e2       	ldi	r18, 0x25	; 37
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	f9 01       	movw	r30, r18
    304e:	20 81       	ld	r18, Z
    3050:	32 2f       	mov	r19, r18
    3052:	24 2f       	mov	r18, r20
    3054:	23 2b       	or	r18, r19
    3056:	fc 01       	movw	r30, r24
    3058:	20 83       	st	Z, r18
    305a:	80 e0       	ldi	r24, 0x00	; 0
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	a0 ea       	ldi	r26, 0xA0	; 160
    3060:	b1 e4       	ldi	r27, 0x41	; 65
    3062:	89 83       	std	Y+1, r24	; 0x01
    3064:	9a 83       	std	Y+2, r25	; 0x02
    3066:	ab 83       	std	Y+3, r26	; 0x03
    3068:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	4a ef       	ldi	r20, 0xFA	; 250
    3070:	54 e4       	ldi	r21, 0x44	; 68
    3072:	69 81       	ldd	r22, Y+1	; 0x01
    3074:	7a 81       	ldd	r23, Y+2	; 0x02
    3076:	8b 81       	ldd	r24, Y+3	; 0x03
    3078:	9c 81       	ldd	r25, Y+4	; 0x04
    307a:	21 d2       	rcall	.+1090   	; 0x34be <__mulsf3>
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	8b 8b       	std	Y+19, r24	; 0x13
    3082:	9c 8b       	std	Y+20, r25	; 0x14
    3084:	ad 8b       	std	Y+21, r26	; 0x15
    3086:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3088:	20 e0       	ldi	r18, 0x00	; 0
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	40 e8       	ldi	r20, 0x80	; 128
    308e:	5f e3       	ldi	r21, 0x3F	; 63
    3090:	6b 89       	ldd	r22, Y+19	; 0x13
    3092:	7c 89       	ldd	r23, Y+20	; 0x14
    3094:	8d 89       	ldd	r24, Y+21	; 0x15
    3096:	9e 89       	ldd	r25, Y+22	; 0x16
    3098:	91 d1       	rcall	.+802    	; 0x33bc <__cmpsf2>
    309a:	88 23       	and	r24, r24
    309c:	2c f4       	brge	.+10     	; 0x30a8 <_ZN7Stepper3CCWEv+0xb2>
		__ticks = 1;
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	98 8f       	std	Y+24, r25	; 0x18
    30a4:	8f 8b       	std	Y+23, r24	; 0x17
    30a6:	3a c0       	rjmp	.+116    	; 0x311c <_ZN7Stepper3CCWEv+0x126>
	else if (__tmp > 65535)
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	3f ef       	ldi	r19, 0xFF	; 255
    30ac:	4f e7       	ldi	r20, 0x7F	; 127
    30ae:	57 e4       	ldi	r21, 0x47	; 71
    30b0:	6b 89       	ldd	r22, Y+19	; 0x13
    30b2:	7c 89       	ldd	r23, Y+20	; 0x14
    30b4:	8d 89       	ldd	r24, Y+21	; 0x15
    30b6:	9e 89       	ldd	r25, Y+22	; 0x16
    30b8:	fe d1       	rcall	.+1020   	; 0x34b6 <__gesf2>
    30ba:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30bc:	34 f5       	brge	.+76     	; 0x310a <_ZN7Stepper3CCWEv+0x114>
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	40 e2       	ldi	r20, 0x20	; 32
    30c4:	51 e4       	ldi	r21, 0x41	; 65
    30c6:	69 81       	ldd	r22, Y+1	; 0x01
    30c8:	7a 81       	ldd	r23, Y+2	; 0x02
    30ca:	8b 81       	ldd	r24, Y+3	; 0x03
    30cc:	9c 81       	ldd	r25, Y+4	; 0x04
    30ce:	f7 d1       	rcall	.+1006   	; 0x34be <__mulsf3>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	bc 01       	movw	r22, r24
    30d6:	cd 01       	movw	r24, r26
    30d8:	75 d1       	rcall	.+746    	; 0x33c4 <__fixunssfsi>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	98 8f       	std	Y+24, r25	; 0x18
    30e0:	8f 8b       	std	Y+23, r24	; 0x17
    30e2:	8f 89       	ldd	r24, Y+23	; 0x17
		while(__ticks)
    30e4:	98 8d       	ldd	r25, Y+24	; 0x18
    30e6:	89 2b       	or	r24, r25
    30e8:	19 f1       	breq	.+70     	; 0x3130 <_ZN7Stepper3CCWEv+0x13a>
    30ea:	88 ec       	ldi	r24, 0xC8	; 200
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	9a 8f       	std	Y+26, r25	; 0x1a
    30f0:	89 8f       	std	Y+25, r24	; 0x19
    30f2:	89 8d       	ldd	r24, Y+25	; 0x19
    30f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    30f6:	01 97       	sbiw	r24, 0x01	; 1
    30f8:	f1 f7       	brne	.-4      	; 0x30f6 <_ZN7Stepper3CCWEv+0x100>
    30fa:	9a 8f       	std	Y+26, r25	; 0x1a
    30fc:	89 8f       	std	Y+25, r24	; 0x19
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3100:	98 8d       	ldd	r25, Y+24	; 0x18
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	98 8f       	std	Y+24, r25	; 0x18
    3106:	8f 8b       	std	Y+23, r24	; 0x17
    3108:	ec cf       	rjmp	.-40     	; 0x30e2 <_ZN7Stepper3CCWEv+0xec>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    310a:	6b 89       	ldd	r22, Y+19	; 0x13
    310c:	7c 89       	ldd	r23, Y+20	; 0x14
    310e:	8d 89       	ldd	r24, Y+21	; 0x15
    3110:	9e 89       	ldd	r25, Y+22	; 0x16
    3112:	58 d1       	rcall	.+688    	; 0x33c4 <__fixunssfsi>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	98 8f       	std	Y+24, r25	; 0x18
    311a:	8f 8b       	std	Y+23, r24	; 0x17
    311c:	8f 89       	ldd	r24, Y+23	; 0x17
    311e:	98 8d       	ldd	r25, Y+24	; 0x18
    3120:	9c 8f       	std	Y+28, r25	; 0x1c
    3122:	8b 8f       	std	Y+27, r24	; 0x1b
    3124:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3126:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	f1 f7       	brne	.-4      	; 0x3128 <_ZN7Stepper3CCWEv+0x132>
    312c:	9c 8f       	std	Y+28, r25	; 0x1c
    312e:	8b 8f       	std	Y+27, r24	; 0x1b
    3130:	8d 8d       	ldd	r24, Y+29	; 0x1d

	_delay_ms(STEPPER_DELAY);
	CLEARBIT(STEPPER,(Pt->Out << 2));
    3132:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3134:	fc 01       	movw	r30, r24
    3136:	84 89       	ldd	r24, Z+20	; 0x14
    3138:	95 89       	ldd	r25, Z+21	; 0x15
    313a:	fc 01       	movw	r30, r24
    313c:	80 81       	ld	r24, Z
    313e:	88 2f       	mov	r24, r24
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	88 0f       	add	r24, r24
    3144:	99 1f       	adc	r25, r25
    3146:	88 0f       	add	r24, r24
    3148:	99 1f       	adc	r25, r25
    314a:	ac 01       	movw	r20, r24
    314c:	40 95       	com	r20
    314e:	50 95       	com	r21
    3150:	85 e2       	ldi	r24, 0x25	; 37
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	25 e2       	ldi	r18, 0x25	; 37
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	f9 01       	movw	r30, r18
    315a:	20 81       	ld	r18, Z
    315c:	32 2f       	mov	r19, r18
    315e:	24 2f       	mov	r18, r20
    3160:	23 23       	and	r18, r19
    3162:	fc 01       	movw	r30, r24
    3164:	20 83       	st	Z, r18
    3166:	8d 8d       	ldd	r24, Y+29	; 0x1d
	
	Pt = Pt->Next[COUNTERCLOCKWISE];
    3168:	9e 8d       	ldd	r25, Y+30	; 0x1e
    316a:	fc 01       	movw	r30, r24
    316c:	84 89       	ldd	r24, Z+20	; 0x14
    316e:	95 89       	ldd	r25, Z+21	; 0x15
    3170:	fc 01       	movw	r30, r24
    3172:	21 81       	ldd	r18, Z+1	; 0x01
    3174:	32 81       	ldd	r19, Z+2	; 0x02
    3176:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3178:	9e 8d       	ldd	r25, Y+30	; 0x1e
    317a:	fc 01       	movw	r30, r24
    317c:	35 8b       	std	Z+21, r19	; 0x15
    317e:	24 8b       	std	Z+20, r18	; 0x14
    3180:	8d 8d       	ldd	r24, Y+29	; 0x1d
	SETBIT(STEPPER,(Pt->Out << 2));
    3182:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3184:	fc 01       	movw	r30, r24
    3186:	84 89       	ldd	r24, Z+20	; 0x14
    3188:	95 89       	ldd	r25, Z+21	; 0x15
    318a:	fc 01       	movw	r30, r24
    318c:	80 81       	ld	r24, Z
    318e:	88 2f       	mov	r24, r24
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	ac 01       	movw	r20, r24
    3194:	44 0f       	add	r20, r20
    3196:	55 1f       	adc	r21, r21
    3198:	44 0f       	add	r20, r20
    319a:	55 1f       	adc	r21, r21
    319c:	85 e2       	ldi	r24, 0x25	; 37
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	25 e2       	ldi	r18, 0x25	; 37
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	f9 01       	movw	r30, r18
    31a6:	20 81       	ld	r18, Z
    31a8:	32 2f       	mov	r19, r18
    31aa:	24 2f       	mov	r18, r20
    31ac:	23 2b       	or	r18, r19
    31ae:	fc 01       	movw	r30, r24
    31b0:	20 83       	st	Z, r18
    31b2:	80 e0       	ldi	r24, 0x00	; 0
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	a0 ea       	ldi	r26, 0xA0	; 160
    31b8:	b1 e4       	ldi	r27, 0x41	; 65
    31ba:	8d 83       	std	Y+5, r24	; 0x05
    31bc:	9e 83       	std	Y+6, r25	; 0x06
    31be:	af 83       	std	Y+7, r26	; 0x07
    31c0:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	4a ef       	ldi	r20, 0xFA	; 250
    31c8:	54 e4       	ldi	r21, 0x44	; 68
    31ca:	6d 81       	ldd	r22, Y+5	; 0x05
    31cc:	7e 81       	ldd	r23, Y+6	; 0x06
    31ce:	8f 81       	ldd	r24, Y+7	; 0x07
    31d0:	98 85       	ldd	r25, Y+8	; 0x08
    31d2:	75 d1       	rcall	.+746    	; 0x34be <__mulsf3>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	89 87       	std	Y+9, r24	; 0x09
    31da:	9a 87       	std	Y+10, r25	; 0x0a
    31dc:	ab 87       	std	Y+11, r26	; 0x0b
    31de:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	40 e8       	ldi	r20, 0x80	; 128
    31e6:	5f e3       	ldi	r21, 0x3F	; 63
    31e8:	69 85       	ldd	r22, Y+9	; 0x09
    31ea:	7a 85       	ldd	r23, Y+10	; 0x0a
    31ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    31ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    31f0:	e5 d0       	rcall	.+458    	; 0x33bc <__cmpsf2>
    31f2:	88 23       	and	r24, r24
    31f4:	2c f4       	brge	.+10     	; 0x3200 <_ZN7Stepper3CCWEv+0x20a>
		__ticks = 1;
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	9e 87       	std	Y+14, r25	; 0x0e
    31fc:	8d 87       	std	Y+13, r24	; 0x0d
	else if (__tmp > 65535)
    31fe:	3a c0       	rjmp	.+116    	; 0x3274 <_ZN7Stepper3CCWEv+0x27e>
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	3f ef       	ldi	r19, 0xFF	; 255
    3204:	4f e7       	ldi	r20, 0x7F	; 127
    3206:	57 e4       	ldi	r21, 0x47	; 71
    3208:	69 85       	ldd	r22, Y+9	; 0x09
    320a:	7a 85       	ldd	r23, Y+10	; 0x0a
    320c:	8b 85       	ldd	r24, Y+11	; 0x0b
    320e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3210:	52 d1       	rcall	.+676    	; 0x34b6 <__gesf2>
    3212:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3214:	34 f5       	brge	.+76     	; 0x3262 <_ZN7Stepper3CCWEv+0x26c>
    3216:	20 e0       	ldi	r18, 0x00	; 0
    3218:	30 e0       	ldi	r19, 0x00	; 0
    321a:	40 e2       	ldi	r20, 0x20	; 32
    321c:	51 e4       	ldi	r21, 0x41	; 65
    321e:	6d 81       	ldd	r22, Y+5	; 0x05
    3220:	7e 81       	ldd	r23, Y+6	; 0x06
    3222:	8f 81       	ldd	r24, Y+7	; 0x07
    3224:	98 85       	ldd	r25, Y+8	; 0x08
    3226:	4b d1       	rcall	.+662    	; 0x34be <__mulsf3>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	bc 01       	movw	r22, r24
    322e:	cd 01       	movw	r24, r26
    3230:	c9 d0       	rcall	.+402    	; 0x33c4 <__fixunssfsi>
    3232:	dc 01       	movw	r26, r24
    3234:	cb 01       	movw	r24, r22
    3236:	9e 87       	std	Y+14, r25	; 0x0e
    3238:	8d 87       	std	Y+13, r24	; 0x0d
    323a:	8d 85       	ldd	r24, Y+13	; 0x0d
		while(__ticks)
    323c:	9e 85       	ldd	r25, Y+14	; 0x0e
    323e:	89 2b       	or	r24, r25
    3240:	19 f1       	breq	.+70     	; 0x3288 <_ZN7Stepper3CCWEv+0x292>
    3242:	88 ec       	ldi	r24, 0xC8	; 200
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	98 8b       	std	Y+16, r25	; 0x10
    3248:	8f 87       	std	Y+15, r24	; 0x0f
    324a:	8f 85       	ldd	r24, Y+15	; 0x0f
    324c:	98 89       	ldd	r25, Y+16	; 0x10
    324e:	01 97       	sbiw	r24, 0x01	; 1
    3250:	f1 f7       	brne	.-4      	; 0x324e <_ZN7Stepper3CCWEv+0x258>
    3252:	98 8b       	std	Y+16, r25	; 0x10
    3254:	8f 87       	std	Y+15, r24	; 0x0f
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3256:	8d 85       	ldd	r24, Y+13	; 0x0d
    3258:	9e 85       	ldd	r25, Y+14	; 0x0e
    325a:	01 97       	sbiw	r24, 0x01	; 1
    325c:	9e 87       	std	Y+14, r25	; 0x0e
    325e:	8d 87       	std	Y+13, r24	; 0x0d
    3260:	ec cf       	rjmp	.-40     	; 0x323a <_ZN7Stepper3CCWEv+0x244>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3262:	69 85       	ldd	r22, Y+9	; 0x09
    3264:	7a 85       	ldd	r23, Y+10	; 0x0a
    3266:	8b 85       	ldd	r24, Y+11	; 0x0b
    3268:	9c 85       	ldd	r25, Y+12	; 0x0c
    326a:	ac d0       	rcall	.+344    	; 0x33c4 <__fixunssfsi>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	9e 87       	std	Y+14, r25	; 0x0e
    3272:	8d 87       	std	Y+13, r24	; 0x0d
    3274:	8d 85       	ldd	r24, Y+13	; 0x0d
    3276:	9e 85       	ldd	r25, Y+14	; 0x0e
    3278:	9a 8b       	std	Y+18, r25	; 0x12
    327a:	89 8b       	std	Y+17, r24	; 0x11
    327c:	89 89       	ldd	r24, Y+17	; 0x11
    327e:	9a 89       	ldd	r25, Y+18	; 0x12
    3280:	01 97       	sbiw	r24, 0x01	; 1
    3282:	f1 f7       	brne	.-4      	; 0x3280 <_ZN7Stepper3CCWEv+0x28a>
    3284:	9a 8b       	std	Y+18, r25	; 0x12
    3286:	89 8b       	std	Y+17, r24	; 0x11
    3288:	85 e2       	ldi	r24, 0x25	; 37

	_delay_ms(STEPPER_DELAY);
	CLEARBIT(STEPPER,((1 << PB5) | (1 << PB4) | (1 << PB3) | (1 << PB2)));
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	25 e2       	ldi	r18, 0x25	; 37
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	f9 01       	movw	r30, r18
    3292:	20 81       	ld	r18, Z
    3294:	23 7c       	andi	r18, 0xC3	; 195
    3296:	fc 01       	movw	r30, r24
    3298:	20 83       	st	Z, r18
    329a:	00 00       	nop
}
    329c:	6e 96       	adiw	r28, 0x1e	; 30
    329e:	0f b6       	in	r0, 0x3f	; 63
    32a0:	f8 94       	cli
    32a2:	de bf       	out	0x3e, r29	; 62
    32a4:	0f be       	out	0x3f, r0	; 63
    32a6:	cd bf       	out	0x3d, r28	; 61
    32a8:	df 91       	pop	r29
    32aa:	cf 91       	pop	r28
    32ac:	08 95       	ret

000032ae <_ZN6EEPROMC1Ev>:

//-----------------------------------------------------------------------------

class EEPROM {
public:
	EEPROM() {
    32ae:	cf 93       	push	r28
    32b0:	df 93       	push	r29
    32b2:	00 d0       	rcall	.+0      	; 0x32b4 <_ZN6EEPROMC1Ev+0x6>
    32b4:	cd b7       	in	r28, 0x3d	; 61
    32b6:	de b7       	in	r29, 0x3e	; 62
    32b8:	9a 83       	std	Y+2, r25	; 0x02
    32ba:	89 83       	std	Y+1, r24	; 0x01
		EECR = 0;
    32bc:	8f e3       	ldi	r24, 0x3F	; 63
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	fc 01       	movw	r30, r24
    32c2:	10 82       	st	Z, r1
	}
    32c4:	00 00       	nop
    32c6:	0f 90       	pop	r0
    32c8:	0f 90       	pop	r0
    32ca:	df 91       	pop	r29
    32cc:	cf 91       	pop	r28
    32ce:	08 95       	ret

000032d0 <_ZN6EEPROM5writeEjh>:

	bool write(uint16_t address, uint8_t data) {
    32d0:	cf 93       	push	r28
    32d2:	df 93       	push	r29
    32d4:	00 d0       	rcall	.+0      	; 0x32d6 <_ZN6EEPROM5writeEjh+0x6>
    32d6:	00 d0       	rcall	.+0      	; 0x32d8 <_ZN6EEPROM5writeEjh+0x8>
    32d8:	1f 92       	push	r1
    32da:	cd b7       	in	r28, 0x3d	; 61
    32dc:	de b7       	in	r29, 0x3e	; 62
    32de:	9a 83       	std	Y+2, r25	; 0x02
    32e0:	89 83       	std	Y+1, r24	; 0x01
    32e2:	7c 83       	std	Y+4, r23	; 0x04
    32e4:	6b 83       	std	Y+3, r22	; 0x03
    32e6:	4d 83       	std	Y+5, r20	; 0x05
		// Wait for previous write to complete
		while (CHECKBIT(EECR,(1 << EEPE)));
    32e8:	8f e3       	ldi	r24, 0x3F	; 63
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	fc 01       	movw	r30, r24
    32ee:	80 81       	ld	r24, Z
    32f0:	88 2f       	mov	r24, r24
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	82 70       	andi	r24, 0x02	; 2
    32f6:	99 27       	eor	r25, r25
    32f8:	21 e0       	ldi	r18, 0x01	; 1
    32fa:	89 2b       	or	r24, r25
    32fc:	09 f4       	brne	.+2      	; 0x3300 <_ZN6EEPROM5writeEjh+0x30>
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	22 23       	and	r18, r18
    3302:	09 f0       	breq	.+2      	; 0x3306 <_ZN6EEPROM5writeEjh+0x36>
    3304:	f1 cf       	rjmp	.-30     	; 0x32e8 <_ZN6EEPROM5writeEjh+0x18>

		EEAR = address;
    3306:	81 e4       	ldi	r24, 0x41	; 65
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	2b 81       	ldd	r18, Y+3	; 0x03
    330c:	3c 81       	ldd	r19, Y+4	; 0x04
    330e:	fc 01       	movw	r30, r24
    3310:	31 83       	std	Z+1, r19	; 0x01
    3312:	20 83       	st	Z, r18
		EEDR = data;						// Write data
    3314:	80 e4       	ldi	r24, 0x40	; 64
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	2d 81       	ldd	r18, Y+5	; 0x05
    331a:	fc 01       	movw	r30, r24
    331c:	20 83       	st	Z, r18

		// Write 1 to EEMPE bit
		SETBIT(EECR,(1 << EEMPE));
    331e:	8f e3       	ldi	r24, 0x3F	; 63
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	2f e3       	ldi	r18, 0x3F	; 63
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	f9 01       	movw	r30, r18
    3328:	20 81       	ld	r18, Z
    332a:	24 60       	ori	r18, 0x04	; 4
    332c:	fc 01       	movw	r30, r24
    332e:	20 83       	st	Z, r18

		// Write data with EECR EEPE bit
		SETBIT(EECR,(1 << EEPE));
    3330:	8f e3       	ldi	r24, 0x3F	; 63
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	2f e3       	ldi	r18, 0x3F	; 63
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	f9 01       	movw	r30, r18
    333a:	20 81       	ld	r18, Z
    333c:	22 60       	ori	r18, 0x02	; 2
    333e:	fc 01       	movw	r30, r24
    3340:	20 83       	st	Z, r18

		return true;
    3342:	81 e0       	ldi	r24, 0x01	; 1
	}
    3344:	0f 90       	pop	r0
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	0f 90       	pop	r0
    334c:	0f 90       	pop	r0
    334e:	df 91       	pop	r29
    3350:	cf 91       	pop	r28
    3352:	08 95       	ret

00003354 <_ZN6EEPROM4readEj>:

	uint8_t read(uint16_t address) {
    3354:	cf 93       	push	r28
    3356:	df 93       	push	r29
    3358:	00 d0       	rcall	.+0      	; 0x335a <_ZN6EEPROM4readEj+0x6>
    335a:	00 d0       	rcall	.+0      	; 0x335c <_ZN6EEPROM4readEj+0x8>
    335c:	cd b7       	in	r28, 0x3d	; 61
    335e:	de b7       	in	r29, 0x3e	; 62
    3360:	9a 83       	std	Y+2, r25	; 0x02
    3362:	89 83       	std	Y+1, r24	; 0x01
    3364:	7c 83       	std	Y+4, r23	; 0x04
    3366:	6b 83       	std	Y+3, r22	; 0x03
		// Wait for end of previous write
		while (CHECKBIT(EECR,(1 << EEPE)));
    3368:	8f e3       	ldi	r24, 0x3F	; 63
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	fc 01       	movw	r30, r24
    336e:	80 81       	ld	r24, Z
    3370:	88 2f       	mov	r24, r24
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	82 70       	andi	r24, 0x02	; 2
    3376:	99 27       	eor	r25, r25
    3378:	21 e0       	ldi	r18, 0x01	; 1
    337a:	89 2b       	or	r24, r25
    337c:	09 f4       	brne	.+2      	; 0x3380 <_ZN6EEPROM4readEj+0x2c>
    337e:	20 e0       	ldi	r18, 0x00	; 0
    3380:	22 23       	and	r18, r18
    3382:	09 f0       	breq	.+2      	; 0x3386 <_ZN6EEPROM4readEj+0x32>
    3384:	f1 cf       	rjmp	.-30     	; 0x3368 <_ZN6EEPROM4readEj+0x14>

		EEAR = address;
    3386:	81 e4       	ldi	r24, 0x41	; 65
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	2b 81       	ldd	r18, Y+3	; 0x03
    338c:	3c 81       	ldd	r19, Y+4	; 0x04
    338e:	fc 01       	movw	r30, r24
    3390:	31 83       	std	Z+1, r19	; 0x01
    3392:	20 83       	st	Z, r18

		// Read data from EEPROM
		SETBIT(EECR,(1 << EERE));
    3394:	8f e3       	ldi	r24, 0x3F	; 63
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	2f e3       	ldi	r18, 0x3F	; 63
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	f9 01       	movw	r30, r18
    339e:	20 81       	ld	r18, Z
    33a0:	21 60       	ori	r18, 0x01	; 1
    33a2:	fc 01       	movw	r30, r24
    33a4:	20 83       	st	Z, r18

		return EEDR;
    33a6:	80 e4       	ldi	r24, 0x40	; 64
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	fc 01       	movw	r30, r24
    33ac:	80 81       	ld	r24, Z
	}
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	0f 90       	pop	r0
    33b4:	0f 90       	pop	r0
    33b6:	df 91       	pop	r29
    33b8:	cf 91       	pop	r28
    33ba:	08 95       	ret

000033bc <__cmpsf2>:
    33bc:	2f d0       	rcall	.+94     	; 0x341c <__fp_cmp>
    33be:	08 f4       	brcc	.+2      	; 0x33c2 <__cmpsf2+0x6>
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	08 95       	ret

000033c4 <__fixunssfsi>:
    33c4:	57 d0       	rcall	.+174    	; 0x3474 <__fp_splitA>
    33c6:	88 f0       	brcs	.+34     	; 0x33ea <__fixunssfsi+0x26>
    33c8:	9f 57       	subi	r25, 0x7F	; 127
    33ca:	90 f0       	brcs	.+36     	; 0x33f0 <__fixunssfsi+0x2c>
    33cc:	b9 2f       	mov	r27, r25
    33ce:	99 27       	eor	r25, r25
    33d0:	b7 51       	subi	r27, 0x17	; 23
    33d2:	a0 f0       	brcs	.+40     	; 0x33fc <__fixunssfsi+0x38>
    33d4:	d1 f0       	breq	.+52     	; 0x340a <__fixunssfsi+0x46>
    33d6:	66 0f       	add	r22, r22
    33d8:	77 1f       	adc	r23, r23
    33da:	88 1f       	adc	r24, r24
    33dc:	99 1f       	adc	r25, r25
    33de:	1a f0       	brmi	.+6      	; 0x33e6 <__fixunssfsi+0x22>
    33e0:	ba 95       	dec	r27
    33e2:	c9 f7       	brne	.-14     	; 0x33d6 <__fixunssfsi+0x12>
    33e4:	12 c0       	rjmp	.+36     	; 0x340a <__fixunssfsi+0x46>
    33e6:	b1 30       	cpi	r27, 0x01	; 1
    33e8:	81 f0       	breq	.+32     	; 0x340a <__fixunssfsi+0x46>
    33ea:	5e d0       	rcall	.+188    	; 0x34a8 <__fp_zero>
    33ec:	b1 e0       	ldi	r27, 0x01	; 1
    33ee:	08 95       	ret
    33f0:	5b c0       	rjmp	.+182    	; 0x34a8 <__fp_zero>
    33f2:	67 2f       	mov	r22, r23
    33f4:	78 2f       	mov	r23, r24
    33f6:	88 27       	eor	r24, r24
    33f8:	b8 5f       	subi	r27, 0xF8	; 248
    33fa:	39 f0       	breq	.+14     	; 0x340a <__fixunssfsi+0x46>
    33fc:	b9 3f       	cpi	r27, 0xF9	; 249
    33fe:	cc f3       	brlt	.-14     	; 0x33f2 <__fixunssfsi+0x2e>
    3400:	86 95       	lsr	r24
    3402:	77 95       	ror	r23
    3404:	67 95       	ror	r22
    3406:	b3 95       	inc	r27
    3408:	d9 f7       	brne	.-10     	; 0x3400 <__fixunssfsi+0x3c>
    340a:	3e f4       	brtc	.+14     	; 0x341a <__fixunssfsi+0x56>
    340c:	90 95       	com	r25
    340e:	80 95       	com	r24
    3410:	70 95       	com	r23
    3412:	61 95       	neg	r22
    3414:	7f 4f       	sbci	r23, 0xFF	; 255
    3416:	8f 4f       	sbci	r24, 0xFF	; 255
    3418:	9f 4f       	sbci	r25, 0xFF	; 255
    341a:	08 95       	ret

0000341c <__fp_cmp>:
    341c:	99 0f       	add	r25, r25
    341e:	00 08       	sbc	r0, r0
    3420:	55 0f       	add	r21, r21
    3422:	aa 0b       	sbc	r26, r26
    3424:	e0 e8       	ldi	r30, 0x80	; 128
    3426:	fe ef       	ldi	r31, 0xFE	; 254
    3428:	16 16       	cp	r1, r22
    342a:	17 06       	cpc	r1, r23
    342c:	e8 07       	cpc	r30, r24
    342e:	f9 07       	cpc	r31, r25
    3430:	c0 f0       	brcs	.+48     	; 0x3462 <__fp_cmp+0x46>
    3432:	12 16       	cp	r1, r18
    3434:	13 06       	cpc	r1, r19
    3436:	e4 07       	cpc	r30, r20
    3438:	f5 07       	cpc	r31, r21
    343a:	98 f0       	brcs	.+38     	; 0x3462 <__fp_cmp+0x46>
    343c:	62 1b       	sub	r22, r18
    343e:	73 0b       	sbc	r23, r19
    3440:	84 0b       	sbc	r24, r20
    3442:	95 0b       	sbc	r25, r21
    3444:	39 f4       	brne	.+14     	; 0x3454 <__fp_cmp+0x38>
    3446:	0a 26       	eor	r0, r26
    3448:	61 f0       	breq	.+24     	; 0x3462 <__fp_cmp+0x46>
    344a:	23 2b       	or	r18, r19
    344c:	24 2b       	or	r18, r20
    344e:	25 2b       	or	r18, r21
    3450:	21 f4       	brne	.+8      	; 0x345a <__fp_cmp+0x3e>
    3452:	08 95       	ret
    3454:	0a 26       	eor	r0, r26
    3456:	09 f4       	brne	.+2      	; 0x345a <__fp_cmp+0x3e>
    3458:	a1 40       	sbci	r26, 0x01	; 1
    345a:	a6 95       	lsr	r26
    345c:	8f ef       	ldi	r24, 0xFF	; 255
    345e:	81 1d       	adc	r24, r1
    3460:	81 1d       	adc	r24, r1
    3462:	08 95       	ret

00003464 <__fp_split3>:
    3464:	57 fd       	sbrc	r21, 7
    3466:	90 58       	subi	r25, 0x80	; 128
    3468:	44 0f       	add	r20, r20
    346a:	55 1f       	adc	r21, r21
    346c:	59 f0       	breq	.+22     	; 0x3484 <__fp_splitA+0x10>
    346e:	5f 3f       	cpi	r21, 0xFF	; 255
    3470:	71 f0       	breq	.+28     	; 0x348e <__fp_splitA+0x1a>
    3472:	47 95       	ror	r20

00003474 <__fp_splitA>:
    3474:	88 0f       	add	r24, r24
    3476:	97 fb       	bst	r25, 7
    3478:	99 1f       	adc	r25, r25
    347a:	61 f0       	breq	.+24     	; 0x3494 <__fp_splitA+0x20>
    347c:	9f 3f       	cpi	r25, 0xFF	; 255
    347e:	79 f0       	breq	.+30     	; 0x349e <__fp_splitA+0x2a>
    3480:	87 95       	ror	r24
    3482:	08 95       	ret
    3484:	12 16       	cp	r1, r18
    3486:	13 06       	cpc	r1, r19
    3488:	14 06       	cpc	r1, r20
    348a:	55 1f       	adc	r21, r21
    348c:	f2 cf       	rjmp	.-28     	; 0x3472 <__fp_split3+0xe>
    348e:	46 95       	lsr	r20
    3490:	f1 df       	rcall	.-30     	; 0x3474 <__fp_splitA>
    3492:	08 c0       	rjmp	.+16     	; 0x34a4 <__fp_splitA+0x30>
    3494:	16 16       	cp	r1, r22
    3496:	17 06       	cpc	r1, r23
    3498:	18 06       	cpc	r1, r24
    349a:	99 1f       	adc	r25, r25
    349c:	f1 cf       	rjmp	.-30     	; 0x3480 <__fp_splitA+0xc>
    349e:	86 95       	lsr	r24
    34a0:	71 05       	cpc	r23, r1
    34a2:	61 05       	cpc	r22, r1
    34a4:	08 94       	sec
    34a6:	08 95       	ret

000034a8 <__fp_zero>:
    34a8:	e8 94       	clt

000034aa <__fp_szero>:
    34aa:	bb 27       	eor	r27, r27
    34ac:	66 27       	eor	r22, r22
    34ae:	77 27       	eor	r23, r23
    34b0:	cb 01       	movw	r24, r22
    34b2:	97 f9       	bld	r25, 7
    34b4:	08 95       	ret

000034b6 <__gesf2>:
    34b6:	b2 df       	rcall	.-156    	; 0x341c <__fp_cmp>
    34b8:	08 f4       	brcc	.+2      	; 0x34bc <__gesf2+0x6>
    34ba:	8f ef       	ldi	r24, 0xFF	; 255
    34bc:	08 95       	ret

000034be <__mulsf3>:
    34be:	0b d0       	rcall	.+22     	; 0x34d6 <__mulsf3x>
    34c0:	78 c0       	rjmp	.+240    	; 0x35b2 <__fp_round>
    34c2:	69 d0       	rcall	.+210    	; 0x3596 <__fp_pscA>
    34c4:	28 f0       	brcs	.+10     	; 0x34d0 <__mulsf3+0x12>
    34c6:	6e d0       	rcall	.+220    	; 0x35a4 <__fp_pscB>
    34c8:	18 f0       	brcs	.+6      	; 0x34d0 <__mulsf3+0x12>
    34ca:	95 23       	and	r25, r21
    34cc:	09 f0       	breq	.+2      	; 0x34d0 <__mulsf3+0x12>
    34ce:	5a c0       	rjmp	.+180    	; 0x3584 <__fp_inf>
    34d0:	5f c0       	rjmp	.+190    	; 0x3590 <__fp_nan>
    34d2:	11 24       	eor	r1, r1
    34d4:	ea cf       	rjmp	.-44     	; 0x34aa <__fp_szero>

000034d6 <__mulsf3x>:
    34d6:	c6 df       	rcall	.-116    	; 0x3464 <__fp_split3>
    34d8:	a0 f3       	brcs	.-24     	; 0x34c2 <__mulsf3+0x4>

000034da <__mulsf3_pse>:
    34da:	95 9f       	mul	r25, r21
    34dc:	d1 f3       	breq	.-12     	; 0x34d2 <__mulsf3+0x14>
    34de:	95 0f       	add	r25, r21
    34e0:	50 e0       	ldi	r21, 0x00	; 0
    34e2:	55 1f       	adc	r21, r21
    34e4:	62 9f       	mul	r22, r18
    34e6:	f0 01       	movw	r30, r0
    34e8:	72 9f       	mul	r23, r18
    34ea:	bb 27       	eor	r27, r27
    34ec:	f0 0d       	add	r31, r0
    34ee:	b1 1d       	adc	r27, r1
    34f0:	63 9f       	mul	r22, r19
    34f2:	aa 27       	eor	r26, r26
    34f4:	f0 0d       	add	r31, r0
    34f6:	b1 1d       	adc	r27, r1
    34f8:	aa 1f       	adc	r26, r26
    34fa:	64 9f       	mul	r22, r20
    34fc:	66 27       	eor	r22, r22
    34fe:	b0 0d       	add	r27, r0
    3500:	a1 1d       	adc	r26, r1
    3502:	66 1f       	adc	r22, r22
    3504:	82 9f       	mul	r24, r18
    3506:	22 27       	eor	r18, r18
    3508:	b0 0d       	add	r27, r0
    350a:	a1 1d       	adc	r26, r1
    350c:	62 1f       	adc	r22, r18
    350e:	73 9f       	mul	r23, r19
    3510:	b0 0d       	add	r27, r0
    3512:	a1 1d       	adc	r26, r1
    3514:	62 1f       	adc	r22, r18
    3516:	83 9f       	mul	r24, r19
    3518:	a0 0d       	add	r26, r0
    351a:	61 1d       	adc	r22, r1
    351c:	22 1f       	adc	r18, r18
    351e:	74 9f       	mul	r23, r20
    3520:	33 27       	eor	r19, r19
    3522:	a0 0d       	add	r26, r0
    3524:	61 1d       	adc	r22, r1
    3526:	23 1f       	adc	r18, r19
    3528:	84 9f       	mul	r24, r20
    352a:	60 0d       	add	r22, r0
    352c:	21 1d       	adc	r18, r1
    352e:	82 2f       	mov	r24, r18
    3530:	76 2f       	mov	r23, r22
    3532:	6a 2f       	mov	r22, r26
    3534:	11 24       	eor	r1, r1
    3536:	9f 57       	subi	r25, 0x7F	; 127
    3538:	50 40       	sbci	r21, 0x00	; 0
    353a:	8a f0       	brmi	.+34     	; 0x355e <__mulsf3_pse+0x84>
    353c:	e1 f0       	breq	.+56     	; 0x3576 <__mulsf3_pse+0x9c>
    353e:	88 23       	and	r24, r24
    3540:	4a f0       	brmi	.+18     	; 0x3554 <__mulsf3_pse+0x7a>
    3542:	ee 0f       	add	r30, r30
    3544:	ff 1f       	adc	r31, r31
    3546:	bb 1f       	adc	r27, r27
    3548:	66 1f       	adc	r22, r22
    354a:	77 1f       	adc	r23, r23
    354c:	88 1f       	adc	r24, r24
    354e:	91 50       	subi	r25, 0x01	; 1
    3550:	50 40       	sbci	r21, 0x00	; 0
    3552:	a9 f7       	brne	.-22     	; 0x353e <__mulsf3_pse+0x64>
    3554:	9e 3f       	cpi	r25, 0xFE	; 254
    3556:	51 05       	cpc	r21, r1
    3558:	70 f0       	brcs	.+28     	; 0x3576 <__mulsf3_pse+0x9c>
    355a:	14 c0       	rjmp	.+40     	; 0x3584 <__fp_inf>
    355c:	a6 cf       	rjmp	.-180    	; 0x34aa <__fp_szero>
    355e:	5f 3f       	cpi	r21, 0xFF	; 255
    3560:	ec f3       	brlt	.-6      	; 0x355c <__mulsf3_pse+0x82>
    3562:	98 3e       	cpi	r25, 0xE8	; 232
    3564:	dc f3       	brlt	.-10     	; 0x355c <__mulsf3_pse+0x82>
    3566:	86 95       	lsr	r24
    3568:	77 95       	ror	r23
    356a:	67 95       	ror	r22
    356c:	b7 95       	ror	r27
    356e:	f7 95       	ror	r31
    3570:	e7 95       	ror	r30
    3572:	9f 5f       	subi	r25, 0xFF	; 255
    3574:	c1 f7       	brne	.-16     	; 0x3566 <__mulsf3_pse+0x8c>
    3576:	fe 2b       	or	r31, r30
    3578:	88 0f       	add	r24, r24
    357a:	91 1d       	adc	r25, r1
    357c:	96 95       	lsr	r25
    357e:	87 95       	ror	r24
    3580:	97 f9       	bld	r25, 7
    3582:	08 95       	ret

00003584 <__fp_inf>:
    3584:	97 f9       	bld	r25, 7
    3586:	9f 67       	ori	r25, 0x7F	; 127
    3588:	80 e8       	ldi	r24, 0x80	; 128
    358a:	70 e0       	ldi	r23, 0x00	; 0
    358c:	60 e0       	ldi	r22, 0x00	; 0
    358e:	08 95       	ret

00003590 <__fp_nan>:
    3590:	9f ef       	ldi	r25, 0xFF	; 255
    3592:	80 ec       	ldi	r24, 0xC0	; 192
    3594:	08 95       	ret

00003596 <__fp_pscA>:
    3596:	00 24       	eor	r0, r0
    3598:	0a 94       	dec	r0
    359a:	16 16       	cp	r1, r22
    359c:	17 06       	cpc	r1, r23
    359e:	18 06       	cpc	r1, r24
    35a0:	09 06       	cpc	r0, r25
    35a2:	08 95       	ret

000035a4 <__fp_pscB>:
    35a4:	00 24       	eor	r0, r0
    35a6:	0a 94       	dec	r0
    35a8:	12 16       	cp	r1, r18
    35aa:	13 06       	cpc	r1, r19
    35ac:	14 06       	cpc	r1, r20
    35ae:	05 06       	cpc	r0, r21
    35b0:	08 95       	ret

000035b2 <__fp_round>:
    35b2:	09 2e       	mov	r0, r25
    35b4:	03 94       	inc	r0
    35b6:	00 0c       	add	r0, r0
    35b8:	11 f4       	brne	.+4      	; 0x35be <__fp_round+0xc>
    35ba:	88 23       	and	r24, r24
    35bc:	52 f0       	brmi	.+20     	; 0x35d2 <__fp_round+0x20>
    35be:	bb 0f       	add	r27, r27
    35c0:	40 f4       	brcc	.+16     	; 0x35d2 <__fp_round+0x20>
    35c2:	bf 2b       	or	r27, r31
    35c4:	11 f4       	brne	.+4      	; 0x35ca <__fp_round+0x18>
    35c6:	60 ff       	sbrs	r22, 0
    35c8:	04 c0       	rjmp	.+8      	; 0x35d2 <__fp_round+0x20>
    35ca:	6f 5f       	subi	r22, 0xFF	; 255
    35cc:	7f 4f       	sbci	r23, 0xFF	; 255
    35ce:	8f 4f       	sbci	r24, 0xFF	; 255
    35d0:	9f 4f       	sbci	r25, 0xFF	; 255
    35d2:	08 95       	ret

000035d4 <__divmodhi4>:
    35d4:	97 fb       	bst	r25, 7
    35d6:	07 2e       	mov	r0, r23
    35d8:	16 f4       	brtc	.+4      	; 0x35de <__divmodhi4+0xa>
    35da:	00 94       	com	r0
    35dc:	06 d0       	rcall	.+12     	; 0x35ea <__divmodhi4_neg1>
    35de:	77 fd       	sbrc	r23, 7
    35e0:	08 d0       	rcall	.+16     	; 0x35f2 <__divmodhi4_neg2>
    35e2:	14 d0       	rcall	.+40     	; 0x360c <__udivmodhi4>
    35e4:	07 fc       	sbrc	r0, 7
    35e6:	05 d0       	rcall	.+10     	; 0x35f2 <__divmodhi4_neg2>
    35e8:	3e f4       	brtc	.+14     	; 0x35f8 <__divmodhi4_exit>

000035ea <__divmodhi4_neg1>:
    35ea:	90 95       	com	r25
    35ec:	81 95       	neg	r24
    35ee:	9f 4f       	sbci	r25, 0xFF	; 255
    35f0:	08 95       	ret

000035f2 <__divmodhi4_neg2>:
    35f2:	70 95       	com	r23
    35f4:	61 95       	neg	r22
    35f6:	7f 4f       	sbci	r23, 0xFF	; 255

000035f8 <__divmodhi4_exit>:
    35f8:	08 95       	ret

000035fa <__tablejump2__>:
    35fa:	ee 0f       	add	r30, r30
    35fc:	ff 1f       	adc	r31, r31
    35fe:	00 24       	eor	r0, r0
    3600:	00 1c       	adc	r0, r0
    3602:	0b be       	out	0x3b, r0	; 59
    3604:	07 90       	elpm	r0, Z+
    3606:	f6 91       	elpm	r31, Z
    3608:	e0 2d       	mov	r30, r0
    360a:	09 94       	ijmp

0000360c <__udivmodhi4>:
    360c:	aa 1b       	sub	r26, r26
    360e:	bb 1b       	sub	r27, r27
    3610:	51 e1       	ldi	r21, 0x11	; 17
    3612:	07 c0       	rjmp	.+14     	; 0x3622 <__udivmodhi4_ep>

00003614 <__udivmodhi4_loop>:
    3614:	aa 1f       	adc	r26, r26
    3616:	bb 1f       	adc	r27, r27
    3618:	a6 17       	cp	r26, r22
    361a:	b7 07       	cpc	r27, r23
    361c:	10 f0       	brcs	.+4      	; 0x3622 <__udivmodhi4_ep>
    361e:	a6 1b       	sub	r26, r22
    3620:	b7 0b       	sbc	r27, r23

00003622 <__udivmodhi4_ep>:
    3622:	88 1f       	adc	r24, r24
    3624:	99 1f       	adc	r25, r25
    3626:	5a 95       	dec	r21
    3628:	a9 f7       	brne	.-22     	; 0x3614 <__udivmodhi4_loop>
    362a:	80 95       	com	r24
    362c:	90 95       	com	r25
    362e:	bc 01       	movw	r22, r24
    3630:	cd 01       	movw	r24, r26
    3632:	08 95       	ret

00003634 <_exit>:
    3634:	f8 94       	cli

00003636 <__stop_program>:
    3636:	ff cf       	rjmp	.-2      	; 0x3636 <__stop_program>

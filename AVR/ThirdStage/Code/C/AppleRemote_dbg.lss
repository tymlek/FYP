
AppleRemote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000316a  000031fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000316a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800114  00800114  00003212  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00003212  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000032b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000196a  00000000  00000000  00003334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c69  00000000  00000000  00004c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018a0  00000000  00000000  00005907  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d8  00000000  00000000  000071a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007bd  00000000  00000000  00007780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ba9  00000000  00000000  00007f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00008ae6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	74 c0       	rjmp	.+232    	; 0xea <__ctors_end>
       2:	00 00       	nop
       4:	81 c5       	rjmp	.+2818   	; 0xb08 <__vector_1>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	c7 c5       	rjmp	.+2958   	; 0xba0 <__vector_4>
      12:	00 00       	nop
      14:	09 c6       	rjmp	.+3090   	; 0xc28 <__vector_5>
      16:	00 00       	nop
      18:	86 c0       	rjmp	.+268    	; 0x126 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	33 c6       	rjmp	.+3174   	; 0xcb0 <__vector_18>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	74 0c       	add	r7, r4
      8e:	2d 0d       	add	r18, r13
      90:	b8 0b       	sbc	r27, r24
      92:	1d 0a       	sbc	r1, r29
      94:	7e 07       	cpc	r23, r30
      96:	89 08       	sbc	r8, r9
      98:	c4 0e       	add	r12, r20
      9a:	c4 0e       	add	r12, r20
      9c:	c4 0e       	add	r12, r20
      9e:	c4 0e       	add	r12, r20
      a0:	c4 0e       	add	r12, r20
      a2:	c4 0e       	add	r12, r20
      a4:	c4 0e       	add	r12, r20
      a6:	c4 0e       	add	r12, r20
      a8:	c4 0e       	add	r12, r20
      aa:	c4 0e       	add	r12, r20
      ac:	c4 0e       	add	r12, r20
      ae:	c4 0e       	add	r12, r20
      b0:	c4 0e       	add	r12, r20
      b2:	c4 0e       	add	r12, r20
      b4:	c4 0e       	add	r12, r20
      b6:	c4 0e       	add	r12, r20
      b8:	c4 0e       	add	r12, r20
      ba:	c4 0e       	add	r12, r20
      bc:	c4 0e       	add	r12, r20
      be:	c4 0e       	add	r12, r20
      c0:	c4 0e       	add	r12, r20
      c2:	c4 0e       	add	r12, r20
      c4:	c4 0e       	add	r12, r20
      c6:	c4 0e       	add	r12, r20
      c8:	c4 0e       	add	r12, r20
      ca:	c4 0e       	add	r12, r20
      cc:	c4 0e       	add	r12, r20
      ce:	c4 0e       	add	r12, r20
      d0:	c4 0e       	add	r12, r20
      d2:	c4 0e       	add	r12, r20
      d4:	c4 0e       	add	r12, r20
      d6:	c4 0e       	add	r12, r20
      d8:	c4 0e       	add	r12, r20
      da:	c4 0e       	add	r12, r20
      dc:	c4 0e       	add	r12, r20
      de:	c4 0e       	add	r12, r20
      e0:	c4 0e       	add	r12, r20
      e2:	c4 0e       	add	r12, r20
      e4:	c4 0e       	add	r12, r20
      e6:	c4 0e       	add	r12, r20
      e8:	c4 0e       	add	r12, r20

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d0 e4       	ldi	r29, 0x40	; 64
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
      f6:	11 e0       	ldi	r17, 0x01	; 1
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	ea e6       	ldi	r30, 0x6A	; 106
      fe:	f1 e3       	ldi	r31, 0x31	; 49
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0b bf       	out	0x3b, r16	; 59
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
     106:	07 90       	elpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	a4 31       	cpi	r26, 0x14	; 20
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
     110:	21 e0       	ldi	r18, 0x01	; 1
     112:	a4 e1       	ldi	r26, 0x14	; 20
     114:	b1 e0       	ldi	r27, 0x01	; 1
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a0 34       	cpi	r26, 0x40	; 64
     11c:	b2 07       	cpc	r27, r18
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	f9 d5       	rcall	.+3058   	; 0xd14 <main>
     122:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <Fifo_Init>:
     128:	cf 93       	push	r28
     12a:	df 93       	push	r29
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62
     130:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <fifo_out>
     134:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <fifo_out>
     138:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <fifo_in>
     13c:	00 00       	nop
     13e:	df 91       	pop	r29
     140:	cf 91       	pop	r28
     142:	08 95       	ret

00000144 <Fifo_Put>:
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	1f 92       	push	r1
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
     14e:	89 83       	std	Y+1, r24	; 0x01
     150:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <fifo_in>
     154:	28 2f       	mov	r18, r24
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <fifo_out>
     15c:	88 2f       	mov	r24, r24
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	40 96       	adiw	r24, 0x10	; 16
     162:	41 e1       	ldi	r20, 0x11	; 17
     164:	50 e0       	ldi	r21, 0x00	; 0
     166:	ba 01       	movw	r22, r20
     168:	0e 94 83 18 	call	0x3106	; 0x3106 <__divmodhi4>
     16c:	28 17       	cp	r18, r24
     16e:	39 07       	cpc	r19, r25
     170:	11 f4       	brne	.+4      	; 0x176 <Fifo_Put+0x32>
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	16 c0       	rjmp	.+44     	; 0x1a2 <Fifo_Put+0x5e>
     176:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <fifo_in>
     17a:	88 2f       	mov	r24, r24
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	8c 5e       	subi	r24, 0xEC	; 236
     180:	9e 4f       	sbci	r25, 0xFE	; 254
     182:	29 81       	ldd	r18, Y+1	; 0x01
     184:	fc 01       	movw	r30, r24
     186:	20 83       	st	Z, r18
     188:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <fifo_in>
     18c:	88 2f       	mov	r24, r24
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	01 96       	adiw	r24, 0x01	; 1
     192:	21 e1       	ldi	r18, 0x11	; 17
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	b9 01       	movw	r22, r18
     198:	0e 94 83 18 	call	0x3106	; 0x3106 <__divmodhi4>
     19c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <fifo_in>
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	0f 90       	pop	r0
     1a4:	df 91       	pop	r29
     1a6:	cf 91       	pop	r28
     1a8:	08 95       	ret

000001aa <Fifo_Get>:
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	00 d0       	rcall	.+0      	; 0x1b0 <Fifo_Get+0x6>
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
     1b4:	9a 83       	std	Y+2, r25	; 0x02
     1b6:	89 83       	std	Y+1, r24	; 0x01
     1b8:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <fifo_in>
     1bc:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <fifo_out>
     1c0:	98 17       	cp	r25, r24
     1c2:	11 f4       	brne	.+4      	; 0x1c8 <Fifo_Get+0x1e>
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	19 c0       	rjmp	.+50     	; 0x1fa <Fifo_Get+0x50>
     1c8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <fifo_out>
     1cc:	88 2f       	mov	r24, r24
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	8c 5e       	subi	r24, 0xEC	; 236
     1d2:	9e 4f       	sbci	r25, 0xFE	; 254
     1d4:	fc 01       	movw	r30, r24
     1d6:	20 81       	ld	r18, Z
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	9a 81       	ldd	r25, Y+2	; 0x02
     1dc:	fc 01       	movw	r30, r24
     1de:	20 83       	st	Z, r18
     1e0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <fifo_out>
     1e4:	88 2f       	mov	r24, r24
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	01 96       	adiw	r24, 0x01	; 1
     1ea:	21 e1       	ldi	r18, 0x11	; 17
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	b9 01       	movw	r22, r18
     1f0:	0e 94 83 18 	call	0x3106	; 0x3106 <__divmodhi4>
     1f4:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <fifo_out>
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	0f 90       	pop	r0
     1fc:	0f 90       	pop	r0
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	08 95       	ret

00000204 <IR_LED_Init>:
volatile uint8_t old_cnt_state = 0;

//-----------------------------------------------------------------------------

// Setup the IR LED
void IR_LED_Init(void) {
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
	REMOTE_REGISTER |= (REMOTE_LED);
     20c:	8a e2       	ldi	r24, 0x2A	; 42
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	2a e2       	ldi	r18, 0x2A	; 42
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	f9 01       	movw	r30, r18
     216:	20 81       	ld	r18, Z
     218:	22 60       	ori	r18, 0x02	; 2
     21a:	fc 01       	movw	r30, r24
     21c:	20 83       	st	Z, r18
	REMOTE_PORT |= (REMOTE_LED); // LED off (active low)
     21e:	8b e2       	ldi	r24, 0x2B	; 43
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	2b e2       	ldi	r18, 0x2B	; 43
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	f9 01       	movw	r30, r18
     228:	20 81       	ld	r18, Z
     22a:	22 60       	ori	r18, 0x02	; 2
     22c:	fc 01       	movw	r30, r24
     22e:	20 83       	st	Z, r18
}
     230:	00 00       	nop
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	08 95       	ret

00000238 <IR_Init>:

//-----------------------------------------------------------------------------

 // ###### Initializes ir function ######
 void IR_Init(void) {
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
   // Timer: 8bit, Clock: 8MHz via XTAL, Prescaler 1024, Overflow = 32.768ms, Tick = 0.128ms 
   TCCR0A &= ~((1 << WGM00) | (1 << WGM01));
     240:	84 e4       	ldi	r24, 0x44	; 68
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	24 e4       	ldi	r18, 0x44	; 68
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	f9 01       	movw	r30, r18
     24a:	20 81       	ld	r18, Z
     24c:	2c 7f       	andi	r18, 0xFC	; 252
     24e:	fc 01       	movw	r30, r24
     250:	20 83       	st	Z, r18
   TCCR0B |= ((1 << CS00) | (1 << CS02)); // Prescaler 1024
     252:	85 e4       	ldi	r24, 0x45	; 69
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	25 e4       	ldi	r18, 0x45	; 69
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	f9 01       	movw	r30, r18
     25c:	20 81       	ld	r18, Z
     25e:	25 60       	ori	r18, 0x05	; 5
     260:	fc 01       	movw	r30, r24
     262:	20 83       	st	Z, r18
   TIMSK0 |= (1 << TOIE0); // When the TOIE0 bit is written to one, 
     264:	8e e6       	ldi	r24, 0x6E	; 110
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	2e e6       	ldi	r18, 0x6E	; 110
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	f9 01       	movw	r30, r18
     26e:	20 81       	ld	r18, Z
     270:	21 60       	ori	r18, 0x01	; 1
     272:	fc 01       	movw	r30, r24
     274:	20 83       	st	Z, r18
                        // and the I-bit in the Status Register is set (one), the
                        // Timer/Counter0 Overflow interrupt is enabled.

   // Interrupt 0 (PD2): Inverted signal input, triggered by logical change
   REMOTE_REGISTER &= ~(1 << PD2);
     276:	8a e2       	ldi	r24, 0x2A	; 42
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	2a e2       	ldi	r18, 0x2A	; 42
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	f9 01       	movw	r30, r18
     280:	20 81       	ld	r18, Z
     282:	2b 7f       	andi	r18, 0xFB	; 251
     284:	fc 01       	movw	r30, r24
     286:	20 83       	st	Z, r18
   REMOTE_PORT |= REMOTE_IR;
     288:	8b e2       	ldi	r24, 0x2B	; 43
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	2b e2       	ldi	r18, 0x2B	; 43
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	f9 01       	movw	r30, r18
     292:	20 81       	ld	r18, Z
     294:	24 60       	ori	r18, 0x04	; 4
     296:	fc 01       	movw	r30, r24
     298:	20 83       	st	Z, r18
   
   EICRA |= (1 << ISC00);			// Logical change ICS00 = 1, ISC01 = 0
     29a:	89 e6       	ldi	r24, 0x69	; 105
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	29 e6       	ldi	r18, 0x69	; 105
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	f9 01       	movw	r30, r18
     2a4:	20 81       	ld	r18, Z
     2a6:	21 60       	ori	r18, 0x01	; 1
     2a8:	fc 01       	movw	r30, r24
     2aa:	20 83       	st	Z, r18
   EICRA &= ~(1 << ISC01);
     2ac:	89 e6       	ldi	r24, 0x69	; 105
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	29 e6       	ldi	r18, 0x69	; 105
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	f9 01       	movw	r30, r18
     2b6:	20 81       	ld	r18, Z
     2b8:	2d 7f       	andi	r18, 0xFD	; 253
     2ba:	fc 01       	movw	r30, r24
     2bc:	20 83       	st	Z, r18
   EIMSK |= (1 << INT0);			// Enable INT0
     2be:	8d e3       	ldi	r24, 0x3D	; 61
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	2d e3       	ldi	r18, 0x3D	; 61
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	f9 01       	movw	r30, r18
     2c8:	20 81       	ld	r18, Z
     2ca:	21 60       	ori	r18, 0x01	; 1
     2cc:	fc 01       	movw	r30, r24
     2ce:	20 83       	st	Z, r18

   // Reset state
   ir_state = IR_BURST;
     2d0:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ir_state>
   
   ir.status &= ~(1 << IR_RECEIVED);
     2d4:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <ir+0x4>
     2d8:	8e 7f       	andi	r24, 0xFE	; 254
     2da:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <ir+0x4>
	   
   // Reset global variables
   ir_tmp_keyhold = 0;
     2de:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <ir_tmp_keyhold>
   ir_tmp_ovf = 0;
     2e2:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <ir_tmp_ovf>
   TCNT0 = 0;
     2e6:	86 e4       	ldi	r24, 0x46	; 70
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	fc 01       	movw	r30, r24
     2ec:	10 82       	st	Z, r1
 }
     2ee:	00 00       	nop
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <IR_Stop>:

 //-----------------------------------------------------------------------------


 // ###### Stops ir function ######
 void IR_Stop(void) {
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
   // Stop timer and disable interrupt.
   TCCR0B &= ~((1 << CS00)| (1 << CS02));
     2fe:	85 e4       	ldi	r24, 0x45	; 69
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	25 e4       	ldi	r18, 0x45	; 69
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	f9 01       	movw	r30, r18
     308:	20 81       	ld	r18, Z
     30a:	2a 7f       	andi	r18, 0xFA	; 250
     30c:	fc 01       	movw	r30, r24
     30e:	20 83       	st	Z, r18
   TIMSK0 &= ~(1<<TOIE0);
     310:	8e e6       	ldi	r24, 0x6E	; 110
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	2e e6       	ldi	r18, 0x6E	; 110
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	f9 01       	movw	r30, r18
     31a:	20 81       	ld	r18, Z
     31c:	2e 7f       	andi	r18, 0xFE	; 254
     31e:	fc 01       	movw	r30, r24
     320:	20 83       	st	Z, r18
   EIMSK &= ~(1 << INT0);
     322:	8d e3       	ldi	r24, 0x3D	; 61
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	2d e3       	ldi	r18, 0x3D	; 61
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	f9 01       	movw	r30, r18
     32c:	20 81       	ld	r18, Z
     32e:	2e 7f       	andi	r18, 0xFE	; 254
     330:	fc 01       	movw	r30, r24
     332:	20 83       	st	Z, r18
   //TCCR0 &= ~((1<<CS00) | (1<<CS02));
   //TIMSK &= ~(1<<TOIE0);
   //GICR  &= ~(1<<INT0);
}
     334:	00 00       	nop
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	08 95       	ret

0000033c <IR_Decode>:

//-----------------------------------------------------------------------------

void IR_Decode(void) {
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	1f 92       	push	r1
     342:	cd b7       	in	r28, 0x3d	; 61
     344:	de b7       	in	r29, 0x3e	; 62
 // ###### INT0 for decoding ######  
 //ISR(INT0_vect) {
	// Get current port state to check if we triggered on rising or falling edge
	cli();
     346:	f8 94       	cli
    uint8_t port_state = (PIND & REMOTE_IR);
     348:	89 e2       	ldi	r24, 0x29	; 41
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	fc 01       	movw	r30, r24
     34e:	80 81       	ld	r24, Z
     350:	84 70       	andi	r24, 0x04	; 4
     352:	89 83       	std	Y+1, r24	; 0x01
    cnt_state = TCNT0;
     354:	86 e4       	ldi	r24, 0x46	; 70
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	fc 01       	movw	r30, r24
     35a:	80 81       	ld	r24, Z
     35c:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <cnt_state>
    sei();
     360:	78 94       	sei
   

    if (ir_tmp_ovf != 0) {
     362:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <ir_tmp_ovf>
     366:	88 23       	and	r24, r24
     368:	49 f0       	breq	.+18     	; 0x37c <IR_Decode+0x40>
		// Overflow, so reset and ignore.
		ir_tmp_ovf = 0;
     36a:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <ir_tmp_ovf>
		ir_state = IR_BURST;
     36e:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ir_state>
		TCNT0 = 0;
     372:	86 e4       	ldi	r24, 0x46	; 70
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	fc 01       	movw	r30, r24
     378:	10 82       	st	Z, r1
		return;
     37a:	8a c2       	rjmp	.+1300   	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
    }

    switch (ir_state) {
     37c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ir_state>
     380:	88 2f       	mov	r24, r24
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	82 30       	cpi	r24, 0x02	; 2
     386:	91 05       	cpc	r25, r1
     388:	09 f4       	brne	.+2      	; 0x38c <IR_Decode+0x50>
     38a:	66 c0       	rjmp	.+204    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     38c:	83 30       	cpi	r24, 0x03	; 3
     38e:	91 05       	cpc	r25, r1
     390:	2c f4       	brge	.+10     	; 0x39c <IR_Decode+0x60>
     392:	00 97       	sbiw	r24, 0x00	; 0
     394:	79 f0       	breq	.+30     	; 0x3b4 <IR_Decode+0x78>
     396:	01 97       	sbiw	r24, 0x01	; 1
     398:	39 f1       	breq	.+78     	; 0x3e8 <IR_Decode+0xac>
     39a:	7a c2       	rjmp	.+1268   	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
     39c:	84 30       	cpi	r24, 0x04	; 4
     39e:	91 05       	cpc	r25, r1
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <IR_Decode+0x68>
     3a2:	3a c1       	rjmp	.+628    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
     3a4:	84 30       	cpi	r24, 0x04	; 4
     3a6:	91 05       	cpc	r25, r1
     3a8:	0c f4       	brge	.+2      	; 0x3ac <IR_Decode+0x70>
     3aa:	c6 c0       	rjmp	.+396    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
     3ac:	05 97       	sbiw	r24, 0x05	; 5
     3ae:	09 f4       	brne	.+2      	; 0x3b2 <IR_Decode+0x76>
     3b0:	a3 c1       	rjmp	.+838    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     3b2:	6e c2       	rjmp	.+1244   	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
     
		case IR_BURST:
			if (!port_state) {  // falling edge (active low)
     3b4:	89 81       	ldd	r24, Y+1	; 0x01
     3b6:	88 23       	and	r24, r24
     3b8:	29 f4       	brne	.+10     	; 0x3c4 <IR_Decode+0x88>
				TCNT0 = 0;
     3ba:	86 e4       	ldi	r24, 0x46	; 70
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	fc 01       	movw	r30, r24
     3c0:	10 82       	st	Z, r1
				if ((cnt_state > TIME_BURST_MIN) && (cnt_state < TIME_BURST_MAX)) {
					ir_state = IR_GAP; // Next state
					TCNT0 = 0; // Reset counter
				}        
			}
			break;
     3c2:	55 c2       	rjmp	.+1194   	; 0x86e <__LOCK_REGION_LENGTH__+0x46e>
     
		case IR_BURST:
			if (!port_state) {  // falling edge (active low)
				TCNT0 = 0;
			} else {
				if ((cnt_state > TIME_BURST_MIN) && (cnt_state < TIME_BURST_MAX)) {
     3c4:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     3c8:	82 34       	cpi	r24, 0x42	; 66
     3ca:	08 f4       	brcc	.+2      	; 0x3ce <IR_Decode+0x92>
     3cc:	50 c2       	rjmp	.+1184   	; 0x86e <__LOCK_REGION_LENGTH__+0x46e>
     3ce:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     3d2:	80 35       	cpi	r24, 0x50	; 80
     3d4:	08 f0       	brcs	.+2      	; 0x3d8 <IR_Decode+0x9c>
     3d6:	4b c2       	rjmp	.+1174   	; 0x86e <__LOCK_REGION_LENGTH__+0x46e>
					ir_state = IR_GAP; // Next state
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <ir_state>
					TCNT0 = 0; // Reset counter
     3de:	86 e4       	ldi	r24, 0x46	; 70
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	fc 01       	movw	r30, r24
     3e4:	10 82       	st	Z, r1
				}        
			}
			break;
     3e6:	43 c2       	rjmp	.+1158   	; 0x86e <__LOCK_REGION_LENGTH__+0x46e>
      
		case IR_GAP: 
			if (!port_state) {
     3e8:	89 81       	ldd	r24, Y+1	; 0x01
     3ea:	88 23       	and	r24, r24
     3ec:	91 f5       	brne	.+100    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
				if ((cnt_state>TIME_GAP_MIN) && (cnt_state<TIME_GAP_MAX)) {    
     3ee:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     3f2:	8f 31       	cpi	r24, 0x1F	; 31
     3f4:	98 f0       	brcs	.+38     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     3f6:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     3fa:	88 32       	cpi	r24, 0x28	; 40
     3fc:	78 f4       	brcc	.+30     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
					TCNT0 = 0; // Reset counter         
     3fe:	86 e4       	ldi	r24, 0x46	; 70
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	fc 01       	movw	r30, r24
     404:	10 82       	st	Z, r1
					ir_state = IR_ADDRESS; // Next state
     406:	82 e0       	ldi	r24, 0x02	; 2
     408:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <ir_state>
					ir_bitctr = 0; // Reset bit counter
     40c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <ir_bitctr>
					ir.status &= ~(1<<IR_KEYHOLD);
     410:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <ir+0x4>
     414:	8d 7f       	andi	r24, 0xFD	; 253
     416:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <ir+0x4>
					break;
     41a:	3a c2       	rjmp	.+1140   	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
				} else {
					if ((cnt_state > TIME_HOLD_MIN) && (cnt_state < TIME_HOLD_MAX)) {
     41c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     420:	80 31       	cpi	r24, 0x10	; 16
     422:	b8 f0       	brcs	.+46     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     424:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     428:	84 31       	cpi	r24, 0x14	; 20
     42a:	98 f4       	brcc	.+38     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
						if(ir.status & (1<<IR_SIGVALID)) {
     42c:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <ir+0x4>
     430:	88 2f       	mov	r24, r24
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	84 70       	andi	r24, 0x04	; 4
     436:	99 27       	eor	r25, r25
     438:	89 2b       	or	r24, r25
     43a:	41 f0       	breq	.+16     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
							ir.status |= (1<<IR_KEYHOLD);
     43c:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <ir+0x4>
     440:	82 60       	ori	r24, 0x02	; 2
     442:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <ir+0x4>
							ir_tmp_keyhold = IR_HOLD_OVF;
     446:	85 e0       	ldi	r24, 0x05	; 5
     448:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <ir_tmp_keyhold>
						}
						ir_state = IR_BURST;
     44c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ir_state>
						break;
     450:	1f c2       	rjmp	.+1086   	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
				   }  
				}                                                                      
			}             
			// Should not happen, must be invalid. Reset.
			ir_state = IR_BURST;   
     452:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ir_state>
			break;
     456:	1c c2       	rjmp	.+1080   	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
	  
		case IR_ADDRESS:
			if (port_state) {
     458:	89 81       	ldd	r24, Y+1	; 0x01
     45a:	88 23       	and	r24, r24
     45c:	81 f0       	breq	.+32     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
				// Must be short pulse
				if((cnt_state > TIME_PULSE_MIN) && (cnt_state < TIME_PULSE_MAX)) {    
     45e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     462:	83 30       	cpi	r24, 0x03	; 3
     464:	48 f0       	brcs	.+18     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     466:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     46a:	87 30       	cpi	r24, 0x07	; 7
     46c:	28 f4       	brcc	.+10     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
					TCNT0 = 0; // Reset counter
     46e:	86 e4       	ldi	r24, 0x46	; 70
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	fc 01       	movw	r30, r24
     474:	10 82       	st	Z, r1
					break;        
     476:	0c c2       	rjmp	.+1048   	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;
     478:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ir_state>
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;                
				break;  
			}
			break;   
     47c:	09 c2       	rjmp	.+1042   	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
					break;        
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;
			} else {
				if ((cnt_state > TIME_ZERO_MIN) && (cnt_state < TIME_ZERO_MAX)) {
     47e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     482:	83 30       	cpi	r24, 0x03	; 3
     484:	50 f1       	brcs	.+84     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     486:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     48a:	87 30       	cpi	r24, 0x07	; 7
     48c:	30 f5       	brcc	.+76     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
					// 0
					#ifdef PROTOCOL_NEC_EXTENDED
						ir_tmp_address_l &= ~(1<<ir_bitctr++);
     48e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <ir_bitctr>
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	98 0f       	add	r25, r24
     496:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <ir_bitctr>
     49a:	28 2f       	mov	r18, r24
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4a4:	88 0f       	add	r24, r24
     4a6:	99 1f       	adc	r25, r25
     4a8:	2a 95       	dec	r18
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     4ac:	80 95       	com	r24
     4ae:	90 95       	com	r25
     4b0:	98 2f       	mov	r25, r24
     4b2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <ir_tmp_address_l>
     4b6:	89 23       	and	r24, r25
     4b8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <ir_tmp_address_l>
					#else
						ir_tmp_address &= ~(1<<ir_bitctr++);
					#endif 
					TCNT0 = 0; // Reset counter
     4bc:	86 e4       	ldi	r24, 0x46	; 70
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	fc 01       	movw	r30, r24
     4c2:	10 82       	st	Z, r1
					if (ir_bitctr >= 8) {
     4c4:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <ir_bitctr>
     4c8:	88 30       	cpi	r24, 0x08	; 8
     4ca:	08 f4       	brcc	.+2      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4cc:	d2 c1       	rjmp	.+932    	; 0x872 <__LOCK_REGION_LENGTH__+0x472>
						ir_state = IR_ADDRESS_INV; // Next state
     4ce:	83 e0       	ldi	r24, 0x03	; 3
     4d0:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <ir_state>
						ir_bitctr = 0; // Reset bit counter
     4d4:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <ir_bitctr>
					}
					break;
     4d8:	cc c1       	rjmp	.+920    	; 0x872 <__LOCK_REGION_LENGTH__+0x472>
				} else {
					if ((cnt_state > TIME_ONE_MIN) && (cnt_state < TIME_ONE_MAX)) {
     4da:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     4de:	8a 30       	cpi	r24, 0x0A	; 10
     4e0:	40 f1       	brcs	.+80     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     4e2:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     4e6:	83 31       	cpi	r24, 0x13	; 19
     4e8:	20 f5       	brcc	.+72     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
						// 1
						#ifdef PROTOCOL_NEC_EXTENDED
							ir_tmp_address_l |= (1<<ir_bitctr++);
     4ea:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <ir_bitctr>
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	98 0f       	add	r25, r24
     4f2:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <ir_bitctr>
     4f6:	28 2f       	mov	r18, r24
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     500:	88 0f       	add	r24, r24
     502:	99 1f       	adc	r25, r25
     504:	2a 95       	dec	r18
     506:	e2 f7       	brpl	.-8      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     508:	98 2f       	mov	r25, r24
     50a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <ir_tmp_address_l>
     50e:	89 2b       	or	r24, r25
     510:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <ir_tmp_address_l>
						#else
							ir_tmp_address |= (1<<ir_bitctr++);
						#endif
						TCNT0 = 0; // Reset counter
     514:	86 e4       	ldi	r24, 0x46	; 70
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	fc 01       	movw	r30, r24
     51a:	10 82       	st	Z, r1
						if (ir_bitctr >= 8) {
     51c:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <ir_bitctr>
     520:	88 30       	cpi	r24, 0x08	; 8
     522:	08 f4       	brcc	.+2      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     524:	a8 c1       	rjmp	.+848    	; 0x876 <__LOCK_REGION_LENGTH__+0x476>
							ir_state = IR_ADDRESS_INV; // Next state
     526:	83 e0       	ldi	r24, 0x03	; 3
     528:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <ir_state>
							ir_bitctr = 0; // Reset bit counter
     52c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <ir_bitctr>
						}
						break;
     530:	a2 c1       	rjmp	.+836    	; 0x876 <__LOCK_REGION_LENGTH__+0x476>
					}
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;                
     532:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ir_state>
				break;  
     536:	ac c1       	rjmp	.+856    	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
			}
			break;   
 
		case IR_ADDRESS_INV:
			if (port_state) {
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	88 23       	and	r24, r24
     53c:	81 f0       	breq	.+32     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
				// Must be short pulse
				if ((cnt_state > TIME_PULSE_MIN) && (cnt_state < TIME_PULSE_MAX)) {    
     53e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     542:	83 30       	cpi	r24, 0x03	; 3
     544:	48 f0       	brcs	.+18     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
     546:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     54a:	87 30       	cpi	r24, 0x07	; 7
     54c:	28 f4       	brcc	.+10     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
					TCNT0 = 0; // Reset counter
     54e:	86 e4       	ldi	r24, 0x46	; 70
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	fc 01       	movw	r30, r24
     554:	10 82       	st	Z, r1
					break;        
     556:	9c c1       	rjmp	.+824    	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;
     558:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ir_state>
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;              
				break; 
			}
			break;
     55c:	99 c1       	rjmp	.+818    	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
					break;        
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;
			} else {
				if ((cnt_state > TIME_ZERO_MIN) && (cnt_state < TIME_ZERO_MAX)) {
     55e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     562:	83 30       	cpi	r24, 0x03	; 3
     564:	50 f1       	brcs	.+84     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
     566:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     56a:	87 30       	cpi	r24, 0x07	; 7
     56c:	30 f5       	brcc	.+76     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
					// 0 (inverted) or high address
					#ifdef PROTOCOL_NEC_EXTENDED
						ir_tmp_address_h &= ~(1<<ir_bitctr++);
     56e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <ir_bitctr>
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	98 0f       	add	r25, r24
     576:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <ir_bitctr>
     57a:	28 2f       	mov	r18, r24
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	02 c0       	rjmp	.+4      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     584:	88 0f       	add	r24, r24
     586:	99 1f       	adc	r25, r25
     588:	2a 95       	dec	r18
     58a:	e2 f7       	brpl	.-8      	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
     58c:	80 95       	com	r24
     58e:	90 95       	com	r25
     590:	98 2f       	mov	r25, r24
     592:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <ir_tmp_address_h>
     596:	89 23       	and	r24, r25
     598:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <ir_tmp_address_h>
							// Should not happen, must be invalid. Reset.
							ir_state = IR_BURST;
							break;
						}
					#endif 
					TCNT0 = 0; // Reset counter
     59c:	86 e4       	ldi	r24, 0x46	; 70
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	fc 01       	movw	r30, r24
     5a2:	10 82       	st	Z, r1
					if (ir_bitctr >= 8) {
     5a4:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <ir_bitctr>
     5a8:	88 30       	cpi	r24, 0x08	; 8
     5aa:	08 f4       	brcc	.+2      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     5ac:	66 c1       	rjmp	.+716    	; 0x87a <__LOCK_REGION_LENGTH__+0x47a>
						ir_state = IR_COMMAND; // Next state
     5ae:	84 e0       	ldi	r24, 0x04	; 4
     5b0:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <ir_state>
						ir_bitctr = 0; // Reset bit counter
     5b4:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <ir_bitctr>
					}
					break;
     5b8:	60 c1       	rjmp	.+704    	; 0x87a <__LOCK_REGION_LENGTH__+0x47a>
				} else {
					if ((cnt_state > TIME_ONE_MIN) && (cnt_state < TIME_ONE_MAX)) {
     5ba:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     5be:	8a 30       	cpi	r24, 0x0A	; 10
     5c0:	40 f1       	brcs	.+80     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
     5c2:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     5c6:	83 31       	cpi	r24, 0x13	; 19
     5c8:	20 f5       	brcc	.+72     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
						// 1 (inverted) or high address
						#ifdef PROTOCOL_NEC_EXTENDED
							ir_tmp_address_h |= (1<<ir_bitctr++);
     5ca:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <ir_bitctr>
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	98 0f       	add	r25, r24
     5d2:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <ir_bitctr>
     5d6:	28 2f       	mov	r18, r24
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	2a 95       	dec	r18
     5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     5e8:	98 2f       	mov	r25, r24
     5ea:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <ir_tmp_address_h>
     5ee:	89 2b       	or	r24, r25
     5f0:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <ir_tmp_address_h>
								// Should not happen, must be invalid. Reset.
								ir_state = IR_BURST;
								break;
							}
						#endif
						TCNT0 = 0; // Reset counter
     5f4:	86 e4       	ldi	r24, 0x46	; 70
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	fc 01       	movw	r30, r24
     5fa:	10 82       	st	Z, r1
						if (ir_bitctr >= 8) {
     5fc:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <ir_bitctr>
     600:	88 30       	cpi	r24, 0x08	; 8
     602:	08 f4       	brcc	.+2      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
     604:	3c c1       	rjmp	.+632    	; 0x87e <__LOCK_REGION_LENGTH__+0x47e>
							ir_state = IR_COMMAND; // Next state
     606:	84 e0       	ldi	r24, 0x04	; 4
     608:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <ir_state>
							ir_bitctr = 0; // Reset bit counter
     60c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <ir_bitctr>
						} 
						break;
     610:	36 c1       	rjmp	.+620    	; 0x87e <__LOCK_REGION_LENGTH__+0x47e>
					}
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;              
     612:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ir_state>
				break; 
     616:	3c c1       	rjmp	.+632    	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
			}
			break;
     
		case IR_COMMAND:
			if (port_state) {
     618:	89 81       	ldd	r24, Y+1	; 0x01
     61a:	88 23       	and	r24, r24
     61c:	81 f0       	breq	.+32     	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
				// Must be short pulse
				if ((cnt_state > TIME_PULSE_MIN) && (cnt_state < TIME_PULSE_MAX)) {    
     61e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     622:	83 30       	cpi	r24, 0x03	; 3
     624:	48 f0       	brcs	.+18     	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
     626:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     62a:	87 30       	cpi	r24, 0x07	; 7
     62c:	28 f4       	brcc	.+10     	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
					TCNT0 = 0; // Reset counter
     62e:	86 e4       	ldi	r24, 0x46	; 70
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	fc 01       	movw	r30, r24
     634:	10 82       	st	Z, r1
					break;        
     636:	2c c1       	rjmp	.+600    	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;
     638:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ir_state>
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;                
				break;  
			}
			break;
     63c:	29 c1       	rjmp	.+594    	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
					break;        
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;
			} else {
				if ((cnt_state > TIME_ZERO_MIN) && (cnt_state < TIME_ZERO_MAX)) {
     63e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     642:	83 30       	cpi	r24, 0x03	; 3
     644:	50 f1       	brcs	.+84     	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
     646:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     64a:	87 30       	cpi	r24, 0x07	; 7
     64c:	30 f5       	brcc	.+76     	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
					// 0
					ir_tmp_command &= ~(1<<ir_bitctr++);
     64e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <ir_bitctr>
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	98 0f       	add	r25, r24
     656:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <ir_bitctr>
     65a:	28 2f       	mov	r18, r24
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	02 c0       	rjmp	.+4      	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
     664:	88 0f       	add	r24, r24
     666:	99 1f       	adc	r25, r25
     668:	2a 95       	dec	r18
     66a:	e2 f7       	brpl	.-8      	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
     66c:	80 95       	com	r24
     66e:	90 95       	com	r25
     670:	98 2f       	mov	r25, r24
     672:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <ir_tmp_command>
     676:	89 23       	and	r24, r25
     678:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <ir_tmp_command>
					TCNT0 = 0; // Reset counter
     67c:	86 e4       	ldi	r24, 0x46	; 70
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	fc 01       	movw	r30, r24
     682:	10 82       	st	Z, r1
					if(ir_bitctr >= 8) {
     684:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <ir_bitctr>
     688:	88 30       	cpi	r24, 0x08	; 8
     68a:	08 f4       	brcc	.+2      	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
     68c:	fa c0       	rjmp	.+500    	; 0x882 <__LOCK_REGION_LENGTH__+0x482>
						ir_state = IR_COMMAND_INV; // Next state
     68e:	85 e0       	ldi	r24, 0x05	; 5
     690:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <ir_state>
						ir_bitctr = 0; // Reset bit counter
     694:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <ir_bitctr>
					}
					break;
     698:	f4 c0       	rjmp	.+488    	; 0x882 <__LOCK_REGION_LENGTH__+0x482>
				} else {
					if((cnt_state > TIME_ONE_MIN) && (cnt_state < TIME_ONE_MAX)) {
     69a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     69e:	8a 30       	cpi	r24, 0x0A	; 10
     6a0:	40 f1       	brcs	.+80     	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
     6a2:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     6a6:	83 31       	cpi	r24, 0x13	; 19
     6a8:	20 f5       	brcc	.+72     	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
						// 1
						ir_tmp_command |= (1<<ir_bitctr++);
     6aa:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <ir_bitctr>
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	98 0f       	add	r25, r24
     6b2:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <ir_bitctr>
     6b6:	28 2f       	mov	r18, r24
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
     6c0:	88 0f       	add	r24, r24
     6c2:	99 1f       	adc	r25, r25
     6c4:	2a 95       	dec	r18
     6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
     6c8:	98 2f       	mov	r25, r24
     6ca:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <ir_tmp_command>
     6ce:	89 2b       	or	r24, r25
     6d0:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <ir_tmp_command>
						TCNT0 = 0; // Reset counter
     6d4:	86 e4       	ldi	r24, 0x46	; 70
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	fc 01       	movw	r30, r24
     6da:	10 82       	st	Z, r1
						if (ir_bitctr >= 8) {
     6dc:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <ir_bitctr>
     6e0:	88 30       	cpi	r24, 0x08	; 8
     6e2:	08 f4       	brcc	.+2      	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
     6e4:	d0 c0       	rjmp	.+416    	; 0x886 <__LOCK_REGION_LENGTH__+0x486>
							ir_state = IR_COMMAND_INV; // Next state
     6e6:	85 e0       	ldi	r24, 0x05	; 5
     6e8:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <ir_state>
							ir_bitctr = 0; // Reset bit counter
     6ec:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <ir_bitctr>
						}
						break;
     6f0:	ca c0       	rjmp	.+404    	; 0x886 <__LOCK_REGION_LENGTH__+0x486>
					}
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;                
     6f2:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ir_state>
				break;  
     6f6:	cc c0       	rjmp	.+408    	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
			}
			break;
	  
		case IR_COMMAND_INV:
			if (port_state) {
     6f8:	89 81       	ldd	r24, Y+1	; 0x01
     6fa:	88 23       	and	r24, r24
     6fc:	81 f0       	breq	.+32     	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
				// Must be short pulse
				if ((cnt_state > TIME_PULSE_MIN) && (cnt_state < TIME_PULSE_MAX)) {    
     6fe:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     702:	83 30       	cpi	r24, 0x03	; 3
     704:	48 f0       	brcs	.+18     	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
     706:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     70a:	87 30       	cpi	r24, 0x07	; 7
     70c:	28 f4       	brcc	.+10     	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
					TCNT0 = 0; // Reset counter
     70e:	86 e4       	ldi	r24, 0x46	; 70
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	fc 01       	movw	r30, r24
     714:	10 82       	st	Z, r1
					break;        
     716:	bc c0       	rjmp	.+376    	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;
     718:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ir_state>
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;                
				break; 
			}    
			break;
     71c:	b9 c0       	rjmp	.+370    	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
					break;        
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;
			} else {
				if ((cnt_state > TIME_ZERO_MIN) && (cnt_state < TIME_ZERO_MAX)) {
     71e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     722:	83 30       	cpi	r24, 0x03	; 3
     724:	08 f4       	brcc	.+2      	; 0x728 <__LOCK_REGION_LENGTH__+0x328>
     726:	4f c0       	rjmp	.+158    	; 0x7c6 <__LOCK_REGION_LENGTH__+0x3c6>
     728:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     72c:	87 30       	cpi	r24, 0x07	; 7
     72e:	08 f0       	brcs	.+2      	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
     730:	4a c0       	rjmp	.+148    	; 0x7c6 <__LOCK_REGION_LENGTH__+0x3c6>
					// 0 (inverted)
					#ifdef PROTOCOL_APPLE_EXTENDED
						ir_tmp_id &= ~(1<<ir_bitctr++);
     732:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <ir_bitctr>
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	98 0f       	add	r25, r24
     73a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <ir_bitctr>
     73e:	28 2f       	mov	r18, r24
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	02 c0       	rjmp	.+4      	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
     748:	88 0f       	add	r24, r24
     74a:	99 1f       	adc	r25, r25
     74c:	2a 95       	dec	r18
     74e:	e2 f7       	brpl	.-8      	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
     750:	80 95       	com	r24
     752:	90 95       	com	r25
     754:	98 2f       	mov	r25, r24
     756:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <ir_tmp_id>
     75a:	89 23       	and	r24, r25
     75c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <ir_tmp_id>
							// Should not happen, must be invalid. Reset.
							ir_state = IR_BURST;
							break;
						}
					#endif
					TCNT0 = 0; // Reset counter
     760:	86 e4       	ldi	r24, 0x46	; 70
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	fc 01       	movw	r30, r24
     766:	10 82       	st	Z, r1
					if (ir_bitctr >= 8) {
     768:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <ir_bitctr>
     76c:	88 30       	cpi	r24, 0x08	; 8
     76e:	08 f4       	brcc	.+2      	; 0x772 <__LOCK_REGION_LENGTH__+0x372>
     770:	8c c0       	rjmp	.+280    	; 0x88a <__LOCK_REGION_LENGTH__+0x48a>
						ir_state = IR_BURST; // Decoding finished.
     772:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ir_state>
						// Only apply if received flag is not set, must be done
						// by the main program after reading address and command
						if(!(ir.status & (1<<IR_RECEIVED))) {
     776:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <ir+0x4>
     77a:	88 2f       	mov	r24, r24
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	81 70       	andi	r24, 0x01	; 1
     780:	99 27       	eor	r25, r25
     782:	89 2b       	or	r24, r25
     784:	e9 f4       	brne	.+58     	; 0x7c0 <__LOCK_REGION_LENGTH__+0x3c0>
							#ifdef PROTOCOL_NEC_EXTENDED
								ir.address_l = ir_tmp_address_l;
     786:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <ir_tmp_address_l>
     78a:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <ir>
								ir.address_h = ir_tmp_address_h;
     78e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <ir_tmp_address_h>
     792:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <ir+0x1>
							#else
								ir.address = ir_tmp_address;
							#endif
    						#ifdef PROTOCOL_APPLE_EXTENDED
								ir.id = ir_tmp_id;
     796:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <ir_tmp_id>
     79a:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <ir+0x2>
								// According to https://hifiduino.wordpress.com/apple-aluminum-remote/
								// LSB is a parity check so let's shift it out!
								ir_tmp_command = ir_tmp_command >> 1;
     79e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <ir_tmp_command>
     7a2:	86 95       	lsr	r24
     7a4:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <ir_tmp_command>
							#endif
							ir.command = ir_tmp_command;
     7a8:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <ir_tmp_command>
     7ac:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <ir+0x3>
							ir.status |= (1<<IR_RECEIVED) | (1<<IR_SIGVALID);
     7b0:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <ir+0x4>
     7b4:	85 60       	ori	r24, 0x05	; 5
     7b6:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <ir+0x4>
							ir_tmp_keyhold = IR_HOLD_OVF; // To make sure that valid flag is cleared
     7ba:	85 e0       	ldi	r24, 0x05	; 5
     7bc:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <ir_tmp_keyhold>
							// Don't go to sleep.
							//sleep_reset();
						}
						ir_bitctr = 0; // Reset bit counter
     7c0:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <ir_bitctr>
					}
					break;
     7c4:	62 c0       	rjmp	.+196    	; 0x88a <__LOCK_REGION_LENGTH__+0x48a>
				} else {
					if ((cnt_state > TIME_ONE_MIN) && (cnt_state < TIME_ONE_MAX)) {
     7c6:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     7ca:	8a 30       	cpi	r24, 0x0A	; 10
     7cc:	08 f4       	brcc	.+2      	; 0x7d0 <__LOCK_REGION_LENGTH__+0x3d0>
     7ce:	4c c0       	rjmp	.+152    	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
     7d0:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <cnt_state>
     7d4:	83 31       	cpi	r24, 0x13	; 19
     7d6:	08 f0       	brcs	.+2      	; 0x7da <__LOCK_REGION_LENGTH__+0x3da>
     7d8:	47 c0       	rjmp	.+142    	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
						// 1 (inverted)
						#ifdef PROTOCOL_APPLE_EXTENDED
							ir_tmp_id |= (1<<ir_bitctr++);
     7da:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <ir_bitctr>
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	98 0f       	add	r25, r24
     7e2:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <ir_bitctr>
     7e6:	28 2f       	mov	r18, r24
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	2a 95       	dec	r18
     7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <__LOCK_REGION_LENGTH__+0x3f0>
     7f8:	98 2f       	mov	r25, r24
     7fa:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <ir_tmp_id>
     7fe:	89 2b       	or	r24, r25
     800:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <ir_tmp_id>
								// Should not happen, must be invalid. Reset.
								ir_state = IR_BURST;
								break;
							}
						#endif
						TCNT0 = 0; // Reset counter
     804:	86 e4       	ldi	r24, 0x46	; 70
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	fc 01       	movw	r30, r24
     80a:	10 82       	st	Z, r1
						if (ir_bitctr >= 8) {
     80c:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <ir_bitctr>
     810:	88 30       	cpi	r24, 0x08	; 8
     812:	e8 f1       	brcs	.+122    	; 0x88e <__LOCK_REGION_LENGTH__+0x48e>
							ir_state = IR_BURST; // Decoding finished.
     814:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ir_state>
							// Only apply if received flag is not set, must be done
							// by the main program after reading address and command
							if (!(ir.status & (1<<IR_RECEIVED))) {
     818:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <ir+0x4>
     81c:	88 2f       	mov	r24, r24
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	81 70       	andi	r24, 0x01	; 1
     822:	99 27       	eor	r25, r25
     824:	89 2b       	or	r24, r25
     826:	e9 f4       	brne	.+58     	; 0x862 <__LOCK_REGION_LENGTH__+0x462>
								#ifdef PROTOCOL_NEC_EXTENDED
									ir.address_l = ir_tmp_address_l;
     828:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <ir_tmp_address_l>
     82c:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <ir>
									ir.address_h = ir_tmp_address_h;
     830:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <ir_tmp_address_h>
     834:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <ir+0x1>
								#else
									ir.address = ir_tmp_address;
								#endif
								#ifdef PROTOCOL_APPLE_EXTENDED
									ir.id = ir_tmp_id;
     838:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <ir_tmp_id>
     83c:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <ir+0x2>
									// According to https://hifiduino.wordpress.com/apple-aluminum-remote/ 
									// LSB is a parity check so let's shift it out!
									ir_tmp_command = ir_tmp_command >> 1;
     840:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <ir_tmp_command>
     844:	86 95       	lsr	r24
     846:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <ir_tmp_command>
								#endif
								ir.command = ir_tmp_command;
     84a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <ir_tmp_command>
     84e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <ir+0x3>
								ir.status |= (1<<IR_RECEIVED) | (1<<IR_SIGVALID);
     852:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <ir+0x4>
     856:	85 60       	ori	r24, 0x05	; 5
     858:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <ir+0x4>
								ir_tmp_keyhold = IR_HOLD_OVF; // To make sure that valid flag is cleared
     85c:	85 e0       	ldi	r24, 0x05	; 5
     85e:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <ir_tmp_keyhold>
								// Don't go to sleep.
								//sleep_reset();
							}
							ir_bitctr = 0; // Reset bit counter
     862:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <ir_bitctr>
						}
						break;
     866:	13 c0       	rjmp	.+38     	; 0x88e <__LOCK_REGION_LENGTH__+0x48e>
					}
				}
				// Should not happen, must be invalid. Reset.
				ir_state = IR_BURST;                
     868:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ir_state>
				break; 
     86c:	11 c0       	rjmp	.+34     	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
				if ((cnt_state > TIME_BURST_MIN) && (cnt_state < TIME_BURST_MAX)) {
					ir_state = IR_GAP; // Next state
					TCNT0 = 0; // Reset counter
				}        
			}
			break;
     86e:	00 00       	nop
     870:	0f c0       	rjmp	.+30     	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
					TCNT0 = 0; // Reset counter
					if (ir_bitctr >= 8) {
						ir_state = IR_ADDRESS_INV; // Next state
						ir_bitctr = 0; // Reset bit counter
					}
					break;
     872:	00 00       	nop
     874:	0d c0       	rjmp	.+26     	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
						TCNT0 = 0; // Reset counter
						if (ir_bitctr >= 8) {
							ir_state = IR_ADDRESS_INV; // Next state
							ir_bitctr = 0; // Reset bit counter
						}
						break;
     876:	00 00       	nop
     878:	0b c0       	rjmp	.+22     	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
					TCNT0 = 0; // Reset counter
					if (ir_bitctr >= 8) {
						ir_state = IR_COMMAND; // Next state
						ir_bitctr = 0; // Reset bit counter
					}
					break;
     87a:	00 00       	nop
     87c:	09 c0       	rjmp	.+18     	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
						TCNT0 = 0; // Reset counter
						if (ir_bitctr >= 8) {
							ir_state = IR_COMMAND; // Next state
							ir_bitctr = 0; // Reset bit counter
						} 
						break;
     87e:	00 00       	nop
     880:	07 c0       	rjmp	.+14     	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
					TCNT0 = 0; // Reset counter
					if(ir_bitctr >= 8) {
						ir_state = IR_COMMAND_INV; // Next state
						ir_bitctr = 0; // Reset bit counter
					}
					break;
     882:	00 00       	nop
     884:	05 c0       	rjmp	.+10     	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
						TCNT0 = 0; // Reset counter
						if (ir_bitctr >= 8) {
							ir_state = IR_COMMAND_INV; // Next state
							ir_bitctr = 0; // Reset bit counter
						}
						break;
     886:	00 00       	nop
     888:	03 c0       	rjmp	.+6      	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
							// Don't go to sleep.
							//sleep_reset();
						}
						ir_bitctr = 0; // Reset bit counter
					}
					break;
     88a:	00 00       	nop
     88c:	01 c0       	rjmp	.+2      	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
								// Don't go to sleep.
								//sleep_reset();
							}
							ir_bitctr = 0; // Reset bit counter
						}
						break;
     88e:	00 00       	nop
				ir_state = IR_BURST;                
				break; 
			}    
			break;
    }
 }
     890:	0f 90       	pop	r0
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	08 95       	ret

00000898 <IR_Overflow>:

 //-----------------------------------------------------------------------------

// ###### Timer 0 Overflow for hold flag clear ###### 
// ISR (TIMER0_OVF_vect) {
void IR_Overflow(void) {
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
   ir_tmp_ovf = 1;
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <ir_tmp_ovf>
   if (ir_tmp_keyhold > 0) {
     8a6:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ir_tmp_keyhold>
     8aa:	88 23       	and	r24, r24
     8ac:	71 f0       	breq	.+28     	; 0x8ca <IR_Overflow+0x32>
     ir_tmp_keyhold--;
     8ae:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ir_tmp_keyhold>
     8b2:	81 50       	subi	r24, 0x01	; 1
     8b4:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <ir_tmp_keyhold>
     if (ir_tmp_keyhold==0) {
     8b8:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <ir_tmp_keyhold>
     8bc:	88 23       	and	r24, r24
     8be:	29 f4       	brne	.+10     	; 0x8ca <IR_Overflow+0x32>
		 ir.status &= ~((1<<IR_KEYHOLD) | (1<<IR_SIGVALID));
     8c0:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <ir+0x4>
     8c4:	89 7f       	andi	r24, 0xF9	; 249
     8c6:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <ir+0x4>
	 }
   }
 }
     8ca:	00 00       	nop
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	08 95       	ret

000008d2 <EEPROM_Init>:
#define PAIR_ADDR   0x0000
#define LEVEL_ADDR	0x0001

//-----------------------------------------------------------------------------

void EEPROM_Init(void) {
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
	EECR = 0;
     8da:	8f e3       	ldi	r24, 0x3F	; 63
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	fc 01       	movw	r30, r24
     8e0:	10 82       	st	Z, r1
}
     8e2:	00 00       	nop
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	08 95       	ret

000008ea <EEPROM_Write>:

//-----------------------------------------------------------------------------

bool EEPROM_Write(uint16_t address, uint8_t data) {
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <EEPROM_Write+0x6>
     8f0:	1f 92       	push	r1
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
     8f6:	9a 83       	std	Y+2, r25	; 0x02
     8f8:	89 83       	std	Y+1, r24	; 0x01
     8fa:	6b 83       	std	Y+3, r22	; 0x03
	// Wait for previous write to complete
	while (CHECKBIT(EECR,(1 << EEPE)));
     8fc:	00 00       	nop
     8fe:	8f e3       	ldi	r24, 0x3F	; 63
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	fc 01       	movw	r30, r24
     904:	80 81       	ld	r24, Z
     906:	88 2f       	mov	r24, r24
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	82 70       	andi	r24, 0x02	; 2
     90c:	99 27       	eor	r25, r25
     90e:	89 2b       	or	r24, r25
     910:	b1 f7       	brne	.-20     	; 0x8fe <EEPROM_Write+0x14>

	EEAR = address;
     912:	81 e4       	ldi	r24, 0x41	; 65
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	29 81       	ldd	r18, Y+1	; 0x01
     918:	3a 81       	ldd	r19, Y+2	; 0x02
     91a:	fc 01       	movw	r30, r24
     91c:	31 83       	std	Z+1, r19	; 0x01
     91e:	20 83       	st	Z, r18
	EEDR = data;						// Write data
     920:	80 e4       	ldi	r24, 0x40	; 64
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	2b 81       	ldd	r18, Y+3	; 0x03
     926:	fc 01       	movw	r30, r24
     928:	20 83       	st	Z, r18

	// Write 1 to EEMPE bit
	SETBIT(EECR,(1 << EEMPE));
     92a:	8f e3       	ldi	r24, 0x3F	; 63
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	2f e3       	ldi	r18, 0x3F	; 63
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	f9 01       	movw	r30, r18
     934:	20 81       	ld	r18, Z
     936:	24 60       	ori	r18, 0x04	; 4
     938:	fc 01       	movw	r30, r24
     93a:	20 83       	st	Z, r18

	// Write data with EECR EEPE bit
	SETBIT(EECR,(1 << EEPE));
     93c:	8f e3       	ldi	r24, 0x3F	; 63
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	2f e3       	ldi	r18, 0x3F	; 63
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	f9 01       	movw	r30, r18
     946:	20 81       	ld	r18, Z
     948:	22 60       	ori	r18, 0x02	; 2
     94a:	fc 01       	movw	r30, r24
     94c:	20 83       	st	Z, r18

	return true;
     94e:	81 e0       	ldi	r24, 0x01	; 1
}
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	0f 90       	pop	r0
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	08 95       	ret

0000095c <EEPROM_Read>:

//-----------------------------------------------------------------------------

uint8_t EEPROM_Read(uint16_t address) {
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	00 d0       	rcall	.+0      	; 0x962 <EEPROM_Read+0x6>
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
     966:	9a 83       	std	Y+2, r25	; 0x02
     968:	89 83       	std	Y+1, r24	; 0x01

	// Wait for end of previous write
	while (CHECKBIT(EECR,(1 << EEPE)));
     96a:	00 00       	nop
     96c:	8f e3       	ldi	r24, 0x3F	; 63
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	fc 01       	movw	r30, r24
     972:	80 81       	ld	r24, Z
     974:	88 2f       	mov	r24, r24
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	82 70       	andi	r24, 0x02	; 2
     97a:	99 27       	eor	r25, r25
     97c:	89 2b       	or	r24, r25
     97e:	b1 f7       	brne	.-20     	; 0x96c <EEPROM_Read+0x10>

	EEAR = address;
     980:	81 e4       	ldi	r24, 0x41	; 65
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	29 81       	ldd	r18, Y+1	; 0x01
     986:	3a 81       	ldd	r19, Y+2	; 0x02
     988:	fc 01       	movw	r30, r24
     98a:	31 83       	std	Z+1, r19	; 0x01
     98c:	20 83       	st	Z, r18

	// Read data from EEPROM
	SETBIT(EECR,(1 << EERE));
     98e:	8f e3       	ldi	r24, 0x3F	; 63
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	2f e3       	ldi	r18, 0x3F	; 63
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	f9 01       	movw	r30, r18
     998:	20 81       	ld	r18, Z
     99a:	21 60       	ori	r18, 0x01	; 1
     99c:	fc 01       	movw	r30, r24
     99e:	20 83       	st	Z, r18

	return EEDR;
     9a0:	80 e4       	ldi	r24, 0x40	; 64
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	fc 01       	movw	r30, r24
     9a6:	80 81       	ld	r24, Z
}
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	08 95       	ret

000009b2 <VolLimits_Init>:
#define LIMIT_DOWN	(1 << PB0)
#define LIMIT_UP	(1 << PB1)

//-----------------------------------------------------------------------------

void VolLimits_Init(void) {
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
	CLEARBIT(LIMIT_DDR,(LIMIT_UP | LIMIT_DOWN));
     9ba:	84 e2       	ldi	r24, 0x24	; 36
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	24 e2       	ldi	r18, 0x24	; 36
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	f9 01       	movw	r30, r18
     9c4:	20 81       	ld	r18, Z
     9c6:	2c 7f       	andi	r18, 0xFC	; 252
     9c8:	fc 01       	movw	r30, r24
     9ca:	20 83       	st	Z, r18

	SETBIT(PCICR,(1 << PCIE1));
     9cc:	88 e6       	ldi	r24, 0x68	; 104
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	28 e6       	ldi	r18, 0x68	; 104
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	f9 01       	movw	r30, r18
     9d6:	20 81       	ld	r18, Z
     9d8:	22 60       	ori	r18, 0x02	; 2
     9da:	fc 01       	movw	r30, r24
     9dc:	20 83       	st	Z, r18

	SETBIT(PCMSK0,(LIMIT_UP | LIMIT_DOWN)); 
     9de:	8b e6       	ldi	r24, 0x6B	; 107
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	2b e6       	ldi	r18, 0x6B	; 107
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	f9 01       	movw	r30, r18
     9e8:	20 81       	ld	r18, Z
     9ea:	23 60       	ori	r18, 0x03	; 3
     9ec:	fc 01       	movw	r30, r24
     9ee:	20 83       	st	Z, r18
}
     9f0:	00 00       	nop
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <VolLimits_Up>:

//-----------------------------------------------------------------------------

bool VolLimits_Up(void) {
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
	return (CHECKBIT(LIMIT_PIN,LIMIT_UP));
     a00:	83 e2       	ldi	r24, 0x23	; 35
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	fc 01       	movw	r30, r24
     a06:	80 81       	ld	r24, Z
     a08:	88 2f       	mov	r24, r24
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	82 70       	andi	r24, 0x02	; 2
     a0e:	99 27       	eor	r25, r25
     a10:	21 e0       	ldi	r18, 0x01	; 1
     a12:	89 2b       	or	r24, r25
     a14:	09 f4       	brne	.+2      	; 0xa18 <VolLimits_Up+0x20>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	82 2f       	mov	r24, r18
}
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	08 95       	ret

00000a20 <VolLimits_Down>:

//-----------------------------------------------------------------------------

bool VolLimits_Down(void) {
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
	return (CHECKBIT(LIMIT_PIN,LIMIT_DOWN));
     a28:	83 e2       	ldi	r24, 0x23	; 35
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	fc 01       	movw	r30, r24
     a2e:	80 81       	ld	r24, Z
     a30:	88 2f       	mov	r24, r24
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	81 70       	andi	r24, 0x01	; 1
     a36:	99 27       	eor	r25, r25
     a38:	21 e0       	ldi	r18, 0x01	; 1
     a3a:	89 2b       	or	r24, r25
     a3c:	09 f4       	brne	.+2      	; 0xa40 <VolLimits_Down+0x20>
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	82 2f       	mov	r24, r18
}
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret

00000a48 <OutputRelays_Init>:
#define OUTPUT_RELAYS_MUTE (1 << PC0)
#define OUTPUT_RELAYS_HIGH (1 << PC1)
#define OUTPUT_RELAYS_MED (1 << PC2)
#define OUTPUT_RELAYS_LOW (1 << PC3)

void OutputRelays_Init(void) {
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	cd b7       	in	r28, 0x3d	; 61
     a4e:	de b7       	in	r29, 0x3e	; 62
	SETBIT(OUTPUT_RELAYS_DDR,(OUTPUT_RELAYS_MUTE
     a50:	87 e2       	ldi	r24, 0x27	; 39
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	27 e2       	ldi	r18, 0x27	; 39
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	f9 01       	movw	r30, r18
     a5a:	20 81       	ld	r18, Z
     a5c:	2f 60       	ori	r18, 0x0F	; 15
     a5e:	fc 01       	movw	r30, r24
     a60:	20 83       	st	Z, r18
								| OUTPUT_RELAYS_HIGH
								| OUTPUT_RELAYS_MED
								| OUTPUT_RELAYS_LOW));

	CLEARBIT(OUTPUT_RELAYS_PORT,(OUTPUT_RELAYS_MUTE
     a62:	88 e2       	ldi	r24, 0x28	; 40
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	28 e2       	ldi	r18, 0x28	; 40
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	f9 01       	movw	r30, r18
     a6c:	20 81       	ld	r18, Z
     a6e:	20 7f       	andi	r18, 0xF0	; 240
     a70:	fc 01       	movw	r30, r24
     a72:	20 83       	st	Z, r18
								| OUTPUT_RELAYS_HIGH
								| OUTPUT_RELAYS_MED
								| OUTPUT_RELAYS_LOW));
}
     a74:	00 00       	nop
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	08 95       	ret

00000a7c <PanelButtons_Init>:
#define BUTTON_MED (1 << PA2)
#define BUTTON_LOW (1 << PA3)

//-----------------------------------------------------------------------------

void PanelButtons_Init(void) {
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
	CLEARBIT(PANEL_BUTTONS_DDR,(BUTTON_MUTE
     a84:	81 e2       	ldi	r24, 0x21	; 33
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	21 e2       	ldi	r18, 0x21	; 33
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	f9 01       	movw	r30, r18
     a8e:	20 81       	ld	r18, Z
     a90:	20 7f       	andi	r18, 0xF0	; 240
     a92:	fc 01       	movw	r30, r24
     a94:	20 83       	st	Z, r18
								| BUTTON_HIGH
								| BUTTON_MED
								| BUTTON_LOW));
	
	SETBIT(PCICR,(1 << PCIE0));
     a96:	88 e6       	ldi	r24, 0x68	; 104
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	28 e6       	ldi	r18, 0x68	; 104
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	f9 01       	movw	r30, r18
     aa0:	20 81       	ld	r18, Z
     aa2:	21 60       	ori	r18, 0x01	; 1
     aa4:	fc 01       	movw	r30, r24
     aa6:	20 83       	st	Z, r18

	SETBIT(PCMSK0,(BUTTON_MUTE
     aa8:	8b e6       	ldi	r24, 0x6B	; 107
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	2b e6       	ldi	r18, 0x6B	; 107
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	f9 01       	movw	r30, r18
     ab2:	20 81       	ld	r18, Z
     ab4:	2f 60       	ori	r18, 0x0F	; 15
     ab6:	fc 01       	movw	r30, r24
     ab8:	20 83       	st	Z, r18
					| BUTTON_MED
					| BUTTON_LOW));

	//CLEARBIT(EICRA,((1 << ISC11) | (1 << ISC10)));
	//SETBIT(EIMSK,(1 << INT1));
}
     aba:	00 00       	nop
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	08 95       	ret

00000ac2 <OutputLED_Init>:
#define OUTPUT_LED_MUTE (1 << PC4)
#define OUTPUT_LED_HIGH (1 << PC5)
#define OUTPUT_LED_MED (1 << PC6)
#define OUTPUT_LED_LOW (1 << PC7)

void OutputLED_Init(void) {
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
	SETBIT(OUTPUT_LED_DDR,(OUTPUT_LED_MUTE
     aca:	87 e2       	ldi	r24, 0x27	; 39
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	27 e2       	ldi	r18, 0x27	; 39
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	f9 01       	movw	r30, r18
     ad4:	20 81       	ld	r18, Z
     ad6:	20 6f       	ori	r18, 0xF0	; 240
     ad8:	fc 01       	movw	r30, r24
     ada:	20 83       	st	Z, r18
		| OUTPUT_LED_HIGH
		| OUTPUT_LED_MED
		| OUTPUT_LED_LOW));

	CLEARBIT(OUTPUT_LED_PORT,(OUTPUT_LED_MUTE
     adc:	88 e2       	ldi	r24, 0x28	; 40
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	28 e2       	ldi	r18, 0x28	; 40
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	f9 01       	movw	r30, r18
     ae6:	20 81       	ld	r18, Z
     ae8:	2f 72       	andi	r18, 0x2F	; 47
     aea:	fc 01       	movw	r30, r24
     aec:	20 83       	st	Z, r18
		| OUTPUT_LED_MED
		| OUTPUT_LED_LOW));

	SETBIT(OUTPUT_LED_PORT,OUTPUT_LED_HIGH);
     aee:	88 e2       	ldi	r24, 0x28	; 40
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	28 e2       	ldi	r18, 0x28	; 40
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	f9 01       	movw	r30, r18
     af8:	20 81       	ld	r18, Z
     afa:	20 62       	ori	r18, 0x20	; 32
     afc:	fc 01       	movw	r30, r24
     afe:	20 83       	st	Z, r18
}
     b00:	00 00       	nop
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	08 95       	ret

00000b08 <__vector_1>:
static inline void setLevelMedium(void);
static inline void setLevelLow(void);

//-----------------------------------------------------------------------------

ISR (INT0_vect) {
     b08:	1f 92       	push	r1
     b0a:	0f 92       	push	r0
     b0c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b10:	0f 92       	push	r0
     b12:	11 24       	eor	r1, r1
     b14:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     b18:	0f 92       	push	r0
     b1a:	2f 93       	push	r18
     b1c:	3f 93       	push	r19
     b1e:	4f 93       	push	r20
     b20:	5f 93       	push	r21
     b22:	6f 93       	push	r22
     b24:	7f 93       	push	r23
     b26:	8f 93       	push	r24
     b28:	9f 93       	push	r25
     b2a:	af 93       	push	r26
     b2c:	bf 93       	push	r27
     b2e:	ef 93       	push	r30
     b30:	ff 93       	push	r31
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	cd b7       	in	r28, 0x3d	; 61
     b38:	de b7       	in	r29, 0x3e	; 62
	if (powerDown) {
     b3a:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <powerDown>
     b3e:	88 23       	and	r24, r24
     b40:	b1 f0       	breq	.+44     	; 0xb6e <__vector_1+0x66>
		sleep_disable();
     b42:	83 e5       	ldi	r24, 0x53	; 83
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	23 e5       	ldi	r18, 0x53	; 83
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	f9 01       	movw	r30, r18
     b4c:	20 81       	ld	r18, Z
     b4e:	2e 7f       	andi	r18, 0xFE	; 254
     b50:	fc 01       	movw	r30, r24
     b52:	20 83       	st	Z, r18
		cli();
     b54:	f8 94       	cli

		// Change interrupt to state change
		SETBIT(EICRA,(1 << ISC00));
     b56:	89 e6       	ldi	r24, 0x69	; 105
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	29 e6       	ldi	r18, 0x69	; 105
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	f9 01       	movw	r30, r18
     b60:	20 81       	ld	r18, Z
     b62:	21 60       	ori	r18, 0x01	; 1
     b64:	fc 01       	movw	r30, r24
     b66:	20 83       	st	Z, r18
		powerDown = false;
     b68:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <powerDown>

		sei();
     b6c:	78 94       	sei
	}

	IR_Decode();
     b6e:	e6 db       	rcall	.-2100   	; 0x33c <IR_Decode>
}
     b70:	00 00       	nop
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	ff 91       	pop	r31
     b78:	ef 91       	pop	r30
     b7a:	bf 91       	pop	r27
     b7c:	af 91       	pop	r26
     b7e:	9f 91       	pop	r25
     b80:	8f 91       	pop	r24
     b82:	7f 91       	pop	r23
     b84:	6f 91       	pop	r22
     b86:	5f 91       	pop	r21
     b88:	4f 91       	pop	r20
     b8a:	3f 91       	pop	r19
     b8c:	2f 91       	pop	r18
     b8e:	0f 90       	pop	r0
     b90:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     b94:	0f 90       	pop	r0
     b96:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b9a:	0f 90       	pop	r0
     b9c:	1f 90       	pop	r1
     b9e:	18 95       	reti

00000ba0 <__vector_4>:

//-----------------------------------------------------------------------------

ISR (PCINT0_vect) {
     ba0:	1f 92       	push	r1
     ba2:	0f 92       	push	r0
     ba4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ba8:	0f 92       	push	r0
     baa:	11 24       	eor	r1, r1
     bac:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     bb0:	0f 92       	push	r0
     bb2:	2f 93       	push	r18
     bb4:	3f 93       	push	r19
     bb6:	4f 93       	push	r20
     bb8:	5f 93       	push	r21
     bba:	6f 93       	push	r22
     bbc:	7f 93       	push	r23
     bbe:	8f 93       	push	r24
     bc0:	9f 93       	push	r25
     bc2:	af 93       	push	r26
     bc4:	bf 93       	push	r27
     bc6:	ef 93       	push	r30
     bc8:	ff 93       	push	r31
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
	if (powerDown) {
     bd2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <powerDown>
     bd6:	88 23       	and	r24, r24
     bd8:	69 f0       	breq	.+26     	; 0xbf4 <__vector_4+0x54>
		sleep_disable();
     bda:	83 e5       	ldi	r24, 0x53	; 83
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	23 e5       	ldi	r18, 0x53	; 83
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	f9 01       	movw	r30, r18
     be4:	20 81       	ld	r18, Z
     be6:	2e 7f       	andi	r18, 0xFE	; 254
     be8:	fc 01       	movw	r30, r24
     bea:	20 83       	st	Z, r18
		cli();
     bec:	f8 94       	cli

		powerDown = false;
     bee:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <powerDown>

		sei();
     bf2:	78 94       	sei
	}

	decodeButton();
     bf4:	0e 94 44 12 	call	0x2488	; 0x2488 <decodeButton>
}
     bf8:	00 00       	nop
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	ff 91       	pop	r31
     c00:	ef 91       	pop	r30
     c02:	bf 91       	pop	r27
     c04:	af 91       	pop	r26
     c06:	9f 91       	pop	r25
     c08:	8f 91       	pop	r24
     c0a:	7f 91       	pop	r23
     c0c:	6f 91       	pop	r22
     c0e:	5f 91       	pop	r21
     c10:	4f 91       	pop	r20
     c12:	3f 91       	pop	r19
     c14:	2f 91       	pop	r18
     c16:	0f 90       	pop	r0
     c18:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     c1c:	0f 90       	pop	r0
     c1e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c22:	0f 90       	pop	r0
     c24:	1f 90       	pop	r1
     c26:	18 95       	reti

00000c28 <__vector_5>:

//-----------------------------------------------------------------------------

ISR (PCINT1_vect) {
     c28:	1f 92       	push	r1
     c2a:	0f 92       	push	r0
     c2c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c30:	0f 92       	push	r0
     c32:	11 24       	eor	r1, r1
     c34:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     c38:	0f 92       	push	r0
     c3a:	2f 93       	push	r18
     c3c:	3f 93       	push	r19
     c3e:	4f 93       	push	r20
     c40:	5f 93       	push	r21
     c42:	6f 93       	push	r22
     c44:	7f 93       	push	r23
     c46:	8f 93       	push	r24
     c48:	9f 93       	push	r25
     c4a:	af 93       	push	r26
     c4c:	bf 93       	push	r27
     c4e:	ef 93       	push	r30
     c50:	ff 93       	push	r31
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
	if (powerDown) {
     c5a:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <powerDown>
     c5e:	88 23       	and	r24, r24
     c60:	69 f0       	breq	.+26     	; 0xc7c <__vector_5+0x54>
		sleep_disable();
     c62:	83 e5       	ldi	r24, 0x53	; 83
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	23 e5       	ldi	r18, 0x53	; 83
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	f9 01       	movw	r30, r18
     c6c:	20 81       	ld	r18, Z
     c6e:	2e 7f       	andi	r18, 0xFE	; 254
     c70:	fc 01       	movw	r30, r24
     c72:	20 83       	st	Z, r18
		cli();
     c74:	f8 94       	cli

		powerDown = false;
     c76:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <powerDown>

		sei();
     c7a:	78 94       	sei
	}

	decodeKnob();
     c7c:	0e 94 1a 13 	call	0x2634	; 0x2634 <decodeKnob>
}
     c80:	00 00       	nop
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	ff 91       	pop	r31
     c88:	ef 91       	pop	r30
     c8a:	bf 91       	pop	r27
     c8c:	af 91       	pop	r26
     c8e:	9f 91       	pop	r25
     c90:	8f 91       	pop	r24
     c92:	7f 91       	pop	r23
     c94:	6f 91       	pop	r22
     c96:	5f 91       	pop	r21
     c98:	4f 91       	pop	r20
     c9a:	3f 91       	pop	r19
     c9c:	2f 91       	pop	r18
     c9e:	0f 90       	pop	r0
     ca0:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     ca4:	0f 90       	pop	r0
     ca6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     caa:	0f 90       	pop	r0
     cac:	1f 90       	pop	r1
     cae:	18 95       	reti

00000cb0 <__vector_18>:

//-----------------------------------------------------------------------------

ISR (TIMER0_OVF_vect) {
     cb0:	1f 92       	push	r1
     cb2:	0f 92       	push	r0
     cb4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     cb8:	0f 92       	push	r0
     cba:	11 24       	eor	r1, r1
     cbc:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     cc0:	0f 92       	push	r0
     cc2:	2f 93       	push	r18
     cc4:	3f 93       	push	r19
     cc6:	4f 93       	push	r20
     cc8:	5f 93       	push	r21
     cca:	6f 93       	push	r22
     ccc:	7f 93       	push	r23
     cce:	8f 93       	push	r24
     cd0:	9f 93       	push	r25
     cd2:	af 93       	push	r26
     cd4:	bf 93       	push	r27
     cd6:	ef 93       	push	r30
     cd8:	ff 93       	push	r31
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	cd b7       	in	r28, 0x3d	; 61
	IR_Overflow();
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	da dd       	rcall	.-1100   	; 0x898 <IR_Overflow>
}
     ce4:	00 00       	nop
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	ff 91       	pop	r31
     cec:	ef 91       	pop	r30
     cee:	bf 91       	pop	r27
     cf0:	af 91       	pop	r26
     cf2:	9f 91       	pop	r25
     cf4:	8f 91       	pop	r24
     cf6:	7f 91       	pop	r23
     cf8:	6f 91       	pop	r22
     cfa:	5f 91       	pop	r21
     cfc:	4f 91       	pop	r20
     cfe:	3f 91       	pop	r19
     d00:	2f 91       	pop	r18
     d02:	0f 90       	pop	r0
     d04:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     d08:	0f 90       	pop	r0
     d0a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d0e:	0f 90       	pop	r0
     d10:	1f 90       	pop	r1
     d12:	18 95       	reti

00000d14 <main>:

//-----------------------------------------------------------------------------

int main(void)
{
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	00 d0       	rcall	.+0      	; 0xd1a <main+0x6>
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
	uint8_t paired_id = 0;
	uint8_t last_level = 0;

	EEPROM_Init();
     d1e:	19 82       	std	Y+1, r1	; 0x01
	IR_Init();
     d20:	1a 82       	std	Y+2, r1	; 0x02
     d22:	d7 dd       	rcall	.-1106   	; 0x8d2 <EEPROM_Init>
	IR_LED_Init();
     d24:	89 da       	rcall	.-2798   	; 0x238 <IR_Init>
	Fifo_Init();
     d26:	6e da       	rcall	.-2852   	; 0x204 <IR_LED_Init>
	Stepper_Init();
     d28:	ff d9       	rcall	.-3074   	; 0x128 <Fifo_Init>
     d2a:	0e 94 ad 14 	call	0x295a	; 0x295a <Stepper_Init>
	VolLimits_Init();
	OutputRelays_Init();
     d2e:	41 de       	rcall	.-894    	; 0x9b2 <VolLimits_Init>
     d30:	8b de       	rcall	.-746    	; 0xa48 <OutputRelays_Init>
	OutputLED_Init();
     d32:	c7 de       	rcall	.-626    	; 0xac2 <OutputLED_Init>
	PanelButtons_Init();
     d34:	a3 de       	rcall	.-698    	; 0xa7c <PanelButtons_Init>
     d36:	80 e0       	ldi	r24, 0x00	; 0

	paired_id = EEPROM_Read(PAIR_ADDR);
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	10 de       	rcall	.-992    	; 0x95c <EEPROM_Read>
     d3c:	89 83       	std	Y+1, r24	; 0x01
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
	last_level = EEPROM_Read(LEVEL_ADDR);
     d42:	0c de       	rcall	.-1000   	; 0x95c <EEPROM_Read>
     d44:	8a 83       	std	Y+2, r24	; 0x02
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	88 2f       	mov	r24, r24
     d4a:	90 e0       	ldi	r25, 0x00	; 0
	
	switch (last_level) {
     d4c:	80 34       	cpi	r24, 0x40	; 64
     d4e:	91 05       	cpc	r25, r1
     d50:	41 f0       	breq	.+16     	; 0xd62 <main+0x4e>
     d52:	80 38       	cpi	r24, 0x80	; 128
     d54:	91 05       	cpc	r25, r1
     d56:	41 f0       	breq	.+16     	; 0xd68 <main+0x54>
     d58:	80 97       	sbiw	r24, 0x20	; 32
     d5a:	49 f4       	brne	.+18     	; 0xd6e <main+0x5a>
     d5c:	0e 94 23 14 	call	0x2846	; 0x2846 <setLevelHigh>
     d60:	09 c0       	rjmp	.+18     	; 0xd74 <main+0x60>
		case OUTPUT_LED_HIGH: {									// Switch to medium
			setLevelHigh();
     d62:	0e 94 4b 14 	call	0x2896	; 0x2896 <setLevelMedium>

			break;
     d66:	06 c0       	rjmp	.+12     	; 0xd74 <main+0x60>
		}

		case OUTPUT_LED_MED: {									// Switch to low
			setLevelMedium();
     d68:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <setLevelLow>

			break;
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <main+0x60>
		}

		case OUTPUT_LED_LOW: {									// Switch to high
			setLevelLow();
     d6e:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <setLevelLow>
			
			break;
     d72:	00 00       	nop
		}

		default: {
			setLevelLow();
     d74:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <ir+0x4>
			
			break;
     d78:	88 2f       	mov	r24, r24
		}
	}

	while (1) {
		if (CHECKBIT(ir.status,(1 << IR_RECEIVED))) {
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	81 70       	andi	r24, 0x01	; 1
     d7e:	99 27       	eor	r25, r25
     d80:	89 2b       	or	r24, r25
     d82:	b9 f0       	breq	.+46     	; 0xdb2 <main+0x9e>
     d84:	f8 94       	cli
     d86:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <ir>
			cli();
     d8a:	8e 3e       	cpi	r24, 0xEE	; 238
			//CLEARBIT(REMOTE_PORT,REMOTE_LED);

			if (ir.address_l == 0xEE /*238*/ && ir.address_h == 0x87 /*135*/) {
     d8c:	61 f4       	brne	.+24     	; 0xda6 <main+0x92>
     d8e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ir+0x1>
     d92:	87 38       	cpi	r24, 0x87	; 135
     d94:	41 f4       	brne	.+16     	; 0xda6 <main+0x92>
     d96:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ir+0x2>
				if (paired_id == ir.id) {
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	98 17       	cp	r25, r24
     d9e:	19 f4       	brne	.+6      	; 0xda6 <main+0x92>
     da0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <ir+0x3>
					Fifo_Put(ir.command);
     da4:	cf d9       	rcall	.-3170   	; 0x144 <Fifo_Put>
     da6:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <ir+0x4>
     daa:	8e 7f       	andi	r24, 0xFE	; 254
				}
			
			}

			// Reset state
			CLEARBIT(ir.status,(1 << IR_RECEIVED));
     dac:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <ir+0x4>
     db0:	1e c0       	rjmp	.+60     	; 0xdee <main+0xda>
     db2:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <ir+0x4>
     db6:	88 2f       	mov	r24, r24
		} else if (CHECKBIT(ir.status,(1 << IR_KEYHOLD))) {
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	82 70       	andi	r24, 0x02	; 2
     dbc:	99 27       	eor	r25, r25
     dbe:	89 2b       	or	r24, r25
     dc0:	a9 f0       	breq	.+42     	; 0xdec <main+0xd8>
     dc2:	40 91 39 01 	lds	r20, 0x0139	; 0x800139 <ir>
			remoteAlternateCommands(ir);
     dc6:	50 91 3a 01 	lds	r21, 0x013A	; 0x80013a <ir+0x1>
     dca:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <ir+0x2>
     dce:	70 91 3c 01 	lds	r23, 0x013C	; 0x80013c <ir+0x3>
     dd2:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <ir+0x4>
     dd6:	f0 d7       	rcall	.+4064   	; 0x1db8 <remoteAlternateCommands>
     dd8:	80 e0       	ldi	r24, 0x00	; 0
			paired_id = EEPROM_Read(PAIR_ADDR);
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	bf dd       	rcall	.-1154   	; 0x95c <EEPROM_Read>
     dde:	89 83       	std	Y+1, r24	; 0x01
     de0:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <ir+0x4>

			// Reset state
			CLEARBIT(ir.status,((1 << IR_RECEIVED) | (1 << IR_KEYHOLD)));
     de4:	8c 7f       	andi	r24, 0xFC	; 252
     de6:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <ir+0x4>
     dea:	01 c0       	rjmp	.+2      	; 0xdee <main+0xda>
     dec:	55 d0       	rcall	.+170    	; 0xe98 <decodeCommand>
     dee:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <count>
		} else {
			decodeCommand();
     df2:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <count+0x1>
			//SETBIT(REMOTE_PORT,REMOTE_LED);		
		}

		++count;
     df6:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <count+0x2>
     dfa:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <count+0x3>
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	a1 1d       	adc	r26, r1
     e02:	b1 1d       	adc	r27, r1
     e04:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <count>
     e08:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <count+0x1>
     e0c:	a0 93 2f 01 	sts	0x012F, r26	; 0x80012f <count+0x2>
     e10:	b0 93 30 01 	sts	0x0130, r27	; 0x800130 <count+0x3>
     e14:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <count>
     e18:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <count+0x1>

		if (count >= SLEEP_DELAY) {
     e1c:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <count+0x2>
     e20:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <count+0x3>
     e24:	80 3a       	cpi	r24, 0xA0	; 160
     e26:	96 48       	sbci	r25, 0x86	; 134
     e28:	a1 40       	sbci	r26, 0x01	; 1
     e2a:	b1 05       	cpc	r27, r1
     e2c:	48 f0       	brcs	.+18     	; 0xe40 <main+0x12c>
     e2e:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <count>
			count = 0;
     e32:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <count+0x1>
     e36:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <count+0x2>
     e3a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <count+0x3>
     e3e:	02 d0       	rcall	.+4      	; 0xe44 <sleepNow>
     e40:	78 94       	sei
			sleepNow();
     e42:	98 cf       	rjmp	.-208    	; 0xd74 <main+0x60>

00000e44 <sleepNow>:
     e44:	cf 93       	push	r28
		}

		sei();
     e46:	df 93       	push	r29
	}
     e48:	cd b7       	in	r28, 0x3d	; 61
	return 0;
}

//-----------------------------------------------------------------------------

static void sleepNow(void) {
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	f8 94       	cli
     e4e:	83 e5       	ldi	r24, 0x53	; 83
     e50:	90 e0       	ldi	r25, 0x00	; 0
	cli();
     e52:	23 e5       	ldi	r18, 0x53	; 83
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	f9 01       	movw	r30, r18
     e58:	20 81       	ld	r18, Z
     e5a:	21 7f       	andi	r18, 0xF1	; 241
     e5c:	24 60       	ori	r18, 0x04	; 4
     e5e:	fc 01       	movw	r30, r24
     e60:	20 83       	st	Z, r18
     e62:	83 e5       	ldi	r24, 0x53	; 83
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	23 e5       	ldi	r18, 0x53	; 83
	sleep_enable();
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	f9 01       	movw	r30, r18
     e6c:	20 81       	ld	r18, Z
     e6e:	21 60       	ori	r18, 0x01	; 1
     e70:	fc 01       	movw	r30, r24
     e72:	20 83       	st	Z, r18
     e74:	89 e6       	ldi	r24, 0x69	; 105
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	29 e6       	ldi	r18, 0x69	; 105
	
	// Change interrupt to low state trigger
	CLEARBIT(EICRA,((1 << ISC01) | (1 << ISC00)));
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	f9 01       	movw	r30, r18
     e7e:	20 81       	ld	r18, Z
     e80:	2c 7f       	andi	r18, 0xFC	; 252
     e82:	fc 01       	movw	r30, r24
     e84:	20 83       	st	Z, r18
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <powerDown>
	powerDown = true;
     e8c:	78 94       	sei
     e8e:	88 95       	sleep
     e90:	00 00       	nop

	sei();
     e92:	df 91       	pop	r29
	sleep_cpu();
     e94:	cf 91       	pop	r28
}
     e96:	08 95       	ret

00000e98 <decodeCommand>:
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28

//-----------------------------------------------------------------------------

static void decodeCommand(void) {
     e9e:	df 93       	push	r29
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	ce 58       	subi	r28, 0x8E	; 142
     ea6:	d1 09       	sbc	r29, r1
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	ce 01       	movw	r24, r28
     eb4:	82 57       	subi	r24, 0x72	; 114
	uint8_t command = 0;
     eb6:	9f 4f       	sbci	r25, 0xFF	; 255
     eb8:	fc 01       	movw	r30, r24
     eba:	10 82       	st	Z, r1
     ebc:	ce 01       	movw	r24, r28
     ebe:	82 57       	subi	r24, 0x72	; 114
	bool remaining = Fifo_Get(&command);
     ec0:	9f 4f       	sbci	r25, 0xFF	; 255
     ec2:	73 d9       	rcall	.-3354   	; 0x1aa <Fifo_Get>
     ec4:	89 83       	std	Y+1, r24	; 0x01
     ec6:	67 c7       	rjmp	.+3790   	; 0x1d96 <decodeCommand+0xefe>
     ec8:	ce 01       	movw	r24, r28
     eca:	82 57       	subi	r24, 0x72	; 114
	
	while (remaining) {
     ecc:	9f 4f       	sbci	r25, 0xFF	; 255

		switch (command) {
     ece:	fc 01       	movw	r30, r24
     ed0:	80 81       	ld	r24, Z
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	09 2e       	mov	r0, r25
     ed8:	00 0c       	add	r0, r0
     eda:	aa 0b       	sbc	r26, r26
     edc:	bb 0b       	sbc	r27, r27
     ede:	41 e0       	ldi	r20, 0x01	; 1
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	2e e2       	ldi	r18, 0x2E	; 46
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	84 1b       	sub	r24, r20
     ee8:	95 0b       	sbc	r25, r21
     eea:	28 17       	cp	r18, r24
     eec:	39 07       	cpc	r19, r25
     eee:	08 f4       	brcc	.+2      	; 0xef2 <decodeCommand+0x5a>
     ef0:	4b c7       	rjmp	.+3734   	; 0x1d88 <decodeCommand+0xef0>
     ef2:	8a 5b       	subi	r24, 0xBA	; 186
     ef4:	9f 4f       	sbci	r25, 0xFF	; 255
     ef6:	fc 01       	movw	r30, r24
     ef8:	0c 94 96 18 	jmp	0x312c	; 0x312c <__tablejump2__>
     efc:	88 e2       	ldi	r24, 0x28	; 40
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	28 e2       	ldi	r18, 0x28	; 40
			case REMOTE_UP: {
				CLEARBIT(OUTPUT_RELAYS_PORT,OUTPUT_RELAYS_MUTE);			// Mute off
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	f9 01       	movw	r30, r18
     f06:	20 81       	ld	r18, Z
     f08:	2e 7f       	andi	r18, 0xFE	; 254
     f0a:	fc 01       	movw	r30, r24
     f0c:	20 83       	st	Z, r18
     f0e:	88 e2       	ldi	r24, 0x28	; 40
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	28 e2       	ldi	r18, 0x28	; 40
				CLEARBIT(OUTPUT_LED_PORT,OUTPUT_LED_MUTE);
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	f9 01       	movw	r30, r18
     f18:	20 81       	ld	r18, Z
     f1a:	2f 7e       	andi	r18, 0xEF	; 239
     f1c:	fc 01       	movw	r30, r24
     f1e:	20 83       	st	Z, r18
     f20:	0e 94 cd 14 	call	0x299a	; 0x299a <Stepper_CW>
     f24:	8b e2       	ldi	r24, 0x2B	; 43

				//if (!VolLimits_Up() && ((OUTPUT_LED_PIN & 0xe0) != OUTPUT_LED_HIGH)) {
					Stepper_CW();											// Volume up (stepper clockwise)
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	2b e2       	ldi	r18, 0x2B	; 43
				//}
				
				CLEARBIT(REMOTE_PORT,REMOTE_LED);
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	f9 01       	movw	r30, r18
     f2e:	20 81       	ld	r18, Z
     f30:	2d 7f       	andi	r18, 0xFD	; 253
     f32:	fc 01       	movw	r30, r24
     f34:	20 83       	st	Z, r18
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	a6 e1       	ldi	r26, 0x16	; 22
     f3c:	b3 e4       	ldi	r27, 0x43	; 67
     f3e:	8e 83       	std	Y+6, r24	; 0x06
     f40:	9f 83       	std	Y+7, r25	; 0x07
     f42:	a8 87       	std	Y+8, r26	; 0x08
     f44:	b9 87       	std	Y+9, r27	; 0x09
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	4a ef       	ldi	r20, 0xFA	; 250

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f4c:	54 e4       	ldi	r21, 0x44	; 68
     f4e:	6e 81       	ldd	r22, Y+6	; 0x06
     f50:	7f 81       	ldd	r23, Y+7	; 0x07
     f52:	88 85       	ldd	r24, Y+8	; 0x08
     f54:	99 85       	ldd	r25, Y+9	; 0x09
     f56:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	8c ab       	std	Y+52, r24	; 0x34
     f60:	9d ab       	std	Y+53, r25	; 0x35
     f62:	ae ab       	std	Y+54, r26	; 0x36
     f64:	bf ab       	std	Y+55, r27	; 0x37
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	40 e8       	ldi	r20, 0x80	; 128
	if (__tmp < 1.0)
     f6c:	5f e3       	ldi	r21, 0x3F	; 63
     f6e:	6c a9       	ldd	r22, Y+52	; 0x34
     f70:	7d a9       	ldd	r23, Y+53	; 0x35
     f72:	8e a9       	ldd	r24, Y+54	; 0x36
     f74:	9f a9       	ldd	r25, Y+55	; 0x37
     f76:	0e 94 77 17 	call	0x2eee	; 0x2eee <__cmpsf2>
     f7a:	88 23       	and	r24, r24
     f7c:	2c f4       	brge	.+10     	; 0xf88 <decodeCommand+0xf0>
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	99 af       	std	Y+57, r25	; 0x39
		__ticks = 1;
     f84:	88 af       	std	Y+56, r24	; 0x38
     f86:	3f c0       	rjmp	.+126    	; 0x1006 <decodeCommand+0x16e>
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	3f ef       	ldi	r19, 0xFF	; 255
     f8c:	4f e7       	ldi	r20, 0x7F	; 127
	else if (__tmp > 65535)
     f8e:	57 e4       	ldi	r21, 0x47	; 71
     f90:	6c a9       	ldd	r22, Y+52	; 0x34
     f92:	7d a9       	ldd	r23, Y+53	; 0x35
     f94:	8e a9       	ldd	r24, Y+54	; 0x36
     f96:	9f a9       	ldd	r25, Y+55	; 0x37
     f98:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__gesf2>
     f9c:	18 16       	cp	r1, r24
     f9e:	4c f5       	brge	.+82     	; 0xff2 <decodeCommand+0x15a>
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa6:	51 e4       	ldi	r21, 0x41	; 65
     fa8:	6e 81       	ldd	r22, Y+6	; 0x06
     faa:	7f 81       	ldd	r23, Y+7	; 0x07
     fac:	88 85       	ldd	r24, Y+8	; 0x08
     fae:	99 85       	ldd	r25, Y+9	; 0x09
     fb0:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	bc 01       	movw	r22, r24
     fba:	cd 01       	movw	r24, r26
     fbc:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__fixunssfsi>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	99 af       	std	Y+57, r25	; 0x39
     fc6:	88 af       	std	Y+56, r24	; 0x38
     fc8:	0f c0       	rjmp	.+30     	; 0xfe8 <decodeCommand+0x150>
     fca:	88 ec       	ldi	r24, 0xC8	; 200
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	9b af       	std	Y+59, r25	; 0x3b
     fd0:	8a af       	std	Y+58, r24	; 0x3a
     fd2:	8a ad       	ldd	r24, Y+58	; 0x3a
     fd4:	9b ad       	ldd	r25, Y+59	; 0x3b
     fd6:	01 97       	sbiw	r24, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <decodeCommand+0x13e>
     fda:	9b af       	std	Y+59, r25	; 0x3b
     fdc:	8a af       	std	Y+58, r24	; 0x3a
     fde:	88 ad       	ldd	r24, Y+56	; 0x38
     fe0:	99 ad       	ldd	r25, Y+57	; 0x39
     fe2:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe4:	99 af       	std	Y+57, r25	; 0x39
     fe6:	88 af       	std	Y+56, r24	; 0x38
     fe8:	88 ad       	ldd	r24, Y+56	; 0x38
     fea:	99 ad       	ldd	r25, Y+57	; 0x39
     fec:	89 2b       	or	r24, r25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fee:	69 f7       	brne	.-38     	; 0xfca <decodeCommand+0x132>
     ff0:	14 c0       	rjmp	.+40     	; 0x101a <decodeCommand+0x182>
     ff2:	6c a9       	ldd	r22, Y+52	; 0x34
     ff4:	7d a9       	ldd	r23, Y+53	; 0x35
     ff6:	8e a9       	ldd	r24, Y+54	; 0x36
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff8:	9f a9       	ldd	r25, Y+55	; 0x37
     ffa:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__fixunssfsi>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	99 af       	std	Y+57, r25	; 0x39
    1004:	88 af       	std	Y+56, r24	; 0x38
    1006:	88 ad       	ldd	r24, Y+56	; 0x38
    1008:	99 ad       	ldd	r25, Y+57	; 0x39
    100a:	9d af       	std	Y+61, r25	; 0x3d
    100c:	8c af       	std	Y+60, r24	; 0x3c
    100e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1010:	9d ad       	ldd	r25, Y+61	; 0x3d
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	f1 f7       	brne	.-4      	; 0x1012 <decodeCommand+0x17a>
    1016:	9d af       	std	Y+61, r25	; 0x3d
    1018:	8c af       	std	Y+60, r24	; 0x3c
    101a:	8b e2       	ldi	r24, 0x2B	; 43
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	2b e2       	ldi	r18, 0x2B	; 43
				_delay_ms(IR_LED_DELAY);
				SETBIT(REMOTE_PORT,REMOTE_LED);
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	f9 01       	movw	r30, r18
    1024:	20 81       	ld	r18, Z
    1026:	22 60       	ori	r18, 0x02	; 2
    1028:	fc 01       	movw	r30, r24
    102a:	20 83       	st	Z, r18
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	a8 ec       	ldi	r26, 0xC8	; 200
    1032:	b2 e4       	ldi	r27, 0x42	; 66
    1034:	8e a3       	std	Y+38, r24	; 0x26
    1036:	9f a3       	std	Y+39, r25	; 0x27
    1038:	a8 a7       	std	Y+40, r26	; 0x28
    103a:	b9 a7       	std	Y+41, r27	; 0x29
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	4a ef       	ldi	r20, 0xFA	; 250

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1042:	54 e4       	ldi	r21, 0x44	; 68
    1044:	6e a1       	ldd	r22, Y+38	; 0x26
    1046:	7f a1       	ldd	r23, Y+39	; 0x27
    1048:	88 a5       	ldd	r24, Y+40	; 0x28
    104a:	99 a5       	ldd	r25, Y+41	; 0x29
    104c:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	8a a7       	std	Y+42, r24	; 0x2a
    1056:	9b a7       	std	Y+43, r25	; 0x2b
    1058:	ac a7       	std	Y+44, r26	; 0x2c
    105a:	bd a7       	std	Y+45, r27	; 0x2d
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e8       	ldi	r20, 0x80	; 128
	if (__tmp < 1.0)
    1062:	5f e3       	ldi	r21, 0x3F	; 63
    1064:	6a a5       	ldd	r22, Y+42	; 0x2a
    1066:	7b a5       	ldd	r23, Y+43	; 0x2b
    1068:	8c a5       	ldd	r24, Y+44	; 0x2c
    106a:	9d a5       	ldd	r25, Y+45	; 0x2d
    106c:	0e 94 77 17 	call	0x2eee	; 0x2eee <__cmpsf2>
    1070:	88 23       	and	r24, r24
    1072:	2c f4       	brge	.+10     	; 0x107e <decodeCommand+0x1e6>
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	9f a7       	std	Y+47, r25	; 0x2f
		__ticks = 1;
    107a:	8e a7       	std	Y+46, r24	; 0x2e
    107c:	3f c0       	rjmp	.+126    	; 0x10fc <decodeCommand+0x264>
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	3f ef       	ldi	r19, 0xFF	; 255
    1082:	4f e7       	ldi	r20, 0x7F	; 127
	else if (__tmp > 65535)
    1084:	57 e4       	ldi	r21, 0x47	; 71
    1086:	6a a5       	ldd	r22, Y+42	; 0x2a
    1088:	7b a5       	ldd	r23, Y+43	; 0x2b
    108a:	8c a5       	ldd	r24, Y+44	; 0x2c
    108c:	9d a5       	ldd	r25, Y+45	; 0x2d
    108e:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__gesf2>
    1092:	18 16       	cp	r1, r24
    1094:	4c f5       	brge	.+82     	; 0x10e8 <decodeCommand+0x250>
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    109c:	51 e4       	ldi	r21, 0x41	; 65
    109e:	6e a1       	ldd	r22, Y+38	; 0x26
    10a0:	7f a1       	ldd	r23, Y+39	; 0x27
    10a2:	88 a5       	ldd	r24, Y+40	; 0x28
    10a4:	99 a5       	ldd	r25, Y+41	; 0x29
    10a6:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	bc 01       	movw	r22, r24
    10b0:	cd 01       	movw	r24, r26
    10b2:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__fixunssfsi>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	9f a7       	std	Y+47, r25	; 0x2f
    10bc:	8e a7       	std	Y+46, r24	; 0x2e
    10be:	0f c0       	rjmp	.+30     	; 0x10de <decodeCommand+0x246>
    10c0:	88 ec       	ldi	r24, 0xC8	; 200
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	99 ab       	std	Y+49, r25	; 0x31
    10c6:	88 ab       	std	Y+48, r24	; 0x30
    10c8:	88 a9       	ldd	r24, Y+48	; 0x30
    10ca:	99 a9       	ldd	r25, Y+49	; 0x31
    10cc:	01 97       	sbiw	r24, 0x01	; 1
    10ce:	f1 f7       	brne	.-4      	; 0x10cc <decodeCommand+0x234>
    10d0:	99 ab       	std	Y+49, r25	; 0x31
    10d2:	88 ab       	std	Y+48, r24	; 0x30
    10d4:	8e a5       	ldd	r24, Y+46	; 0x2e
    10d6:	9f a5       	ldd	r25, Y+47	; 0x2f
    10d8:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10da:	9f a7       	std	Y+47, r25	; 0x2f
    10dc:	8e a7       	std	Y+46, r24	; 0x2e
    10de:	8e a5       	ldd	r24, Y+46	; 0x2e
    10e0:	9f a5       	ldd	r25, Y+47	; 0x2f
    10e2:	89 2b       	or	r24, r25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e4:	69 f7       	brne	.-38     	; 0x10c0 <decodeCommand+0x228>
    10e6:	51 c6       	rjmp	.+3234   	; 0x1d8a <decodeCommand+0xef2>
    10e8:	6a a5       	ldd	r22, Y+42	; 0x2a
    10ea:	7b a5       	ldd	r23, Y+43	; 0x2b
				
				_delay_ms(DEBOUNCE_DELAY);
				
				break;
    10ec:	8c a5       	ldd	r24, Y+44	; 0x2c
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ee:	9d a5       	ldd	r25, Y+45	; 0x2d
    10f0:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__fixunssfsi>
    10f4:	dc 01       	movw	r26, r24
    10f6:	cb 01       	movw	r24, r22
    10f8:	9f a7       	std	Y+47, r25	; 0x2f
    10fa:	8e a7       	std	Y+46, r24	; 0x2e
    10fc:	8e a5       	ldd	r24, Y+46	; 0x2e
    10fe:	9f a5       	ldd	r25, Y+47	; 0x2f
    1100:	9b ab       	std	Y+51, r25	; 0x33
    1102:	8a ab       	std	Y+50, r24	; 0x32
    1104:	8a a9       	ldd	r24, Y+50	; 0x32
    1106:	9b a9       	ldd	r25, Y+51	; 0x33
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <decodeCommand+0x270>
    110c:	9b ab       	std	Y+51, r25	; 0x33
    110e:	8a ab       	std	Y+50, r24	; 0x32
    1110:	3c c6       	rjmp	.+3192   	; 0x1d8a <decodeCommand+0xef2>
    1112:	88 e2       	ldi	r24, 0x28	; 40
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	28 e2       	ldi	r18, 0x28	; 40
			}
			
			case REMOTE_DOWN: {
				CLEARBIT(OUTPUT_RELAYS_PORT,OUTPUT_RELAYS_MUTE);			// Mute off
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	f9 01       	movw	r30, r18
    111c:	20 81       	ld	r18, Z
    111e:	2e 7f       	andi	r18, 0xFE	; 254
    1120:	fc 01       	movw	r30, r24
    1122:	20 83       	st	Z, r18
    1124:	88 e2       	ldi	r24, 0x28	; 40
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	28 e2       	ldi	r18, 0x28	; 40
				CLEARBIT(OUTPUT_LED_PORT,OUTPUT_LED_MUTE);
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	f9 01       	movw	r30, r18
    112e:	20 81       	ld	r18, Z
    1130:	2f 7e       	andi	r18, 0xEF	; 239
    1132:	fc 01       	movw	r30, r24
    1134:	20 83       	st	Z, r18
    1136:	0e 94 22 16 	call	0x2c44	; 0x2c44 <Stepper_CCW>
    113a:	8b e2       	ldi	r24, 0x2B	; 43

				//if (!VolLimits_Down() && ((OUTPUT_LED_PIN & 0xe0) != OUTPUT_LED_LOW)) {
					Stepper_CCW();											// Volume down (stepper counter clockwise)
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	2b e2       	ldi	r18, 0x2B	; 43
				//}
				
				CLEARBIT(REMOTE_PORT,REMOTE_LED);
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	f9 01       	movw	r30, r18
    1144:	20 81       	ld	r18, Z
    1146:	2d 7f       	andi	r18, 0xFD	; 253
    1148:	fc 01       	movw	r30, r24
    114a:	20 83       	st	Z, r18
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a6 e1       	ldi	r26, 0x16	; 22
    1152:	b3 e4       	ldi	r27, 0x43	; 67
    1154:	8e 87       	std	Y+14, r24	; 0x0e
    1156:	9f 87       	std	Y+15, r25	; 0x0f
    1158:	a8 8b       	std	Y+16, r26	; 0x10
    115a:	b9 8b       	std	Y+17, r27	; 0x11
    115c:	8e 01       	movw	r16, r28
    115e:	08 5b       	subi	r16, 0xB8	; 184
    1160:	1f 4f       	sbci	r17, 0xFF	; 255

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	4a ef       	ldi	r20, 0xFA	; 250
    1168:	54 e4       	ldi	r21, 0x44	; 68
    116a:	6e 85       	ldd	r22, Y+14	; 0x0e
    116c:	7f 85       	ldd	r23, Y+15	; 0x0f
    116e:	88 89       	ldd	r24, Y+16	; 0x10
    1170:	99 89       	ldd	r25, Y+17	; 0x11
    1172:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	f8 01       	movw	r30, r16
    117c:	80 83       	st	Z, r24
    117e:	91 83       	std	Z+1, r25	; 0x01
    1180:	a2 83       	std	Z+2, r26	; 0x02
    1182:	b3 83       	std	Z+3, r27	; 0x03
    1184:	ce 01       	movw	r24, r28
    1186:	88 5b       	subi	r24, 0xB8	; 184
    1188:	9f 4f       	sbci	r25, 0xFF	; 255
	if (__tmp < 1.0)
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	40 e8       	ldi	r20, 0x80	; 128
    1190:	5f e3       	ldi	r21, 0x3F	; 63
    1192:	fc 01       	movw	r30, r24
    1194:	60 81       	ld	r22, Z
    1196:	71 81       	ldd	r23, Z+1	; 0x01
    1198:	82 81       	ldd	r24, Z+2	; 0x02
    119a:	93 81       	ldd	r25, Z+3	; 0x03
    119c:	0e 94 77 17 	call	0x2eee	; 0x2eee <__cmpsf2>
    11a0:	88 23       	and	r24, r24
    11a2:	4c f4       	brge	.+18     	; 0x11b6 <decodeCommand+0x31e>
    11a4:	ce 01       	movw	r24, r28
    11a6:	84 5b       	subi	r24, 0xB4	; 180
    11a8:	9f 4f       	sbci	r25, 0xFF	; 255
		__ticks = 1;
    11aa:	21 e0       	ldi	r18, 0x01	; 1
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	fc 01       	movw	r30, r24
    11b0:	31 83       	std	Z+1, r19	; 0x01
    11b2:	20 83       	st	Z, r18
    11b4:	69 c0       	rjmp	.+210    	; 0x1288 <decodeCommand+0x3f0>
    11b6:	ce 01       	movw	r24, r28
    11b8:	88 5b       	subi	r24, 0xB8	; 184
    11ba:	9f 4f       	sbci	r25, 0xFF	; 255
	else if (__tmp > 65535)
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	3f ef       	ldi	r19, 0xFF	; 255
    11c0:	4f e7       	ldi	r20, 0x7F	; 127
    11c2:	57 e4       	ldi	r21, 0x47	; 71
    11c4:	fc 01       	movw	r30, r24
    11c6:	60 81       	ld	r22, Z
    11c8:	71 81       	ldd	r23, Z+1	; 0x01
    11ca:	82 81       	ldd	r24, Z+2	; 0x02
    11cc:	93 81       	ldd	r25, Z+3	; 0x03
    11ce:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__gesf2>
    11d2:	18 16       	cp	r1, r24
    11d4:	0c f0       	brlt	.+2      	; 0x11d8 <decodeCommand+0x340>
    11d6:	46 c0       	rjmp	.+140    	; 0x1264 <decodeCommand+0x3cc>
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11de:	51 e4       	ldi	r21, 0x41	; 65
    11e0:	6e 85       	ldd	r22, Y+14	; 0x0e
    11e2:	7f 85       	ldd	r23, Y+15	; 0x0f
    11e4:	88 89       	ldd	r24, Y+16	; 0x10
    11e6:	99 89       	ldd	r25, Y+17	; 0x11
    11e8:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	8e 01       	movw	r16, r28
    11f2:	04 5b       	subi	r16, 0xB4	; 180
    11f4:	1f 4f       	sbci	r17, 0xFF	; 255
    11f6:	bc 01       	movw	r22, r24
    11f8:	cd 01       	movw	r24, r26
    11fa:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__fixunssfsi>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	f8 01       	movw	r30, r16
    1204:	91 83       	std	Z+1, r25	; 0x01
    1206:	80 83       	st	Z, r24
    1208:	24 c0       	rjmp	.+72     	; 0x1252 <decodeCommand+0x3ba>
    120a:	ce 01       	movw	r24, r28
    120c:	82 5b       	subi	r24, 0xB2	; 178
    120e:	9f 4f       	sbci	r25, 0xFF	; 255
    1210:	28 ec       	ldi	r18, 0xC8	; 200
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	fc 01       	movw	r30, r24
    1216:	31 83       	std	Z+1, r19	; 0x01
    1218:	20 83       	st	Z, r18
    121a:	ce 01       	movw	r24, r28
    121c:	82 5b       	subi	r24, 0xB2	; 178
    121e:	9f 4f       	sbci	r25, 0xFF	; 255
    1220:	fc 01       	movw	r30, r24
    1222:	80 81       	ld	r24, Z
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <decodeCommand+0x38e>
    122a:	9e 01       	movw	r18, r28
    122c:	22 5b       	subi	r18, 0xB2	; 178
    122e:	3f 4f       	sbci	r19, 0xFF	; 255
    1230:	f9 01       	movw	r30, r18
    1232:	91 83       	std	Z+1, r25	; 0x01
    1234:	80 83       	st	Z, r24
    1236:	ce 01       	movw	r24, r28
    1238:	84 5b       	subi	r24, 0xB4	; 180
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    123c:	9e 01       	movw	r18, r28
    123e:	24 5b       	subi	r18, 0xB4	; 180
    1240:	3f 4f       	sbci	r19, 0xFF	; 255
    1242:	f9 01       	movw	r30, r18
    1244:	20 81       	ld	r18, Z
    1246:	31 81       	ldd	r19, Z+1	; 0x01
    1248:	21 50       	subi	r18, 0x01	; 1
    124a:	31 09       	sbc	r19, r1
    124c:	fc 01       	movw	r30, r24
    124e:	31 83       	std	Z+1, r19	; 0x01
    1250:	20 83       	st	Z, r18
    1252:	ce 01       	movw	r24, r28
    1254:	84 5b       	subi	r24, 0xB4	; 180
    1256:	9f 4f       	sbci	r25, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1258:	fc 01       	movw	r30, r24
    125a:	80 81       	ld	r24, Z
    125c:	91 81       	ldd	r25, Z+1	; 0x01
    125e:	89 2b       	or	r24, r25
    1260:	a1 f6       	brne	.-88     	; 0x120a <decodeCommand+0x372>
    1262:	2c c0       	rjmp	.+88     	; 0x12bc <decodeCommand+0x424>
    1264:	8e 01       	movw	r16, r28
    1266:	04 5b       	subi	r16, 0xB4	; 180
    1268:	1f 4f       	sbci	r17, 0xFF	; 255
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    126a:	ce 01       	movw	r24, r28
    126c:	88 5b       	subi	r24, 0xB8	; 184
    126e:	9f 4f       	sbci	r25, 0xFF	; 255
    1270:	fc 01       	movw	r30, r24
    1272:	60 81       	ld	r22, Z
    1274:	71 81       	ldd	r23, Z+1	; 0x01
    1276:	82 81       	ldd	r24, Z+2	; 0x02
    1278:	93 81       	ldd	r25, Z+3	; 0x03
    127a:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__fixunssfsi>
    127e:	dc 01       	movw	r26, r24
    1280:	cb 01       	movw	r24, r22
    1282:	f8 01       	movw	r30, r16
    1284:	91 83       	std	Z+1, r25	; 0x01
    1286:	80 83       	st	Z, r24
    1288:	ce 01       	movw	r24, r28
    128a:	80 5b       	subi	r24, 0xB0	; 176
    128c:	9f 4f       	sbci	r25, 0xFF	; 255
    128e:	9e 01       	movw	r18, r28
    1290:	24 5b       	subi	r18, 0xB4	; 180
    1292:	3f 4f       	sbci	r19, 0xFF	; 255
    1294:	f9 01       	movw	r30, r18
    1296:	20 81       	ld	r18, Z
    1298:	31 81       	ldd	r19, Z+1	; 0x01
    129a:	fc 01       	movw	r30, r24
    129c:	31 83       	std	Z+1, r19	; 0x01
    129e:	20 83       	st	Z, r18
    12a0:	ce 01       	movw	r24, r28
    12a2:	80 5b       	subi	r24, 0xB0	; 176
    12a4:	9f 4f       	sbci	r25, 0xFF	; 255
    12a6:	fc 01       	movw	r30, r24
    12a8:	80 81       	ld	r24, Z
    12aa:	91 81       	ldd	r25, Z+1	; 0x01
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	f1 f7       	brne	.-4      	; 0x12ac <decodeCommand+0x414>
    12b0:	9e 01       	movw	r18, r28
    12b2:	20 5b       	subi	r18, 0xB0	; 176
    12b4:	3f 4f       	sbci	r19, 0xFF	; 255
    12b6:	f9 01       	movw	r30, r18
    12b8:	91 83       	std	Z+1, r25	; 0x01
    12ba:	80 83       	st	Z, r24
    12bc:	8b e2       	ldi	r24, 0x2B	; 43
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	2b e2       	ldi	r18, 0x2B	; 43
				_delay_ms(IR_LED_DELAY);
				SETBIT(REMOTE_PORT,REMOTE_LED);
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	f9 01       	movw	r30, r18
    12c6:	20 81       	ld	r18, Z
    12c8:	22 60       	ori	r18, 0x02	; 2
    12ca:	fc 01       	movw	r30, r24
    12cc:	20 83       	st	Z, r18
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	a8 ec       	ldi	r26, 0xC8	; 200
    12d4:	b2 e4       	ldi	r27, 0x42	; 66
    12d6:	8a 83       	std	Y+2, r24	; 0x02
    12d8:	9b 83       	std	Y+3, r25	; 0x03
    12da:	ac 83       	std	Y+4, r26	; 0x04
    12dc:	bd 83       	std	Y+5, r27	; 0x05
    12de:	8e 01       	movw	r16, r28
    12e0:	02 5c       	subi	r16, 0xC2	; 194
    12e2:	1f 4f       	sbci	r17, 0xFF	; 255

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	4a ef       	ldi	r20, 0xFA	; 250
    12ea:	54 e4       	ldi	r21, 0x44	; 68
    12ec:	6a 81       	ldd	r22, Y+2	; 0x02
    12ee:	7b 81       	ldd	r23, Y+3	; 0x03
    12f0:	8c 81       	ldd	r24, Y+4	; 0x04
    12f2:	9d 81       	ldd	r25, Y+5	; 0x05
    12f4:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	f8 01       	movw	r30, r16
    12fe:	80 83       	st	Z, r24
    1300:	91 83       	std	Z+1, r25	; 0x01
    1302:	a2 83       	std	Z+2, r26	; 0x02
    1304:	b3 83       	std	Z+3, r27	; 0x03
    1306:	ce 01       	movw	r24, r28
    1308:	ce 96       	adiw	r24, 0x3e	; 62
    130a:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e8       	ldi	r20, 0x80	; 128
    1310:	5f e3       	ldi	r21, 0x3F	; 63
    1312:	fc 01       	movw	r30, r24
    1314:	60 81       	ld	r22, Z
    1316:	71 81       	ldd	r23, Z+1	; 0x01
    1318:	82 81       	ldd	r24, Z+2	; 0x02
    131a:	93 81       	ldd	r25, Z+3	; 0x03
    131c:	0e 94 77 17 	call	0x2eee	; 0x2eee <__cmpsf2>
    1320:	88 23       	and	r24, r24
    1322:	4c f4       	brge	.+18     	; 0x1336 <decodeCommand+0x49e>
    1324:	ce 01       	movw	r24, r28
    1326:	8e 5b       	subi	r24, 0xBE	; 190
    1328:	9f 4f       	sbci	r25, 0xFF	; 255
		__ticks = 1;
    132a:	21 e0       	ldi	r18, 0x01	; 1
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	fc 01       	movw	r30, r24
    1330:	31 83       	std	Z+1, r19	; 0x01
    1332:	20 83       	st	Z, r18
    1334:	67 c0       	rjmp	.+206    	; 0x1404 <decodeCommand+0x56c>
    1336:	ce 01       	movw	r24, r28
    1338:	ce 96       	adiw	r24, 0x3e	; 62
    133a:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    133c:	3f ef       	ldi	r19, 0xFF	; 255
    133e:	4f e7       	ldi	r20, 0x7F	; 127
    1340:	57 e4       	ldi	r21, 0x47	; 71
    1342:	fc 01       	movw	r30, r24
    1344:	60 81       	ld	r22, Z
    1346:	71 81       	ldd	r23, Z+1	; 0x01
    1348:	82 81       	ldd	r24, Z+2	; 0x02
    134a:	93 81       	ldd	r25, Z+3	; 0x03
    134c:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__gesf2>
    1350:	18 16       	cp	r1, r24
    1352:	0c f0       	brlt	.+2      	; 0x1356 <decodeCommand+0x4be>
    1354:	46 c0       	rjmp	.+140    	; 0x13e2 <decodeCommand+0x54a>
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    135c:	51 e4       	ldi	r21, 0x41	; 65
    135e:	6a 81       	ldd	r22, Y+2	; 0x02
    1360:	7b 81       	ldd	r23, Y+3	; 0x03
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	9d 81       	ldd	r25, Y+5	; 0x05
    1366:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	8e 01       	movw	r16, r28
    1370:	0e 5b       	subi	r16, 0xBE	; 190
    1372:	1f 4f       	sbci	r17, 0xFF	; 255
    1374:	bc 01       	movw	r22, r24
    1376:	cd 01       	movw	r24, r26
    1378:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__fixunssfsi>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	f8 01       	movw	r30, r16
    1382:	91 83       	std	Z+1, r25	; 0x01
    1384:	80 83       	st	Z, r24
    1386:	24 c0       	rjmp	.+72     	; 0x13d0 <decodeCommand+0x538>
    1388:	ce 01       	movw	r24, r28
    138a:	8c 5b       	subi	r24, 0xBC	; 188
    138c:	9f 4f       	sbci	r25, 0xFF	; 255
    138e:	28 ec       	ldi	r18, 0xC8	; 200
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	fc 01       	movw	r30, r24
    1394:	31 83       	std	Z+1, r19	; 0x01
    1396:	20 83       	st	Z, r18
    1398:	ce 01       	movw	r24, r28
    139a:	8c 5b       	subi	r24, 0xBC	; 188
    139c:	9f 4f       	sbci	r25, 0xFF	; 255
    139e:	fc 01       	movw	r30, r24
    13a0:	80 81       	ld	r24, Z
    13a2:	91 81       	ldd	r25, Z+1	; 0x01
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <decodeCommand+0x50c>
    13a8:	9e 01       	movw	r18, r28
    13aa:	2c 5b       	subi	r18, 0xBC	; 188
    13ac:	3f 4f       	sbci	r19, 0xFF	; 255
    13ae:	f9 01       	movw	r30, r18
    13b0:	91 83       	std	Z+1, r25	; 0x01
    13b2:	80 83       	st	Z, r24
    13b4:	ce 01       	movw	r24, r28
    13b6:	8e 5b       	subi	r24, 0xBE	; 190
    13b8:	9f 4f       	sbci	r25, 0xFF	; 255
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ba:	9e 01       	movw	r18, r28
    13bc:	2e 5b       	subi	r18, 0xBE	; 190
    13be:	3f 4f       	sbci	r19, 0xFF	; 255
    13c0:	f9 01       	movw	r30, r18
    13c2:	20 81       	ld	r18, Z
    13c4:	31 81       	ldd	r19, Z+1	; 0x01
    13c6:	21 50       	subi	r18, 0x01	; 1
    13c8:	31 09       	sbc	r19, r1
    13ca:	fc 01       	movw	r30, r24
    13cc:	31 83       	std	Z+1, r19	; 0x01
    13ce:	20 83       	st	Z, r18
    13d0:	ce 01       	movw	r24, r28
    13d2:	8e 5b       	subi	r24, 0xBE	; 190
    13d4:	9f 4f       	sbci	r25, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d6:	fc 01       	movw	r30, r24
    13d8:	80 81       	ld	r24, Z
    13da:	91 81       	ldd	r25, Z+1	; 0x01
    13dc:	89 2b       	or	r24, r25
    13de:	a1 f6       	brne	.-88     	; 0x1388 <decodeCommand+0x4f0>
    13e0:	d4 c4       	rjmp	.+2472   	; 0x1d8a <decodeCommand+0xef2>
    13e2:	8e 01       	movw	r16, r28
    13e4:	0e 5b       	subi	r16, 0xBE	; 190
				
				_delay_ms(DEBOUNCE_DELAY);
				
				break;
    13e6:	1f 4f       	sbci	r17, 0xFF	; 255
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e8:	ce 01       	movw	r24, r28
    13ea:	ce 96       	adiw	r24, 0x3e	; 62
    13ec:	fc 01       	movw	r30, r24
    13ee:	60 81       	ld	r22, Z
    13f0:	71 81       	ldd	r23, Z+1	; 0x01
    13f2:	82 81       	ldd	r24, Z+2	; 0x02
    13f4:	93 81       	ldd	r25, Z+3	; 0x03
    13f6:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__fixunssfsi>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	f8 01       	movw	r30, r16
    1400:	91 83       	std	Z+1, r25	; 0x01
    1402:	80 83       	st	Z, r24
    1404:	ce 01       	movw	r24, r28
    1406:	8a 5b       	subi	r24, 0xBA	; 186
    1408:	9f 4f       	sbci	r25, 0xFF	; 255
    140a:	9e 01       	movw	r18, r28
    140c:	2e 5b       	subi	r18, 0xBE	; 190
    140e:	3f 4f       	sbci	r19, 0xFF	; 255
    1410:	f9 01       	movw	r30, r18
    1412:	20 81       	ld	r18, Z
    1414:	31 81       	ldd	r19, Z+1	; 0x01
    1416:	fc 01       	movw	r30, r24
    1418:	31 83       	std	Z+1, r19	; 0x01
    141a:	20 83       	st	Z, r18
    141c:	ce 01       	movw	r24, r28
    141e:	8a 5b       	subi	r24, 0xBA	; 186
    1420:	9f 4f       	sbci	r25, 0xFF	; 255
    1422:	fc 01       	movw	r30, r24
    1424:	80 81       	ld	r24, Z
    1426:	91 81       	ldd	r25, Z+1	; 0x01
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	f1 f7       	brne	.-4      	; 0x1428 <decodeCommand+0x590>
    142c:	9e 01       	movw	r18, r28
    142e:	2a 5b       	subi	r18, 0xBA	; 186
    1430:	3f 4f       	sbci	r19, 0xFF	; 255
    1432:	f9 01       	movw	r30, r18
    1434:	91 83       	std	Z+1, r25	; 0x01
    1436:	80 83       	st	Z, r24
    1438:	a8 c4       	rjmp	.+2384   	; 0x1d8a <decodeCommand+0xef2>
    143a:	86 e2       	ldi	r24, 0x26	; 38
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	fc 01       	movw	r30, r24
			}
			
			case REMOTE_LEFT: {
				switch(OUTPUT_LED_PIN & 0xe0) {
    1440:	80 81       	ld	r24, Z
    1442:	88 2f       	mov	r24, r24
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	80 7e       	andi	r24, 0xE0	; 224
    1448:	99 27       	eor	r25, r25
    144a:	80 34       	cpi	r24, 0x40	; 64
    144c:	91 05       	cpc	r25, r1
    144e:	49 f0       	breq	.+18     	; 0x1462 <decodeCommand+0x5ca>
    1450:	80 38       	cpi	r24, 0x80	; 128
    1452:	91 05       	cpc	r25, r1
    1454:	49 f0       	breq	.+18     	; 0x1468 <decodeCommand+0x5d0>
    1456:	80 97       	sbiw	r24, 0x20	; 32
    1458:	09 f0       	breq	.+2      	; 0x145c <decodeCommand+0x5c4>
    145a:	07 c0       	rjmp	.+14     	; 0x146a <decodeCommand+0x5d2>
    145c:	0e 94 4b 14 	call	0x2896	; 0x2896 <setLevelMedium>

						break;
					}

					default: {
						break;
    1460:	04 c0       	rjmp	.+8      	; 0x146a <decodeCommand+0x5d2>
			}
			
			case REMOTE_LEFT: {
				switch(OUTPUT_LED_PIN & 0xe0) {
					case OUTPUT_LED_HIGH: {									// Switch to medium
						setLevelMedium();
    1462:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <setLevelLow>

						break;
    1466:	01 c0       	rjmp	.+2      	; 0x146a <decodeCommand+0x5d2>
					}

					case OUTPUT_LED_MED: {									// Switch to low
						setLevelLow();
    1468:	00 00       	nop
    146a:	8b e2       	ldi	r24, 0x2B	; 43

						break;
    146c:	90 e0       	ldi	r25, 0x00	; 0
					}

					case OUTPUT_LED_LOW: {									// Switch to high

						break;
    146e:	2b e2       	ldi	r18, 0x2B	; 43
					default: {
						break;
					}
				}
				
				CLEARBIT(REMOTE_PORT,REMOTE_LED);
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	f9 01       	movw	r30, r18
    1474:	20 81       	ld	r18, Z
    1476:	2d 7f       	andi	r18, 0xFD	; 253
    1478:	fc 01       	movw	r30, r24
    147a:	20 83       	st	Z, r18
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	a6 e1       	ldi	r26, 0x16	; 22
    1482:	b3 e4       	ldi	r27, 0x43	; 67
    1484:	8e 8b       	std	Y+22, r24	; 0x16
    1486:	9f 8b       	std	Y+23, r25	; 0x17
    1488:	a8 8f       	std	Y+24, r26	; 0x18
    148a:	b9 8f       	std	Y+25, r27	; 0x19
    148c:	8e 01       	movw	r16, r28
    148e:	04 5a       	subi	r16, 0xA4	; 164
    1490:	1f 4f       	sbci	r17, 0xFF	; 255

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	4a ef       	ldi	r20, 0xFA	; 250
    1498:	54 e4       	ldi	r21, 0x44	; 68
    149a:	6e 89       	ldd	r22, Y+22	; 0x16
    149c:	7f 89       	ldd	r23, Y+23	; 0x17
    149e:	88 8d       	ldd	r24, Y+24	; 0x18
    14a0:	99 8d       	ldd	r25, Y+25	; 0x19
    14a2:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	f8 01       	movw	r30, r16
    14ac:	80 83       	st	Z, r24
    14ae:	91 83       	std	Z+1, r25	; 0x01
    14b0:	a2 83       	std	Z+2, r26	; 0x02
    14b2:	b3 83       	std	Z+3, r27	; 0x03
    14b4:	ce 01       	movw	r24, r28
    14b6:	84 5a       	subi	r24, 0xA4	; 164
    14b8:	9f 4f       	sbci	r25, 0xFF	; 255
	if (__tmp < 1.0)
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	40 e8       	ldi	r20, 0x80	; 128
    14c0:	5f e3       	ldi	r21, 0x3F	; 63
    14c2:	fc 01       	movw	r30, r24
    14c4:	60 81       	ld	r22, Z
    14c6:	71 81       	ldd	r23, Z+1	; 0x01
    14c8:	82 81       	ldd	r24, Z+2	; 0x02
    14ca:	93 81       	ldd	r25, Z+3	; 0x03
    14cc:	0e 94 77 17 	call	0x2eee	; 0x2eee <__cmpsf2>
    14d0:	88 23       	and	r24, r24
    14d2:	4c f4       	brge	.+18     	; 0x14e6 <decodeCommand+0x64e>
    14d4:	ce 01       	movw	r24, r28
    14d6:	80 5a       	subi	r24, 0xA0	; 160
    14d8:	9f 4f       	sbci	r25, 0xFF	; 255
		__ticks = 1;
    14da:	21 e0       	ldi	r18, 0x01	; 1
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	fc 01       	movw	r30, r24
    14e0:	31 83       	std	Z+1, r19	; 0x01
    14e2:	20 83       	st	Z, r18
    14e4:	69 c0       	rjmp	.+210    	; 0x15b8 <decodeCommand+0x720>
    14e6:	ce 01       	movw	r24, r28
    14e8:	84 5a       	subi	r24, 0xA4	; 164
    14ea:	9f 4f       	sbci	r25, 0xFF	; 255
	else if (__tmp > 65535)
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	3f ef       	ldi	r19, 0xFF	; 255
    14f0:	4f e7       	ldi	r20, 0x7F	; 127
    14f2:	57 e4       	ldi	r21, 0x47	; 71
    14f4:	fc 01       	movw	r30, r24
    14f6:	60 81       	ld	r22, Z
    14f8:	71 81       	ldd	r23, Z+1	; 0x01
    14fa:	82 81       	ldd	r24, Z+2	; 0x02
    14fc:	93 81       	ldd	r25, Z+3	; 0x03
    14fe:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__gesf2>
    1502:	18 16       	cp	r1, r24
    1504:	0c f0       	brlt	.+2      	; 0x1508 <decodeCommand+0x670>
    1506:	46 c0       	rjmp	.+140    	; 0x1594 <decodeCommand+0x6fc>
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150e:	51 e4       	ldi	r21, 0x41	; 65
    1510:	6e 89       	ldd	r22, Y+22	; 0x16
    1512:	7f 89       	ldd	r23, Y+23	; 0x17
    1514:	88 8d       	ldd	r24, Y+24	; 0x18
    1516:	99 8d       	ldd	r25, Y+25	; 0x19
    1518:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	8e 01       	movw	r16, r28
    1522:	00 5a       	subi	r16, 0xA0	; 160
    1524:	1f 4f       	sbci	r17, 0xFF	; 255
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	f8 01       	movw	r30, r16
    1534:	91 83       	std	Z+1, r25	; 0x01
    1536:	80 83       	st	Z, r24
    1538:	24 c0       	rjmp	.+72     	; 0x1582 <decodeCommand+0x6ea>
    153a:	ce 01       	movw	r24, r28
    153c:	8e 59       	subi	r24, 0x9E	; 158
    153e:	9f 4f       	sbci	r25, 0xFF	; 255
    1540:	28 ec       	ldi	r18, 0xC8	; 200
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	fc 01       	movw	r30, r24
    1546:	31 83       	std	Z+1, r19	; 0x01
    1548:	20 83       	st	Z, r18
    154a:	ce 01       	movw	r24, r28
    154c:	8e 59       	subi	r24, 0x9E	; 158
    154e:	9f 4f       	sbci	r25, 0xFF	; 255
    1550:	fc 01       	movw	r30, r24
    1552:	80 81       	ld	r24, Z
    1554:	91 81       	ldd	r25, Z+1	; 0x01
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	f1 f7       	brne	.-4      	; 0x1556 <decodeCommand+0x6be>
    155a:	9e 01       	movw	r18, r28
    155c:	2e 59       	subi	r18, 0x9E	; 158
    155e:	3f 4f       	sbci	r19, 0xFF	; 255
    1560:	f9 01       	movw	r30, r18
    1562:	91 83       	std	Z+1, r25	; 0x01
    1564:	80 83       	st	Z, r24
    1566:	ce 01       	movw	r24, r28
    1568:	80 5a       	subi	r24, 0xA0	; 160
    156a:	9f 4f       	sbci	r25, 0xFF	; 255
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156c:	9e 01       	movw	r18, r28
    156e:	20 5a       	subi	r18, 0xA0	; 160
    1570:	3f 4f       	sbci	r19, 0xFF	; 255
    1572:	f9 01       	movw	r30, r18
    1574:	20 81       	ld	r18, Z
    1576:	31 81       	ldd	r19, Z+1	; 0x01
    1578:	21 50       	subi	r18, 0x01	; 1
    157a:	31 09       	sbc	r19, r1
    157c:	fc 01       	movw	r30, r24
    157e:	31 83       	std	Z+1, r19	; 0x01
    1580:	20 83       	st	Z, r18
    1582:	ce 01       	movw	r24, r28
    1584:	80 5a       	subi	r24, 0xA0	; 160
    1586:	9f 4f       	sbci	r25, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1588:	fc 01       	movw	r30, r24
    158a:	80 81       	ld	r24, Z
    158c:	91 81       	ldd	r25, Z+1	; 0x01
    158e:	89 2b       	or	r24, r25
    1590:	a1 f6       	brne	.-88     	; 0x153a <decodeCommand+0x6a2>
    1592:	2c c0       	rjmp	.+88     	; 0x15ec <decodeCommand+0x754>
    1594:	8e 01       	movw	r16, r28
    1596:	00 5a       	subi	r16, 0xA0	; 160
    1598:	1f 4f       	sbci	r17, 0xFF	; 255
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    159a:	ce 01       	movw	r24, r28
    159c:	84 5a       	subi	r24, 0xA4	; 164
    159e:	9f 4f       	sbci	r25, 0xFF	; 255
    15a0:	fc 01       	movw	r30, r24
    15a2:	60 81       	ld	r22, Z
    15a4:	71 81       	ldd	r23, Z+1	; 0x01
    15a6:	82 81       	ldd	r24, Z+2	; 0x02
    15a8:	93 81       	ldd	r25, Z+3	; 0x03
    15aa:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__fixunssfsi>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	f8 01       	movw	r30, r16
    15b4:	91 83       	std	Z+1, r25	; 0x01
    15b6:	80 83       	st	Z, r24
    15b8:	ce 01       	movw	r24, r28
    15ba:	8c 59       	subi	r24, 0x9C	; 156
    15bc:	9f 4f       	sbci	r25, 0xFF	; 255
    15be:	9e 01       	movw	r18, r28
    15c0:	20 5a       	subi	r18, 0xA0	; 160
    15c2:	3f 4f       	sbci	r19, 0xFF	; 255
    15c4:	f9 01       	movw	r30, r18
    15c6:	20 81       	ld	r18, Z
    15c8:	31 81       	ldd	r19, Z+1	; 0x01
    15ca:	fc 01       	movw	r30, r24
    15cc:	31 83       	std	Z+1, r19	; 0x01
    15ce:	20 83       	st	Z, r18
    15d0:	ce 01       	movw	r24, r28
    15d2:	8c 59       	subi	r24, 0x9C	; 156
    15d4:	9f 4f       	sbci	r25, 0xFF	; 255
    15d6:	fc 01       	movw	r30, r24
    15d8:	80 81       	ld	r24, Z
    15da:	91 81       	ldd	r25, Z+1	; 0x01
    15dc:	01 97       	sbiw	r24, 0x01	; 1
    15de:	f1 f7       	brne	.-4      	; 0x15dc <decodeCommand+0x744>
    15e0:	9e 01       	movw	r18, r28
    15e2:	2c 59       	subi	r18, 0x9C	; 156
    15e4:	3f 4f       	sbci	r19, 0xFF	; 255
    15e6:	f9 01       	movw	r30, r18
    15e8:	91 83       	std	Z+1, r25	; 0x01
    15ea:	80 83       	st	Z, r24
    15ec:	8b e2       	ldi	r24, 0x2B	; 43
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	2b e2       	ldi	r18, 0x2B	; 43
				_delay_ms(IR_LED_DELAY);
				SETBIT(REMOTE_PORT,REMOTE_LED);
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	f9 01       	movw	r30, r18
    15f6:	20 81       	ld	r18, Z
    15f8:	22 60       	ori	r18, 0x02	; 2
    15fa:	fc 01       	movw	r30, r24
    15fc:	20 83       	st	Z, r18
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a8 ec       	ldi	r26, 0xC8	; 200
    1604:	b2 e4       	ldi	r27, 0x42	; 66
    1606:	8a 87       	std	Y+10, r24	; 0x0a
    1608:	9b 87       	std	Y+11, r25	; 0x0b
    160a:	ac 87       	std	Y+12, r26	; 0x0c
    160c:	bd 87       	std	Y+13, r27	; 0x0d
    160e:	8e 01       	movw	r16, r28
    1610:	0e 5a       	subi	r16, 0xAE	; 174
    1612:	1f 4f       	sbci	r17, 0xFF	; 255

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	4a ef       	ldi	r20, 0xFA	; 250
    161a:	54 e4       	ldi	r21, 0x44	; 68
    161c:	6a 85       	ldd	r22, Y+10	; 0x0a
    161e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1620:	8c 85       	ldd	r24, Y+12	; 0x0c
    1622:	9d 85       	ldd	r25, Y+13	; 0x0d
    1624:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	f8 01       	movw	r30, r16
    162e:	80 83       	st	Z, r24
    1630:	91 83       	std	Z+1, r25	; 0x01
    1632:	a2 83       	std	Z+2, r26	; 0x02
    1634:	b3 83       	std	Z+3, r27	; 0x03
    1636:	ce 01       	movw	r24, r28
    1638:	8e 5a       	subi	r24, 0xAE	; 174
    163a:	9f 4f       	sbci	r25, 0xFF	; 255
	if (__tmp < 1.0)
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	40 e8       	ldi	r20, 0x80	; 128
    1642:	5f e3       	ldi	r21, 0x3F	; 63
    1644:	fc 01       	movw	r30, r24
    1646:	60 81       	ld	r22, Z
    1648:	71 81       	ldd	r23, Z+1	; 0x01
    164a:	82 81       	ldd	r24, Z+2	; 0x02
    164c:	93 81       	ldd	r25, Z+3	; 0x03
    164e:	0e 94 77 17 	call	0x2eee	; 0x2eee <__cmpsf2>
    1652:	88 23       	and	r24, r24
    1654:	4c f4       	brge	.+18     	; 0x1668 <decodeCommand+0x7d0>
    1656:	ce 01       	movw	r24, r28
    1658:	8a 5a       	subi	r24, 0xAA	; 170
    165a:	9f 4f       	sbci	r25, 0xFF	; 255
		__ticks = 1;
    165c:	21 e0       	ldi	r18, 0x01	; 1
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	fc 01       	movw	r30, r24
    1662:	31 83       	std	Z+1, r19	; 0x01
    1664:	20 83       	st	Z, r18
    1666:	69 c0       	rjmp	.+210    	; 0x173a <decodeCommand+0x8a2>
    1668:	ce 01       	movw	r24, r28
    166a:	8e 5a       	subi	r24, 0xAE	; 174
    166c:	9f 4f       	sbci	r25, 0xFF	; 255
	else if (__tmp > 65535)
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	3f ef       	ldi	r19, 0xFF	; 255
    1672:	4f e7       	ldi	r20, 0x7F	; 127
    1674:	57 e4       	ldi	r21, 0x47	; 71
    1676:	fc 01       	movw	r30, r24
    1678:	60 81       	ld	r22, Z
    167a:	71 81       	ldd	r23, Z+1	; 0x01
    167c:	82 81       	ldd	r24, Z+2	; 0x02
    167e:	93 81       	ldd	r25, Z+3	; 0x03
    1680:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__gesf2>
    1684:	18 16       	cp	r1, r24
    1686:	0c f0       	brlt	.+2      	; 0x168a <decodeCommand+0x7f2>
    1688:	46 c0       	rjmp	.+140    	; 0x1716 <decodeCommand+0x87e>
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1690:	51 e4       	ldi	r21, 0x41	; 65
    1692:	6a 85       	ldd	r22, Y+10	; 0x0a
    1694:	7b 85       	ldd	r23, Y+11	; 0x0b
    1696:	8c 85       	ldd	r24, Y+12	; 0x0c
    1698:	9d 85       	ldd	r25, Y+13	; 0x0d
    169a:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	8e 01       	movw	r16, r28
    16a4:	0a 5a       	subi	r16, 0xAA	; 170
    16a6:	1f 4f       	sbci	r17, 0xFF	; 255
    16a8:	bc 01       	movw	r22, r24
    16aa:	cd 01       	movw	r24, r26
    16ac:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__fixunssfsi>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	f8 01       	movw	r30, r16
    16b6:	91 83       	std	Z+1, r25	; 0x01
    16b8:	80 83       	st	Z, r24
    16ba:	24 c0       	rjmp	.+72     	; 0x1704 <decodeCommand+0x86c>
    16bc:	ce 01       	movw	r24, r28
    16be:	88 5a       	subi	r24, 0xA8	; 168
    16c0:	9f 4f       	sbci	r25, 0xFF	; 255
    16c2:	28 ec       	ldi	r18, 0xC8	; 200
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	fc 01       	movw	r30, r24
    16c8:	31 83       	std	Z+1, r19	; 0x01
    16ca:	20 83       	st	Z, r18
    16cc:	ce 01       	movw	r24, r28
    16ce:	88 5a       	subi	r24, 0xA8	; 168
    16d0:	9f 4f       	sbci	r25, 0xFF	; 255
    16d2:	fc 01       	movw	r30, r24
    16d4:	80 81       	ld	r24, Z
    16d6:	91 81       	ldd	r25, Z+1	; 0x01
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <decodeCommand+0x840>
    16dc:	9e 01       	movw	r18, r28
    16de:	28 5a       	subi	r18, 0xA8	; 168
    16e0:	3f 4f       	sbci	r19, 0xFF	; 255
    16e2:	f9 01       	movw	r30, r18
    16e4:	91 83       	std	Z+1, r25	; 0x01
    16e6:	80 83       	st	Z, r24
    16e8:	ce 01       	movw	r24, r28
    16ea:	8a 5a       	subi	r24, 0xAA	; 170
    16ec:	9f 4f       	sbci	r25, 0xFF	; 255
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ee:	9e 01       	movw	r18, r28
    16f0:	2a 5a       	subi	r18, 0xAA	; 170
    16f2:	3f 4f       	sbci	r19, 0xFF	; 255
    16f4:	f9 01       	movw	r30, r18
    16f6:	20 81       	ld	r18, Z
    16f8:	31 81       	ldd	r19, Z+1	; 0x01
    16fa:	21 50       	subi	r18, 0x01	; 1
    16fc:	31 09       	sbc	r19, r1
    16fe:	fc 01       	movw	r30, r24
    1700:	31 83       	std	Z+1, r19	; 0x01
    1702:	20 83       	st	Z, r18
    1704:	ce 01       	movw	r24, r28
    1706:	8a 5a       	subi	r24, 0xAA	; 170
    1708:	9f 4f       	sbci	r25, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170a:	fc 01       	movw	r30, r24
    170c:	80 81       	ld	r24, Z
    170e:	91 81       	ldd	r25, Z+1	; 0x01
    1710:	89 2b       	or	r24, r25
    1712:	a1 f6       	brne	.-88     	; 0x16bc <decodeCommand+0x824>
    1714:	3a c3       	rjmp	.+1652   	; 0x1d8a <decodeCommand+0xef2>
    1716:	8e 01       	movw	r16, r28
    1718:	0a 5a       	subi	r16, 0xAA	; 170
				
				_delay_ms(DEBOUNCE_DELAY);

				break;
    171a:	1f 4f       	sbci	r17, 0xFF	; 255
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    171c:	ce 01       	movw	r24, r28
    171e:	8e 5a       	subi	r24, 0xAE	; 174
    1720:	9f 4f       	sbci	r25, 0xFF	; 255
    1722:	fc 01       	movw	r30, r24
    1724:	60 81       	ld	r22, Z
    1726:	71 81       	ldd	r23, Z+1	; 0x01
    1728:	82 81       	ldd	r24, Z+2	; 0x02
    172a:	93 81       	ldd	r25, Z+3	; 0x03
    172c:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__fixunssfsi>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	f8 01       	movw	r30, r16
    1736:	91 83       	std	Z+1, r25	; 0x01
    1738:	80 83       	st	Z, r24
    173a:	ce 01       	movw	r24, r28
    173c:	86 5a       	subi	r24, 0xA6	; 166
    173e:	9f 4f       	sbci	r25, 0xFF	; 255
    1740:	9e 01       	movw	r18, r28
    1742:	2a 5a       	subi	r18, 0xAA	; 170
    1744:	3f 4f       	sbci	r19, 0xFF	; 255
    1746:	f9 01       	movw	r30, r18
    1748:	20 81       	ld	r18, Z
    174a:	31 81       	ldd	r19, Z+1	; 0x01
    174c:	fc 01       	movw	r30, r24
    174e:	31 83       	std	Z+1, r19	; 0x01
    1750:	20 83       	st	Z, r18
    1752:	ce 01       	movw	r24, r28
    1754:	86 5a       	subi	r24, 0xA6	; 166
    1756:	9f 4f       	sbci	r25, 0xFF	; 255
    1758:	fc 01       	movw	r30, r24
    175a:	80 81       	ld	r24, Z
    175c:	91 81       	ldd	r25, Z+1	; 0x01
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	f1 f7       	brne	.-4      	; 0x175e <decodeCommand+0x8c6>
    1762:	9e 01       	movw	r18, r28
    1764:	26 5a       	subi	r18, 0xA6	; 166
    1766:	3f 4f       	sbci	r19, 0xFF	; 255
    1768:	f9 01       	movw	r30, r18
    176a:	91 83       	std	Z+1, r25	; 0x01
    176c:	80 83       	st	Z, r24
    176e:	0d c3       	rjmp	.+1562   	; 0x1d8a <decodeCommand+0xef2>
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	aa ef       	ldi	r26, 0xFA	; 250
    1776:	b3 e4       	ldi	r27, 0x43	; 67
    1778:	8a 8b       	std	Y+18, r24	; 0x12
    177a:	9b 8b       	std	Y+19, r25	; 0x13
    177c:	ac 8b       	std	Y+20, r26	; 0x14
    177e:	bd 8b       	std	Y+21, r27	; 0x15
    1780:	8e 01       	movw	r16, r28
    1782:	0a 59       	subi	r16, 0x9A	; 154
    1784:	1f 4f       	sbci	r17, 0xFF	; 255

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	4a ef       	ldi	r20, 0xFA	; 250
    178c:	54 e4       	ldi	r21, 0x44	; 68
    178e:	6a 89       	ldd	r22, Y+18	; 0x12
    1790:	7b 89       	ldd	r23, Y+19	; 0x13
    1792:	8c 89       	ldd	r24, Y+20	; 0x14
    1794:	9d 89       	ldd	r25, Y+21	; 0x15
    1796:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	f8 01       	movw	r30, r16
    17a0:	80 83       	st	Z, r24
    17a2:	91 83       	std	Z+1, r25	; 0x01
    17a4:	a2 83       	std	Z+2, r26	; 0x02
    17a6:	b3 83       	std	Z+3, r27	; 0x03
    17a8:	ce 01       	movw	r24, r28
    17aa:	8a 59       	subi	r24, 0x9A	; 154
    17ac:	9f 4f       	sbci	r25, 0xFF	; 255
	if (__tmp < 1.0)
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e8       	ldi	r20, 0x80	; 128
    17b4:	5f e3       	ldi	r21, 0x3F	; 63
    17b6:	fc 01       	movw	r30, r24
    17b8:	60 81       	ld	r22, Z
    17ba:	71 81       	ldd	r23, Z+1	; 0x01
    17bc:	82 81       	ldd	r24, Z+2	; 0x02
    17be:	93 81       	ldd	r25, Z+3	; 0x03
    17c0:	0e 94 77 17 	call	0x2eee	; 0x2eee <__cmpsf2>
    17c4:	88 23       	and	r24, r24
    17c6:	4c f4       	brge	.+18     	; 0x17da <decodeCommand+0x942>
    17c8:	ce 01       	movw	r24, r28
    17ca:	86 59       	subi	r24, 0x96	; 150
    17cc:	9f 4f       	sbci	r25, 0xFF	; 255
		__ticks = 1;
    17ce:	21 e0       	ldi	r18, 0x01	; 1
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	fc 01       	movw	r30, r24
    17d4:	31 83       	std	Z+1, r19	; 0x01
    17d6:	20 83       	st	Z, r18
    17d8:	69 c0       	rjmp	.+210    	; 0x18ac <decodeCommand+0xa14>
    17da:	ce 01       	movw	r24, r28
    17dc:	8a 59       	subi	r24, 0x9A	; 154
    17de:	9f 4f       	sbci	r25, 0xFF	; 255
	else if (__tmp > 65535)
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	3f ef       	ldi	r19, 0xFF	; 255
    17e4:	4f e7       	ldi	r20, 0x7F	; 127
    17e6:	57 e4       	ldi	r21, 0x47	; 71
    17e8:	fc 01       	movw	r30, r24
    17ea:	60 81       	ld	r22, Z
    17ec:	71 81       	ldd	r23, Z+1	; 0x01
    17ee:	82 81       	ldd	r24, Z+2	; 0x02
    17f0:	93 81       	ldd	r25, Z+3	; 0x03
    17f2:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__gesf2>
    17f6:	18 16       	cp	r1, r24
    17f8:	0c f0       	brlt	.+2      	; 0x17fc <decodeCommand+0x964>
    17fa:	46 c0       	rjmp	.+140    	; 0x1888 <decodeCommand+0x9f0>
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1802:	51 e4       	ldi	r21, 0x41	; 65
    1804:	6a 89       	ldd	r22, Y+18	; 0x12
    1806:	7b 89       	ldd	r23, Y+19	; 0x13
    1808:	8c 89       	ldd	r24, Y+20	; 0x14
    180a:	9d 89       	ldd	r25, Y+21	; 0x15
    180c:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	8e 01       	movw	r16, r28
    1816:	06 59       	subi	r16, 0x96	; 150
    1818:	1f 4f       	sbci	r17, 0xFF	; 255
    181a:	bc 01       	movw	r22, r24
    181c:	cd 01       	movw	r24, r26
    181e:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__fixunssfsi>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	f8 01       	movw	r30, r16
    1828:	91 83       	std	Z+1, r25	; 0x01
    182a:	80 83       	st	Z, r24
    182c:	24 c0       	rjmp	.+72     	; 0x1876 <decodeCommand+0x9de>
    182e:	ce 01       	movw	r24, r28
    1830:	84 59       	subi	r24, 0x94	; 148
    1832:	9f 4f       	sbci	r25, 0xFF	; 255
    1834:	28 ec       	ldi	r18, 0xC8	; 200
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	fc 01       	movw	r30, r24
    183a:	31 83       	std	Z+1, r19	; 0x01
    183c:	20 83       	st	Z, r18
    183e:	ce 01       	movw	r24, r28
    1840:	84 59       	subi	r24, 0x94	; 148
    1842:	9f 4f       	sbci	r25, 0xFF	; 255
    1844:	fc 01       	movw	r30, r24
    1846:	80 81       	ld	r24, Z
    1848:	91 81       	ldd	r25, Z+1	; 0x01
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	f1 f7       	brne	.-4      	; 0x184a <decodeCommand+0x9b2>
    184e:	9e 01       	movw	r18, r28
    1850:	24 59       	subi	r18, 0x94	; 148
    1852:	3f 4f       	sbci	r19, 0xFF	; 255
    1854:	f9 01       	movw	r30, r18
    1856:	91 83       	std	Z+1, r25	; 0x01
    1858:	80 83       	st	Z, r24
    185a:	ce 01       	movw	r24, r28
    185c:	86 59       	subi	r24, 0x96	; 150
    185e:	9f 4f       	sbci	r25, 0xFF	; 255
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1860:	9e 01       	movw	r18, r28
    1862:	26 59       	subi	r18, 0x96	; 150
    1864:	3f 4f       	sbci	r19, 0xFF	; 255
    1866:	f9 01       	movw	r30, r18
    1868:	20 81       	ld	r18, Z
    186a:	31 81       	ldd	r19, Z+1	; 0x01
    186c:	21 50       	subi	r18, 0x01	; 1
    186e:	31 09       	sbc	r19, r1
    1870:	fc 01       	movw	r30, r24
    1872:	31 83       	std	Z+1, r19	; 0x01
    1874:	20 83       	st	Z, r18
    1876:	ce 01       	movw	r24, r28
    1878:	86 59       	subi	r24, 0x96	; 150
    187a:	9f 4f       	sbci	r25, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187c:	fc 01       	movw	r30, r24
    187e:	80 81       	ld	r24, Z
    1880:	91 81       	ldd	r25, Z+1	; 0x01
    1882:	89 2b       	or	r24, r25
    1884:	a1 f6       	brne	.-88     	; 0x182e <decodeCommand+0x996>
    1886:	2c c0       	rjmp	.+88     	; 0x18e0 <decodeCommand+0xa48>
    1888:	8e 01       	movw	r16, r28
    188a:	06 59       	subi	r16, 0x96	; 150
    188c:	1f 4f       	sbci	r17, 0xFF	; 255
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188e:	ce 01       	movw	r24, r28
    1890:	8a 59       	subi	r24, 0x9A	; 154
    1892:	9f 4f       	sbci	r25, 0xFF	; 255
    1894:	fc 01       	movw	r30, r24
    1896:	60 81       	ld	r22, Z
    1898:	71 81       	ldd	r23, Z+1	; 0x01
    189a:	82 81       	ldd	r24, Z+2	; 0x02
    189c:	93 81       	ldd	r25, Z+3	; 0x03
    189e:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	f8 01       	movw	r30, r16
    18a8:	91 83       	std	Z+1, r25	; 0x01
    18aa:	80 83       	st	Z, r24
    18ac:	ce 01       	movw	r24, r28
    18ae:	82 59       	subi	r24, 0x92	; 146
    18b0:	9f 4f       	sbci	r25, 0xFF	; 255
    18b2:	9e 01       	movw	r18, r28
    18b4:	26 59       	subi	r18, 0x96	; 150
    18b6:	3f 4f       	sbci	r19, 0xFF	; 255
    18b8:	f9 01       	movw	r30, r18
    18ba:	20 81       	ld	r18, Z
    18bc:	31 81       	ldd	r19, Z+1	; 0x01
    18be:	fc 01       	movw	r30, r24
    18c0:	31 83       	std	Z+1, r19	; 0x01
    18c2:	20 83       	st	Z, r18
    18c4:	ce 01       	movw	r24, r28
    18c6:	82 59       	subi	r24, 0x92	; 146
    18c8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ca:	fc 01       	movw	r30, r24
    18cc:	80 81       	ld	r24, Z
    18ce:	91 81       	ldd	r25, Z+1	; 0x01
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	f1 f7       	brne	.-4      	; 0x18d0 <decodeCommand+0xa38>
    18d4:	9e 01       	movw	r18, r28
    18d6:	22 59       	subi	r18, 0x92	; 146
    18d8:	3f 4f       	sbci	r19, 0xFF	; 255
    18da:	f9 01       	movw	r30, r18
    18dc:	91 83       	std	Z+1, r25	; 0x01
    18de:	80 83       	st	Z, r24
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <levelFlag>
				SETBIT(REMOTE_PORT,REMOTE_LED);
				
				_delay_ms(DEBOUNCE_DELAY);*/
				
				_delay_ms(LEVEL_UP_DELAY);
				levelFlag = true;											// True so is executed once if button hold
    18e6:	51 c2       	rjmp	.+1186   	; 0x1d8a <decodeCommand+0xef2>
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
				
				break;
    18ec:	aa ef       	ldi	r26, 0xFA	; 250
    18ee:	b3 e4       	ldi	r27, 0x43	; 67
    18f0:	8a 8f       	std	Y+26, r24	; 0x1a
    18f2:	9b 8f       	std	Y+27, r25	; 0x1b
    18f4:	ac 8f       	std	Y+28, r26	; 0x1c
    18f6:	bd 8f       	std	Y+29, r27	; 0x1d
    18f8:	8e 01       	movw	r16, r28
    18fa:	00 59       	subi	r16, 0x90	; 144
    18fc:	1f 4f       	sbci	r17, 0xFF	; 255

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	4a ef       	ldi	r20, 0xFA	; 250
    1904:	54 e4       	ldi	r21, 0x44	; 68
    1906:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1908:	7b 8d       	ldd	r23, Y+27	; 0x1b
    190a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    190c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    190e:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	f8 01       	movw	r30, r16
    1918:	80 83       	st	Z, r24
    191a:	91 83       	std	Z+1, r25	; 0x01
    191c:	a2 83       	std	Z+2, r26	; 0x02
    191e:	b3 83       	std	Z+3, r27	; 0x03
    1920:	ce 01       	movw	r24, r28
    1922:	80 59       	subi	r24, 0x90	; 144
    1924:	9f 4f       	sbci	r25, 0xFF	; 255
	if (__tmp < 1.0)
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e8       	ldi	r20, 0x80	; 128
    192c:	5f e3       	ldi	r21, 0x3F	; 63
    192e:	fc 01       	movw	r30, r24
    1930:	60 81       	ld	r22, Z
    1932:	71 81       	ldd	r23, Z+1	; 0x01
    1934:	82 81       	ldd	r24, Z+2	; 0x02
    1936:	93 81       	ldd	r25, Z+3	; 0x03
    1938:	0e 94 77 17 	call	0x2eee	; 0x2eee <__cmpsf2>
    193c:	88 23       	and	r24, r24
    193e:	4c f4       	brge	.+18     	; 0x1952 <decodeCommand+0xaba>
    1940:	ce 01       	movw	r24, r28
    1942:	8c 58       	subi	r24, 0x8C	; 140
    1944:	9f 4f       	sbci	r25, 0xFF	; 255
		__ticks = 1;
    1946:	21 e0       	ldi	r18, 0x01	; 1
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	fc 01       	movw	r30, r24
    194c:	31 83       	std	Z+1, r19	; 0x01
    194e:	20 83       	st	Z, r18
    1950:	69 c0       	rjmp	.+210    	; 0x1a24 <decodeCommand+0xb8c>
    1952:	ce 01       	movw	r24, r28
    1954:	80 59       	subi	r24, 0x90	; 144
    1956:	9f 4f       	sbci	r25, 0xFF	; 255
	else if (__tmp > 65535)
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	3f ef       	ldi	r19, 0xFF	; 255
    195c:	4f e7       	ldi	r20, 0x7F	; 127
    195e:	57 e4       	ldi	r21, 0x47	; 71
    1960:	fc 01       	movw	r30, r24
    1962:	60 81       	ld	r22, Z
    1964:	71 81       	ldd	r23, Z+1	; 0x01
    1966:	82 81       	ldd	r24, Z+2	; 0x02
    1968:	93 81       	ldd	r25, Z+3	; 0x03
    196a:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__gesf2>
    196e:	18 16       	cp	r1, r24
    1970:	0c f0       	brlt	.+2      	; 0x1974 <decodeCommand+0xadc>
    1972:	46 c0       	rjmp	.+140    	; 0x1a00 <decodeCommand+0xb68>
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197a:	51 e4       	ldi	r21, 0x41	; 65
    197c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    197e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1980:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1982:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1984:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	8e 01       	movw	r16, r28
    198e:	0c 58       	subi	r16, 0x8C	; 140
    1990:	1f 4f       	sbci	r17, 0xFF	; 255
    1992:	bc 01       	movw	r22, r24
    1994:	cd 01       	movw	r24, r26
    1996:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__fixunssfsi>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	f8 01       	movw	r30, r16
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	80 83       	st	Z, r24
    19a4:	24 c0       	rjmp	.+72     	; 0x19ee <decodeCommand+0xb56>
    19a6:	ce 01       	movw	r24, r28
    19a8:	8a 58       	subi	r24, 0x8A	; 138
    19aa:	9f 4f       	sbci	r25, 0xFF	; 255
    19ac:	28 ec       	ldi	r18, 0xC8	; 200
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	fc 01       	movw	r30, r24
    19b2:	31 83       	std	Z+1, r19	; 0x01
    19b4:	20 83       	st	Z, r18
    19b6:	ce 01       	movw	r24, r28
    19b8:	8a 58       	subi	r24, 0x8A	; 138
    19ba:	9f 4f       	sbci	r25, 0xFF	; 255
    19bc:	fc 01       	movw	r30, r24
    19be:	80 81       	ld	r24, Z
    19c0:	91 81       	ldd	r25, Z+1	; 0x01
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <decodeCommand+0xb2a>
    19c6:	9e 01       	movw	r18, r28
    19c8:	2a 58       	subi	r18, 0x8A	; 138
    19ca:	3f 4f       	sbci	r19, 0xFF	; 255
    19cc:	f9 01       	movw	r30, r18
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	80 83       	st	Z, r24
    19d2:	ce 01       	movw	r24, r28
    19d4:	8c 58       	subi	r24, 0x8C	; 140
    19d6:	9f 4f       	sbci	r25, 0xFF	; 255
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d8:	9e 01       	movw	r18, r28
    19da:	2c 58       	subi	r18, 0x8C	; 140
    19dc:	3f 4f       	sbci	r19, 0xFF	; 255
    19de:	f9 01       	movw	r30, r18
    19e0:	20 81       	ld	r18, Z
    19e2:	31 81       	ldd	r19, Z+1	; 0x01
    19e4:	21 50       	subi	r18, 0x01	; 1
    19e6:	31 09       	sbc	r19, r1
    19e8:	fc 01       	movw	r30, r24
    19ea:	31 83       	std	Z+1, r19	; 0x01
    19ec:	20 83       	st	Z, r18
    19ee:	ce 01       	movw	r24, r28
    19f0:	8c 58       	subi	r24, 0x8C	; 140
    19f2:	9f 4f       	sbci	r25, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f4:	fc 01       	movw	r30, r24
    19f6:	80 81       	ld	r24, Z
    19f8:	91 81       	ldd	r25, Z+1	; 0x01
    19fa:	89 2b       	or	r24, r25
    19fc:	a1 f6       	brne	.-88     	; 0x19a6 <decodeCommand+0xb0e>
    19fe:	c5 c1       	rjmp	.+906    	; 0x1d8a <decodeCommand+0xef2>
    1a00:	8e 01       	movw	r16, r28
    1a02:	0c 58       	subi	r16, 0x8C	; 140
			}
			
			case REMOTE_MENU: {
				_delay_ms(PAIRING_LED_DELAY);
				
				break;
    1a04:	1f 4f       	sbci	r17, 0xFF	; 255
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a06:	ce 01       	movw	r24, r28
    1a08:	80 59       	subi	r24, 0x90	; 144
    1a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	60 81       	ld	r22, Z
    1a10:	71 81       	ldd	r23, Z+1	; 0x01
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__fixunssfsi>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	f8 01       	movw	r30, r16
    1a20:	91 83       	std	Z+1, r25	; 0x01
    1a22:	80 83       	st	Z, r24
    1a24:	ce 01       	movw	r24, r28
    1a26:	88 58       	subi	r24, 0x88	; 136
    1a28:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2a:	9e 01       	movw	r18, r28
    1a2c:	2c 58       	subi	r18, 0x8C	; 140
    1a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a30:	f9 01       	movw	r30, r18
    1a32:	20 81       	ld	r18, Z
    1a34:	31 81       	ldd	r19, Z+1	; 0x01
    1a36:	fc 01       	movw	r30, r24
    1a38:	31 83       	std	Z+1, r19	; 0x01
    1a3a:	20 83       	st	Z, r18
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	88 58       	subi	r24, 0x88	; 136
    1a40:	9f 4f       	sbci	r25, 0xFF	; 255
    1a42:	fc 01       	movw	r30, r24
    1a44:	80 81       	ld	r24, Z
    1a46:	91 81       	ldd	r25, Z+1	; 0x01
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	f1 f7       	brne	.-4      	; 0x1a48 <decodeCommand+0xbb0>
    1a4c:	9e 01       	movw	r18, r28
    1a4e:	28 58       	subi	r18, 0x88	; 136
    1a50:	3f 4f       	sbci	r19, 0xFF	; 255
    1a52:	f9 01       	movw	r30, r18
    1a54:	91 83       	std	Z+1, r25	; 0x01
    1a56:	80 83       	st	Z, r24
    1a58:	98 c1       	rjmp	.+816    	; 0x1d8a <decodeCommand+0xef2>
    1a5a:	88 e2       	ldi	r24, 0x28	; 40
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	28 e2       	ldi	r18, 0x28	; 40
			}
			
			case REMOTE_PLAY_2: {
				TOGGLEBIT(OUTPUT_RELAYS_PORT,OUTPUT_RELAYS_MUTE);			// Toggle output
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	f9 01       	movw	r30, r18
    1a64:	30 81       	ld	r19, Z
    1a66:	21 e0       	ldi	r18, 0x01	; 1
    1a68:	23 27       	eor	r18, r19
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	20 83       	st	Z, r18
    1a6e:	88 e2       	ldi	r24, 0x28	; 40
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	28 e2       	ldi	r18, 0x28	; 40
				TOGGLEBIT(OUTPUT_LED_PORT,OUTPUT_LED_MUTE);
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	f9 01       	movw	r30, r18
    1a78:	30 81       	ld	r19, Z
    1a7a:	20 e1       	ldi	r18, 0x10	; 16
    1a7c:	23 27       	eor	r18, r19
    1a7e:	fc 01       	movw	r30, r24
    1a80:	20 83       	st	Z, r18
    1a82:	8b e2       	ldi	r24, 0x2B	; 43
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	2b e2       	ldi	r18, 0x2B	; 43

				CLEARBIT(REMOTE_PORT,REMOTE_LED);
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	f9 01       	movw	r30, r18
    1a8c:	20 81       	ld	r18, Z
    1a8e:	2d 7f       	andi	r18, 0xFD	; 253
    1a90:	fc 01       	movw	r30, r24
    1a92:	20 83       	st	Z, r18
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	a6 e1       	ldi	r26, 0x16	; 22
    1a9a:	b3 e4       	ldi	r27, 0x43	; 67
    1a9c:	8a a3       	std	Y+34, r24	; 0x22
    1a9e:	9b a3       	std	Y+35, r25	; 0x23
    1aa0:	ac a3       	std	Y+36, r26	; 0x24
    1aa2:	bd a3       	std	Y+37, r27	; 0x25
    1aa4:	8e 01       	movw	r16, r28
    1aa6:	0c 57       	subi	r16, 0x7C	; 124
    1aa8:	1f 4f       	sbci	r17, 0xFF	; 255

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	4a ef       	ldi	r20, 0xFA	; 250
    1ab0:	54 e4       	ldi	r21, 0x44	; 68
    1ab2:	6a a1       	ldd	r22, Y+34	; 0x22
    1ab4:	7b a1       	ldd	r23, Y+35	; 0x23
    1ab6:	8c a1       	ldd	r24, Y+36	; 0x24
    1ab8:	9d a1       	ldd	r25, Y+37	; 0x25
    1aba:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	f8 01       	movw	r30, r16
    1ac4:	80 83       	st	Z, r24
    1ac6:	91 83       	std	Z+1, r25	; 0x01
    1ac8:	a2 83       	std	Z+2, r26	; 0x02
    1aca:	b3 83       	std	Z+3, r27	; 0x03
    1acc:	ce 01       	movw	r24, r28
    1ace:	8c 57       	subi	r24, 0x7C	; 124
    1ad0:	9f 4f       	sbci	r25, 0xFF	; 255
	if (__tmp < 1.0)
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e8       	ldi	r20, 0x80	; 128
    1ad8:	5f e3       	ldi	r21, 0x3F	; 63
    1ada:	fc 01       	movw	r30, r24
    1adc:	60 81       	ld	r22, Z
    1ade:	71 81       	ldd	r23, Z+1	; 0x01
    1ae0:	82 81       	ldd	r24, Z+2	; 0x02
    1ae2:	93 81       	ldd	r25, Z+3	; 0x03
    1ae4:	0e 94 77 17 	call	0x2eee	; 0x2eee <__cmpsf2>
    1ae8:	88 23       	and	r24, r24
    1aea:	4c f4       	brge	.+18     	; 0x1afe <decodeCommand+0xc66>
    1aec:	ce 01       	movw	r24, r28
    1aee:	88 57       	subi	r24, 0x78	; 120
    1af0:	9f 4f       	sbci	r25, 0xFF	; 255
		__ticks = 1;
    1af2:	21 e0       	ldi	r18, 0x01	; 1
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	fc 01       	movw	r30, r24
    1af8:	31 83       	std	Z+1, r19	; 0x01
    1afa:	20 83       	st	Z, r18
    1afc:	69 c0       	rjmp	.+210    	; 0x1bd0 <decodeCommand+0xd38>
    1afe:	ce 01       	movw	r24, r28
    1b00:	8c 57       	subi	r24, 0x7C	; 124
    1b02:	9f 4f       	sbci	r25, 0xFF	; 255
	else if (__tmp > 65535)
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	3f ef       	ldi	r19, 0xFF	; 255
    1b08:	4f e7       	ldi	r20, 0x7F	; 127
    1b0a:	57 e4       	ldi	r21, 0x47	; 71
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	60 81       	ld	r22, Z
    1b10:	71 81       	ldd	r23, Z+1	; 0x01
    1b12:	82 81       	ldd	r24, Z+2	; 0x02
    1b14:	93 81       	ldd	r25, Z+3	; 0x03
    1b16:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__gesf2>
    1b1a:	18 16       	cp	r1, r24
    1b1c:	0c f0       	brlt	.+2      	; 0x1b20 <decodeCommand+0xc88>
    1b1e:	46 c0       	rjmp	.+140    	; 0x1bac <decodeCommand+0xd14>
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b26:	51 e4       	ldi	r21, 0x41	; 65
    1b28:	6a a1       	ldd	r22, Y+34	; 0x22
    1b2a:	7b a1       	ldd	r23, Y+35	; 0x23
    1b2c:	8c a1       	ldd	r24, Y+36	; 0x24
    1b2e:	9d a1       	ldd	r25, Y+37	; 0x25
    1b30:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	8e 01       	movw	r16, r28
    1b3a:	08 57       	subi	r16, 0x78	; 120
    1b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3e:	bc 01       	movw	r22, r24
    1b40:	cd 01       	movw	r24, r26
    1b42:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	91 83       	std	Z+1, r25	; 0x01
    1b4e:	80 83       	st	Z, r24
    1b50:	24 c0       	rjmp	.+72     	; 0x1b9a <decodeCommand+0xd02>
    1b52:	ce 01       	movw	r24, r28
    1b54:	86 57       	subi	r24, 0x76	; 118
    1b56:	9f 4f       	sbci	r25, 0xFF	; 255
    1b58:	28 ec       	ldi	r18, 0xC8	; 200
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	31 83       	std	Z+1, r19	; 0x01
    1b60:	20 83       	st	Z, r18
    1b62:	ce 01       	movw	r24, r28
    1b64:	86 57       	subi	r24, 0x76	; 118
    1b66:	9f 4f       	sbci	r25, 0xFF	; 255
    1b68:	fc 01       	movw	r30, r24
    1b6a:	80 81       	ld	r24, Z
    1b6c:	91 81       	ldd	r25, Z+1	; 0x01
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	f1 f7       	brne	.-4      	; 0x1b6e <decodeCommand+0xcd6>
    1b72:	9e 01       	movw	r18, r28
    1b74:	26 57       	subi	r18, 0x76	; 118
    1b76:	3f 4f       	sbci	r19, 0xFF	; 255
    1b78:	f9 01       	movw	r30, r18
    1b7a:	91 83       	std	Z+1, r25	; 0x01
    1b7c:	80 83       	st	Z, r24
    1b7e:	ce 01       	movw	r24, r28
    1b80:	88 57       	subi	r24, 0x78	; 120
    1b82:	9f 4f       	sbci	r25, 0xFF	; 255
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b84:	9e 01       	movw	r18, r28
    1b86:	28 57       	subi	r18, 0x78	; 120
    1b88:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8a:	f9 01       	movw	r30, r18
    1b8c:	20 81       	ld	r18, Z
    1b8e:	31 81       	ldd	r19, Z+1	; 0x01
    1b90:	21 50       	subi	r18, 0x01	; 1
    1b92:	31 09       	sbc	r19, r1
    1b94:	fc 01       	movw	r30, r24
    1b96:	31 83       	std	Z+1, r19	; 0x01
    1b98:	20 83       	st	Z, r18
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	88 57       	subi	r24, 0x78	; 120
    1b9e:	9f 4f       	sbci	r25, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	80 81       	ld	r24, Z
    1ba4:	91 81       	ldd	r25, Z+1	; 0x01
    1ba6:	89 2b       	or	r24, r25
    1ba8:	a1 f6       	brne	.-88     	; 0x1b52 <decodeCommand+0xcba>
    1baa:	2c c0       	rjmp	.+88     	; 0x1c04 <decodeCommand+0xd6c>
    1bac:	8e 01       	movw	r16, r28
    1bae:	08 57       	subi	r16, 0x78	; 120
    1bb0:	1f 4f       	sbci	r17, 0xFF	; 255
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	8c 57       	subi	r24, 0x7C	; 124
    1bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb8:	fc 01       	movw	r30, r24
    1bba:	60 81       	ld	r22, Z
    1bbc:	71 81       	ldd	r23, Z+1	; 0x01
    1bbe:	82 81       	ldd	r24, Z+2	; 0x02
    1bc0:	93 81       	ldd	r25, Z+3	; 0x03
    1bc2:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__fixunssfsi>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	f8 01       	movw	r30, r16
    1bcc:	91 83       	std	Z+1, r25	; 0x01
    1bce:	80 83       	st	Z, r24
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	84 57       	subi	r24, 0x74	; 116
    1bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd6:	9e 01       	movw	r18, r28
    1bd8:	28 57       	subi	r18, 0x78	; 120
    1bda:	3f 4f       	sbci	r19, 0xFF	; 255
    1bdc:	f9 01       	movw	r30, r18
    1bde:	20 81       	ld	r18, Z
    1be0:	31 81       	ldd	r19, Z+1	; 0x01
    1be2:	fc 01       	movw	r30, r24
    1be4:	31 83       	std	Z+1, r19	; 0x01
    1be6:	20 83       	st	Z, r18
    1be8:	ce 01       	movw	r24, r28
    1bea:	84 57       	subi	r24, 0x74	; 116
    1bec:	9f 4f       	sbci	r25, 0xFF	; 255
    1bee:	fc 01       	movw	r30, r24
    1bf0:	80 81       	ld	r24, Z
    1bf2:	91 81       	ldd	r25, Z+1	; 0x01
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <decodeCommand+0xd5c>
    1bf8:	9e 01       	movw	r18, r28
    1bfa:	24 57       	subi	r18, 0x74	; 116
    1bfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bfe:	f9 01       	movw	r30, r18
    1c00:	91 83       	std	Z+1, r25	; 0x01
    1c02:	80 83       	st	Z, r24
    1c04:	8b e2       	ldi	r24, 0x2B	; 43
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	2b e2       	ldi	r18, 0x2B	; 43
				_delay_ms(IR_LED_DELAY);
				SETBIT(REMOTE_PORT,REMOTE_LED);
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	f9 01       	movw	r30, r18
    1c0e:	20 81       	ld	r18, Z
    1c10:	22 60       	ori	r18, 0x02	; 2
    1c12:	fc 01       	movw	r30, r24
    1c14:	20 83       	st	Z, r18
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	a8 ec       	ldi	r26, 0xC8	; 200
    1c1c:	b2 e4       	ldi	r27, 0x42	; 66
    1c1e:	8e 8f       	std	Y+30, r24	; 0x1e
    1c20:	9f 8f       	std	Y+31, r25	; 0x1f
    1c22:	a8 a3       	std	Y+32, r26	; 0x20
    1c24:	b9 a3       	std	Y+33, r27	; 0x21
    1c26:	8e 01       	movw	r16, r28
    1c28:	06 58       	subi	r16, 0x86	; 134
    1c2a:	1f 4f       	sbci	r17, 0xFF	; 255

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	4a ef       	ldi	r20, 0xFA	; 250
    1c32:	54 e4       	ldi	r21, 0x44	; 68
    1c34:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1c36:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1c38:	88 a1       	ldd	r24, Y+32	; 0x20
    1c3a:	99 a1       	ldd	r25, Y+33	; 0x21
    1c3c:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	f8 01       	movw	r30, r16
    1c46:	80 83       	st	Z, r24
    1c48:	91 83       	std	Z+1, r25	; 0x01
    1c4a:	a2 83       	std	Z+2, r26	; 0x02
    1c4c:	b3 83       	std	Z+3, r27	; 0x03
    1c4e:	ce 01       	movw	r24, r28
    1c50:	86 58       	subi	r24, 0x86	; 134
    1c52:	9f 4f       	sbci	r25, 0xFF	; 255
	if (__tmp < 1.0)
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e8       	ldi	r20, 0x80	; 128
    1c5a:	5f e3       	ldi	r21, 0x3F	; 63
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	60 81       	ld	r22, Z
    1c60:	71 81       	ldd	r23, Z+1	; 0x01
    1c62:	82 81       	ldd	r24, Z+2	; 0x02
    1c64:	93 81       	ldd	r25, Z+3	; 0x03
    1c66:	0e 94 77 17 	call	0x2eee	; 0x2eee <__cmpsf2>
    1c6a:	88 23       	and	r24, r24
    1c6c:	4c f4       	brge	.+18     	; 0x1c80 <decodeCommand+0xde8>
    1c6e:	ce 01       	movw	r24, r28
    1c70:	82 58       	subi	r24, 0x82	; 130
    1c72:	9f 4f       	sbci	r25, 0xFF	; 255
		__ticks = 1;
    1c74:	21 e0       	ldi	r18, 0x01	; 1
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	fc 01       	movw	r30, r24
    1c7a:	31 83       	std	Z+1, r19	; 0x01
    1c7c:	20 83       	st	Z, r18
    1c7e:	69 c0       	rjmp	.+210    	; 0x1d52 <decodeCommand+0xeba>
    1c80:	ce 01       	movw	r24, r28
    1c82:	86 58       	subi	r24, 0x86	; 134
    1c84:	9f 4f       	sbci	r25, 0xFF	; 255
	else if (__tmp > 65535)
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	3f ef       	ldi	r19, 0xFF	; 255
    1c8a:	4f e7       	ldi	r20, 0x7F	; 127
    1c8c:	57 e4       	ldi	r21, 0x47	; 71
    1c8e:	fc 01       	movw	r30, r24
    1c90:	60 81       	ld	r22, Z
    1c92:	71 81       	ldd	r23, Z+1	; 0x01
    1c94:	82 81       	ldd	r24, Z+2	; 0x02
    1c96:	93 81       	ldd	r25, Z+3	; 0x03
    1c98:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__gesf2>
    1c9c:	18 16       	cp	r1, r24
    1c9e:	0c f0       	brlt	.+2      	; 0x1ca2 <decodeCommand+0xe0a>
    1ca0:	46 c0       	rjmp	.+140    	; 0x1d2e <decodeCommand+0xe96>
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca8:	51 e4       	ldi	r21, 0x41	; 65
    1caa:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1cac:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1cae:	88 a1       	ldd	r24, Y+32	; 0x20
    1cb0:	99 a1       	ldd	r25, Y+33	; 0x21
    1cb2:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	8e 01       	movw	r16, r28
    1cbc:	02 58       	subi	r16, 0x82	; 130
    1cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc0:	bc 01       	movw	r22, r24
    1cc2:	cd 01       	movw	r24, r26
    1cc4:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__fixunssfsi>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	f8 01       	movw	r30, r16
    1cce:	91 83       	std	Z+1, r25	; 0x01
    1cd0:	80 83       	st	Z, r24
    1cd2:	24 c0       	rjmp	.+72     	; 0x1d1c <decodeCommand+0xe84>
    1cd4:	ce 01       	movw	r24, r28
    1cd6:	80 58       	subi	r24, 0x80	; 128
    1cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cda:	28 ec       	ldi	r18, 0xC8	; 200
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	fc 01       	movw	r30, r24
    1ce0:	31 83       	std	Z+1, r19	; 0x01
    1ce2:	20 83       	st	Z, r18
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	80 58       	subi	r24, 0x80	; 128
    1ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cea:	fc 01       	movw	r30, r24
    1cec:	80 81       	ld	r24, Z
    1cee:	91 81       	ldd	r25, Z+1	; 0x01
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <decodeCommand+0xe58>
    1cf4:	9e 01       	movw	r18, r28
    1cf6:	20 58       	subi	r18, 0x80	; 128
    1cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfa:	f9 01       	movw	r30, r18
    1cfc:	91 83       	std	Z+1, r25	; 0x01
    1cfe:	80 83       	st	Z, r24
    1d00:	ce 01       	movw	r24, r28
    1d02:	82 58       	subi	r24, 0x82	; 130
    1d04:	9f 4f       	sbci	r25, 0xFF	; 255
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d06:	9e 01       	movw	r18, r28
    1d08:	22 58       	subi	r18, 0x82	; 130
    1d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0c:	f9 01       	movw	r30, r18
    1d0e:	20 81       	ld	r18, Z
    1d10:	31 81       	ldd	r19, Z+1	; 0x01
    1d12:	21 50       	subi	r18, 0x01	; 1
    1d14:	31 09       	sbc	r19, r1
    1d16:	fc 01       	movw	r30, r24
    1d18:	31 83       	std	Z+1, r19	; 0x01
    1d1a:	20 83       	st	Z, r18
    1d1c:	ce 01       	movw	r24, r28
    1d1e:	82 58       	subi	r24, 0x82	; 130
    1d20:	9f 4f       	sbci	r25, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d22:	fc 01       	movw	r30, r24
    1d24:	80 81       	ld	r24, Z
    1d26:	91 81       	ldd	r25, Z+1	; 0x01
    1d28:	89 2b       	or	r24, r25
    1d2a:	a1 f6       	brne	.-88     	; 0x1cd4 <decodeCommand+0xe3c>
    1d2c:	2e c0       	rjmp	.+92     	; 0x1d8a <decodeCommand+0xef2>
    1d2e:	8e 01       	movw	r16, r28
    1d30:	02 58       	subi	r16, 0x82	; 130
				
				_delay_ms(DEBOUNCE_DELAY);
				
				break;
    1d32:	1f 4f       	sbci	r17, 0xFF	; 255
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d34:	ce 01       	movw	r24, r28
    1d36:	86 58       	subi	r24, 0x86	; 134
    1d38:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	60 81       	ld	r22, Z
    1d3e:	71 81       	ldd	r23, Z+1	; 0x01
    1d40:	82 81       	ldd	r24, Z+2	; 0x02
    1d42:	93 81       	ldd	r25, Z+3	; 0x03
    1d44:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	f8 01       	movw	r30, r16
    1d4e:	91 83       	std	Z+1, r25	; 0x01
    1d50:	80 83       	st	Z, r24
    1d52:	ce 01       	movw	r24, r28
    1d54:	8e 57       	subi	r24, 0x7E	; 126
    1d56:	9f 4f       	sbci	r25, 0xFF	; 255
    1d58:	9e 01       	movw	r18, r28
    1d5a:	22 58       	subi	r18, 0x82	; 130
    1d5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5e:	f9 01       	movw	r30, r18
    1d60:	20 81       	ld	r18, Z
    1d62:	31 81       	ldd	r19, Z+1	; 0x01
    1d64:	fc 01       	movw	r30, r24
    1d66:	31 83       	std	Z+1, r19	; 0x01
    1d68:	20 83       	st	Z, r18
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	8e 57       	subi	r24, 0x7E	; 126
    1d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d70:	fc 01       	movw	r30, r24
    1d72:	80 81       	ld	r24, Z
    1d74:	91 81       	ldd	r25, Z+1	; 0x01
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <decodeCommand+0xede>
    1d7a:	9e 01       	movw	r18, r28
    1d7c:	2e 57       	subi	r18, 0x7E	; 126
    1d7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d80:	f9 01       	movw	r30, r18
    1d82:	91 83       	std	Z+1, r25	; 0x01
    1d84:	80 83       	st	Z, r24
    1d86:	01 c0       	rjmp	.+2      	; 0x1d8a <decodeCommand+0xef2>
    1d88:	00 00       	nop
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	82 57       	subi	r24, 0x72	; 114
				break;
			}
			
			default: {
				
				break;
    1d8e:	9f 4f       	sbci	r25, 0xFF	; 255
			}
		}

		remaining = Fifo_Get(&command);
    1d90:	0e 94 d5 00 	call	0x1aa	; 0x1aa <Fifo_Get>
    1d94:	89 83       	std	Y+1, r24	; 0x01
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	88 23       	and	r24, r24
    1d9a:	09 f0       	breq	.+2      	; 0x1d9e <decodeCommand+0xf06>

static void decodeCommand(void) {
	uint8_t command = 0;
	bool remaining = Fifo_Get(&command);
	
	while (remaining) {
    1d9c:	95 c8       	rjmp	.-3798   	; 0xec8 <decodeCommand+0x30>
    1d9e:	00 00       	nop
    1da0:	c2 57       	subi	r28, 0x72	; 114
    1da2:	df 4f       	sbci	r29, 0xFF	; 255
			}
		}

		remaining = Fifo_Get(&command);
	}
}
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	1f 91       	pop	r17
    1db4:	0f 91       	pop	r16
    1db6:	08 95       	ret

00001db8 <remoteAlternateCommands>:
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
    1dbc:	cf 93       	push	r28

//-----------------------------------------------------------------------------

static void remoteAlternateCommands(const struct ir_struct ir) {
    1dbe:	df 93       	push	r29
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	cc 54       	subi	r28, 0x4C	; 76
    1dc6:	d1 09       	sbc	r29, r1
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	9e 01       	movw	r18, r28
    1dd4:	28 5b       	subi	r18, 0xB8	; 184
    1dd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd8:	f9 01       	movw	r30, r18
    1dda:	40 83       	st	Z, r20
    1ddc:	f9 01       	movw	r30, r18
    1dde:	51 83       	std	Z+1, r21	; 0x01
    1de0:	f9 01       	movw	r30, r18
    1de2:	62 83       	std	Z+2, r22	; 0x02
    1de4:	f9 01       	movw	r30, r18
    1de6:	73 83       	std	Z+3, r23	; 0x03
    1de8:	f9 01       	movw	r30, r18
    1dea:	84 83       	std	Z+4, r24	; 0x04
    1dec:	ce 01       	movw	r24, r28
    1dee:	88 5b       	subi	r24, 0xB8	; 184
    1df0:	9f 4f       	sbci	r25, 0xFF	; 255
	// Pairing mode!
	switch (ir.command) {
    1df2:	fc 01       	movw	r30, r24
    1df4:	83 81       	ldd	r24, Z+3	; 0x03
    1df6:	88 2f       	mov	r24, r24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	83 30       	cpi	r24, 0x03	; 3
    1dfc:	91 05       	cpc	r25, r1
    1dfe:	09 f4       	brne	.+2      	; 0x1e02 <remoteAlternateCommands+0x4a>
    1e00:	50 c2       	rjmp	.+1184   	; 0x22a2 <remoteAlternateCommands+0x4ea>
    1e02:	84 30       	cpi	r24, 0x04	; 4
    1e04:	91 05       	cpc	r25, r1
    1e06:	3c f4       	brge	.+14     	; 0x1e16 <remoteAlternateCommands+0x5e>
    1e08:	81 30       	cpi	r24, 0x01	; 1
    1e0a:	91 05       	cpc	r25, r1
    1e0c:	61 f0       	breq	.+24     	; 0x1e26 <remoteAlternateCommands+0x6e>
    1e0e:	02 97       	sbiw	r24, 0x02	; 2
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <remoteAlternateCommands+0x5c>
    1e12:	28 c3       	rjmp	.+1616   	; 0x2464 <remoteAlternateCommands+0x6ac>
    1e14:	2c c3       	rjmp	.+1624   	; 0x246e <remoteAlternateCommands+0x6b6>
    1e16:	85 30       	cpi	r24, 0x05	; 5
    1e18:	91 05       	cpc	r25, r1
		
		//case REMOTE_BATTERY_W:
		//case REMOTE_BATTERY_S:
		
		default:
			break;
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <remoteAlternateCommands+0x66>

//-----------------------------------------------------------------------------

static void remoteAlternateCommands(const struct ir_struct ir) {
	// Pairing mode!
	switch (ir.command) {
    1e1c:	0e c1       	rjmp	.+540    	; 0x203a <remoteAlternateCommands+0x282>
    1e1e:	06 97       	sbiw	r24, 0x06	; 6
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <remoteAlternateCommands+0x6c>
    1e22:	a5 c1       	rjmp	.+842    	; 0x216e <remoteAlternateCommands+0x3b6>
    1e24:	24 c3       	rjmp	.+1608   	; 0x246e <remoteAlternateCommands+0x6b6>
    1e26:	ce 01       	movw	r24, r28
    1e28:	88 5b       	subi	r24, 0xB8	; 184
		
		//case REMOTE_BATTERY_W:
		//case REMOTE_BATTERY_S:
		
		default:
			break;
    1e2a:	9f 4f       	sbci	r25, 0xFF	; 255

static void remoteAlternateCommands(const struct ir_struct ir) {
	// Pairing mode!
	switch (ir.command) {
		case REMOTE_PAIR: {
			if (EEPROM_Write(PAIR_ADDR, ir.id)) {
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	82 81       	ldd	r24, Z+2	; 0x02
    1e30:	68 2f       	mov	r22, r24
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	0e 94 75 04 	call	0x8ea	; 0x8ea <EEPROM_Write>
    1e3a:	88 23       	and	r24, r24
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <remoteAlternateCommands+0x88>
    1e3e:	14 c3       	rjmp	.+1576   	; 0x2468 <remoteAlternateCommands+0x6b0>
    1e40:	19 82       	std	Y+1, r1	; 0x01
    1e42:	19 82       	std	Y+1, r1	; 0x01
    1e44:	f5 c0       	rjmp	.+490    	; 0x2030 <remoteAlternateCommands+0x278>
				uint8_t i = 0;
    1e46:	8b e2       	ldi	r24, 0x2B	; 43
				for (i = 0; i < 2; ++i) {
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	2b e2       	ldi	r18, 0x2B	; 43
					CLEARBIT(REMOTE_PORT,REMOTE_LED);			// LED on
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	f9 01       	movw	r30, r18
    1e50:	20 81       	ld	r18, Z
    1e52:	2d 7f       	andi	r18, 0xFD	; 253
    1e54:	fc 01       	movw	r30, r24
    1e56:	20 83       	st	Z, r18
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	aa ef       	ldi	r26, 0xFA	; 250
    1e5e:	b3 e4       	ldi	r27, 0x43	; 67
    1e60:	8e 83       	std	Y+6, r24	; 0x06
    1e62:	9f 83       	std	Y+7, r25	; 0x07
    1e64:	a8 87       	std	Y+8, r26	; 0x08
    1e66:	b9 87       	std	Y+9, r27	; 0x09
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	4a ef       	ldi	r20, 0xFA	; 250

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e6e:	54 e4       	ldi	r21, 0x44	; 68
    1e70:	6e 81       	ldd	r22, Y+6	; 0x06
    1e72:	7f 81       	ldd	r23, Y+7	; 0x07
    1e74:	88 85       	ldd	r24, Y+8	; 0x08
    1e76:	99 85       	ldd	r25, Y+9	; 0x09
    1e78:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	88 a3       	std	Y+32, r24	; 0x20
    1e82:	99 a3       	std	Y+33, r25	; 0x21
    1e84:	aa a3       	std	Y+34, r26	; 0x22
    1e86:	bb a3       	std	Y+35, r27	; 0x23
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e8       	ldi	r20, 0x80	; 128
	if (__tmp < 1.0)
    1e8e:	5f e3       	ldi	r21, 0x3F	; 63
    1e90:	68 a1       	ldd	r22, Y+32	; 0x20
    1e92:	79 a1       	ldd	r23, Y+33	; 0x21
    1e94:	8a a1       	ldd	r24, Y+34	; 0x22
    1e96:	9b a1       	ldd	r25, Y+35	; 0x23
    1e98:	0e 94 77 17 	call	0x2eee	; 0x2eee <__cmpsf2>
    1e9c:	88 23       	and	r24, r24
    1e9e:	2c f4       	brge	.+10     	; 0x1eaa <remoteAlternateCommands+0xf2>
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	9d a3       	std	Y+37, r25	; 0x25
		__ticks = 1;
    1ea6:	8c a3       	std	Y+36, r24	; 0x24
    1ea8:	3e c0       	rjmp	.+124    	; 0x1f26 <remoteAlternateCommands+0x16e>
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	3f ef       	ldi	r19, 0xFF	; 255
    1eae:	4f e7       	ldi	r20, 0x7F	; 127
	else if (__tmp > 65535)
    1eb0:	57 e4       	ldi	r21, 0x47	; 71
    1eb2:	68 a1       	ldd	r22, Y+32	; 0x20
    1eb4:	79 a1       	ldd	r23, Y+33	; 0x21
    1eb6:	8a a1       	ldd	r24, Y+34	; 0x22
    1eb8:	9b a1       	ldd	r25, Y+35	; 0x23
    1eba:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__gesf2>
    1ebe:	18 16       	cp	r1, r24
    1ec0:	4c f5       	brge	.+82     	; 0x1f14 <remoteAlternateCommands+0x15c>
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec8:	51 e4       	ldi	r21, 0x41	; 65
    1eca:	6e 81       	ldd	r22, Y+6	; 0x06
    1ecc:	7f 81       	ldd	r23, Y+7	; 0x07
    1ece:	88 85       	ldd	r24, Y+8	; 0x08
    1ed0:	99 85       	ldd	r25, Y+9	; 0x09
    1ed2:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	bc 01       	movw	r22, r24
    1edc:	cd 01       	movw	r24, r26
    1ede:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__fixunssfsi>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	9d a3       	std	Y+37, r25	; 0x25
    1ee8:	8c a3       	std	Y+36, r24	; 0x24
    1eea:	0f c0       	rjmp	.+30     	; 0x1f0a <remoteAlternateCommands+0x152>
    1eec:	88 ec       	ldi	r24, 0xC8	; 200
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	9f a3       	std	Y+39, r25	; 0x27
    1ef2:	8e a3       	std	Y+38, r24	; 0x26
    1ef4:	8e a1       	ldd	r24, Y+38	; 0x26
    1ef6:	9f a1       	ldd	r25, Y+39	; 0x27
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <remoteAlternateCommands+0x140>
    1efc:	9f a3       	std	Y+39, r25	; 0x27
    1efe:	8e a3       	std	Y+38, r24	; 0x26
    1f00:	8c a1       	ldd	r24, Y+36	; 0x24
    1f02:	9d a1       	ldd	r25, Y+37	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	9d a3       	std	Y+37, r25	; 0x25
    1f08:	8c a3       	std	Y+36, r24	; 0x24
    1f0a:	8c a1       	ldd	r24, Y+36	; 0x24
    1f0c:	9d a1       	ldd	r25, Y+37	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0e:	89 2b       	or	r24, r25
    1f10:	69 f7       	brne	.-38     	; 0x1eec <remoteAlternateCommands+0x134>
    1f12:	13 c0       	rjmp	.+38     	; 0x1f3a <remoteAlternateCommands+0x182>
    1f14:	68 a1       	ldd	r22, Y+32	; 0x20
    1f16:	79 a1       	ldd	r23, Y+33	; 0x21
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f18:	8a a1       	ldd	r24, Y+34	; 0x22
    1f1a:	9b a1       	ldd	r25, Y+35	; 0x23
    1f1c:	ec d7       	rcall	.+4056   	; 0x2ef6 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	9d a3       	std	Y+37, r25	; 0x25
    1f24:	8c a3       	std	Y+36, r24	; 0x24
    1f26:	8c a1       	ldd	r24, Y+36	; 0x24
    1f28:	9d a1       	ldd	r25, Y+37	; 0x25
    1f2a:	99 a7       	std	Y+41, r25	; 0x29
    1f2c:	88 a7       	std	Y+40, r24	; 0x28
    1f2e:	88 a5       	ldd	r24, Y+40	; 0x28
    1f30:	99 a5       	ldd	r25, Y+41	; 0x29
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <remoteAlternateCommands+0x17a>
    1f36:	99 a7       	std	Y+41, r25	; 0x29
    1f38:	88 a7       	std	Y+40, r24	; 0x28
    1f3a:	8b e2       	ldi	r24, 0x2B	; 43
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	2b e2       	ldi	r18, 0x2B	; 43
					_delay_ms(PAIRING_LED_DELAY);
					SETBIT(REMOTE_PORT,REMOTE_LED);				// LED off
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	f9 01       	movw	r30, r18
    1f44:	20 81       	ld	r18, Z
    1f46:	22 60       	ori	r18, 0x02	; 2
    1f48:	fc 01       	movw	r30, r24
    1f4a:	20 83       	st	Z, r18
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	aa ef       	ldi	r26, 0xFA	; 250
    1f52:	b3 e4       	ldi	r27, 0x43	; 67
    1f54:	8a 8b       	std	Y+18, r24	; 0x12
    1f56:	9b 8b       	std	Y+19, r25	; 0x13
    1f58:	ac 8b       	std	Y+20, r26	; 0x14
    1f5a:	bd 8b       	std	Y+21, r27	; 0x15
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	4a ef       	ldi	r20, 0xFA	; 250

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1f62:	54 e4       	ldi	r21, 0x44	; 68
    1f64:	6a 89       	ldd	r22, Y+18	; 0x12
    1f66:	7b 89       	ldd	r23, Y+19	; 0x13
    1f68:	8c 89       	ldd	r24, Y+20	; 0x14
    1f6a:	9d 89       	ldd	r25, Y+21	; 0x15
    1f6c:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	8e 8b       	std	Y+22, r24	; 0x16
    1f76:	9f 8b       	std	Y+23, r25	; 0x17
    1f78:	a8 8f       	std	Y+24, r26	; 0x18
    1f7a:	b9 8f       	std	Y+25, r27	; 0x19
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
    1f80:	40 e8       	ldi	r20, 0x80	; 128
    1f82:	5f e3       	ldi	r21, 0x3F	; 63
    1f84:	6e 89       	ldd	r22, Y+22	; 0x16
    1f86:	7f 89       	ldd	r23, Y+23	; 0x17
    1f88:	88 8d       	ldd	r24, Y+24	; 0x18
    1f8a:	99 8d       	ldd	r25, Y+25	; 0x19
    1f8c:	b0 d7       	rcall	.+3936   	; 0x2eee <__cmpsf2>
    1f8e:	88 23       	and	r24, r24
    1f90:	2c f4       	brge	.+10     	; 0x1f9c <remoteAlternateCommands+0x1e4>
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	9b 8f       	std	Y+27, r25	; 0x1b
		__ticks = 1;
    1f98:	8a 8f       	std	Y+26, r24	; 0x1a
    1f9a:	3d c0       	rjmp	.+122    	; 0x2016 <remoteAlternateCommands+0x25e>
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	3f ef       	ldi	r19, 0xFF	; 255
    1fa0:	4f e7       	ldi	r20, 0x7F	; 127
	else if (__tmp > 65535)
    1fa2:	57 e4       	ldi	r21, 0x47	; 71
    1fa4:	6e 89       	ldd	r22, Y+22	; 0x16
    1fa6:	7f 89       	ldd	r23, Y+23	; 0x17
    1fa8:	88 8d       	ldd	r24, Y+24	; 0x18
    1faa:	99 8d       	ldd	r25, Y+25	; 0x19
    1fac:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__gesf2>
    1fb0:	18 16       	cp	r1, r24
    1fb2:	44 f5       	brge	.+80     	; 0x2004 <remoteAlternateCommands+0x24c>
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb8:	40 e2       	ldi	r20, 0x20	; 32
    1fba:	51 e4       	ldi	r21, 0x41	; 65
    1fbc:	6a 89       	ldd	r22, Y+18	; 0x12
    1fbe:	7b 89       	ldd	r23, Y+19	; 0x13
    1fc0:	8c 89       	ldd	r24, Y+20	; 0x14
    1fc2:	9d 89       	ldd	r25, Y+21	; 0x15
    1fc4:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	bc 01       	movw	r22, r24
    1fce:	cd 01       	movw	r24, r26
    1fd0:	92 d7       	rcall	.+3876   	; 0x2ef6 <__fixunssfsi>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	9b 8f       	std	Y+27, r25	; 0x1b
    1fd8:	8a 8f       	std	Y+26, r24	; 0x1a
    1fda:	0f c0       	rjmp	.+30     	; 0x1ffa <remoteAlternateCommands+0x242>
    1fdc:	88 ec       	ldi	r24, 0xC8	; 200
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	9d 8f       	std	Y+29, r25	; 0x1d
    1fe2:	8c 8f       	std	Y+28, r24	; 0x1c
    1fe4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fe6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	f1 f7       	brne	.-4      	; 0x1fe8 <remoteAlternateCommands+0x230>
    1fec:	9d 8f       	std	Y+29, r25	; 0x1d
    1fee:	8c 8f       	std	Y+28, r24	; 0x1c
    1ff0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ff2:	9b 8d       	ldd	r25, Y+27	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	9b 8f       	std	Y+27, r25	; 0x1b
    1ff8:	8a 8f       	std	Y+26, r24	; 0x1a
    1ffa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ffc:	9b 8d       	ldd	r25, Y+27	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffe:	89 2b       	or	r24, r25
    2000:	69 f7       	brne	.-38     	; 0x1fdc <remoteAlternateCommands+0x224>
    2002:	13 c0       	rjmp	.+38     	; 0x202a <remoteAlternateCommands+0x272>
    2004:	6e 89       	ldd	r22, Y+22	; 0x16
    2006:	7f 89       	ldd	r23, Y+23	; 0x17
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2008:	88 8d       	ldd	r24, Y+24	; 0x18
    200a:	99 8d       	ldd	r25, Y+25	; 0x19
    200c:	74 d7       	rcall	.+3816   	; 0x2ef6 <__fixunssfsi>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	9b 8f       	std	Y+27, r25	; 0x1b
    2014:	8a 8f       	std	Y+26, r24	; 0x1a
    2016:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2018:	9b 8d       	ldd	r25, Y+27	; 0x1b
    201a:	9f 8f       	std	Y+31, r25	; 0x1f
    201c:	8e 8f       	std	Y+30, r24	; 0x1e
    201e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2020:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2022:	01 97       	sbiw	r24, 0x01	; 1
    2024:	f1 f7       	brne	.-4      	; 0x2022 <remoteAlternateCommands+0x26a>
    2026:	9f 8f       	std	Y+31, r25	; 0x1f
    2028:	8e 8f       	std	Y+30, r24	; 0x1e
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	8f 5f       	subi	r24, 0xFF	; 255
    202e:	89 83       	std	Y+1, r24	; 0x01
	// Pairing mode!
	switch (ir.command) {
		case REMOTE_PAIR: {
			if (EEPROM_Write(PAIR_ADDR, ir.id)) {
				uint8_t i = 0;
				for (i = 0; i < 2; ++i) {
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	82 30       	cpi	r24, 0x02	; 2
    2034:	08 f4       	brcc	.+2      	; 0x2038 <remoteAlternateCommands+0x280>
    2036:	07 cf       	rjmp	.-498    	; 0x1e46 <remoteAlternateCommands+0x8e>
    2038:	17 c2       	rjmp	.+1070   	; 0x2468 <remoteAlternateCommands+0x6b0>
    203a:	88 e2       	ldi	r24, 0x28	; 40
    203c:	90 e0       	ldi	r25, 0x00	; 0
					_delay_ms(PAIRING_LED_DELAY);
					SETBIT(REMOTE_PORT,REMOTE_LED);				// LED off
					_delay_ms(PAIRING_LED_DELAY);
				}
			}
			break;
    203e:	28 e2       	ldi	r18, 0x28	; 40
			//}
			break;
		}

		case REMOTE_UP: {
			CLEARBIT(OUTPUT_RELAYS_PORT,OUTPUT_RELAYS_MUTE);			// Mute off
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	f9 01       	movw	r30, r18
    2044:	20 81       	ld	r18, Z
    2046:	2e 7f       	andi	r18, 0xFE	; 254
    2048:	fc 01       	movw	r30, r24
    204a:	20 83       	st	Z, r18
    204c:	88 e2       	ldi	r24, 0x28	; 40
    204e:	90 e0       	ldi	r25, 0x00	; 0
			CLEARBIT(OUTPUT_LED_PORT,OUTPUT_LED_MUTE);
    2050:	28 e2       	ldi	r18, 0x28	; 40
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	f9 01       	movw	r30, r18
    2056:	20 81       	ld	r18, Z
    2058:	2f 7e       	andi	r18, 0xEF	; 239
    205a:	fc 01       	movw	r30, r24
    205c:	20 83       	st	Z, r18
    205e:	8b e2       	ldi	r24, 0x2B	; 43
    2060:	90 e0       	ldi	r25, 0x00	; 0
			
			CLEARBIT(REMOTE_PORT,REMOTE_LED);
    2062:	2b e2       	ldi	r18, 0x2B	; 43
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	f9 01       	movw	r30, r18
    2068:	20 81       	ld	r18, Z
    206a:	2d 7f       	andi	r18, 0xFD	; 253
    206c:	fc 01       	movw	r30, r24
    206e:	20 83       	st	Z, r18
    2070:	94 d4       	rcall	.+2344   	; 0x299a <Stepper_CW>

			//if (!VolLimits_Up() && ((OUTPUT_LED_PIN & 0xe0) != OUTPUT_LED_HIGH)) {
				Stepper_CW();
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	a8 ec       	ldi	r26, 0xC8	; 200
    2078:	b2 e4       	ldi	r27, 0x42	; 66
    207a:	8a 83       	std	Y+2, r24	; 0x02
    207c:	9b 83       	std	Y+3, r25	; 0x03
    207e:	ac 83       	std	Y+4, r26	; 0x04
    2080:	bd 83       	std	Y+5, r27	; 0x05
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2086:	4a ef       	ldi	r20, 0xFA	; 250
    2088:	54 e4       	ldi	r21, 0x44	; 68
    208a:	6a 81       	ldd	r22, Y+2	; 0x02
    208c:	7b 81       	ldd	r23, Y+3	; 0x03
    208e:	8c 81       	ldd	r24, Y+4	; 0x04
    2090:	9d 81       	ldd	r25, Y+5	; 0x05
    2092:	ae d7       	rcall	.+3932   	; 0x2ff0 <__mulsf3>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	8a a7       	std	Y+42, r24	; 0x2a
    209a:	9b a7       	std	Y+43, r25	; 0x2b
    209c:	ac a7       	std	Y+44, r26	; 0x2c
    209e:	bd a7       	std	Y+45, r27	; 0x2d
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
    20a4:	40 e8       	ldi	r20, 0x80	; 128
    20a6:	5f e3       	ldi	r21, 0x3F	; 63
    20a8:	6a a5       	ldd	r22, Y+42	; 0x2a
    20aa:	7b a5       	ldd	r23, Y+43	; 0x2b
    20ac:	8c a5       	ldd	r24, Y+44	; 0x2c
    20ae:	9d a5       	ldd	r25, Y+45	; 0x2d
    20b0:	1e d7       	rcall	.+3644   	; 0x2eee <__cmpsf2>
    20b2:	88 23       	and	r24, r24
    20b4:	2c f4       	brge	.+10     	; 0x20c0 <remoteAlternateCommands+0x308>
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
    20ba:	9f a7       	std	Y+47, r25	; 0x2f
    20bc:	8e a7       	std	Y+46, r24	; 0x2e
    20be:	3b c0       	rjmp	.+118    	; 0x2136 <remoteAlternateCommands+0x37e>
    20c0:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    20c2:	3f ef       	ldi	r19, 0xFF	; 255
    20c4:	4f e7       	ldi	r20, 0x7F	; 127
    20c6:	57 e4       	ldi	r21, 0x47	; 71
    20c8:	6a a5       	ldd	r22, Y+42	; 0x2a
    20ca:	7b a5       	ldd	r23, Y+43	; 0x2b
    20cc:	8c a5       	ldd	r24, Y+44	; 0x2c
    20ce:	9d a5       	ldd	r25, Y+45	; 0x2d
    20d0:	8b d7       	rcall	.+3862   	; 0x2fe8 <__gesf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	3c f5       	brge	.+78     	; 0x2124 <remoteAlternateCommands+0x36c>
    20d6:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	40 e2       	ldi	r20, 0x20	; 32
    20dc:	51 e4       	ldi	r21, 0x41	; 65
    20de:	6a 81       	ldd	r22, Y+2	; 0x02
    20e0:	7b 81       	ldd	r23, Y+3	; 0x03
    20e2:	8c 81       	ldd	r24, Y+4	; 0x04
    20e4:	9d 81       	ldd	r25, Y+5	; 0x05
    20e6:	84 d7       	rcall	.+3848   	; 0x2ff0 <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	bc 01       	movw	r22, r24
    20ee:	cd 01       	movw	r24, r26
    20f0:	02 d7       	rcall	.+3588   	; 0x2ef6 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	9f a7       	std	Y+47, r25	; 0x2f
    20f8:	8e a7       	std	Y+46, r24	; 0x2e
    20fa:	0f c0       	rjmp	.+30     	; 0x211a <remoteAlternateCommands+0x362>
    20fc:	88 ec       	ldi	r24, 0xC8	; 200
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	99 ab       	std	Y+49, r25	; 0x31
    2102:	88 ab       	std	Y+48, r24	; 0x30
    2104:	88 a9       	ldd	r24, Y+48	; 0x30
    2106:	99 a9       	ldd	r25, Y+49	; 0x31
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <remoteAlternateCommands+0x350>
    210c:	99 ab       	std	Y+49, r25	; 0x31
    210e:	88 ab       	std	Y+48, r24	; 0x30
    2110:	8e a5       	ldd	r24, Y+46	; 0x2e
    2112:	9f a5       	ldd	r25, Y+47	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	9f a7       	std	Y+47, r25	; 0x2f
    2118:	8e a7       	std	Y+46, r24	; 0x2e
    211a:	8e a5       	ldd	r24, Y+46	; 0x2e
    211c:	9f a5       	ldd	r25, Y+47	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211e:	89 2b       	or	r24, r25
    2120:	69 f7       	brne	.-38     	; 0x20fc <remoteAlternateCommands+0x344>
    2122:	13 c0       	rjmp	.+38     	; 0x214a <remoteAlternateCommands+0x392>
    2124:	6a a5       	ldd	r22, Y+42	; 0x2a
    2126:	7b a5       	ldd	r23, Y+43	; 0x2b
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2128:	8c a5       	ldd	r24, Y+44	; 0x2c
    212a:	9d a5       	ldd	r25, Y+45	; 0x2d
    212c:	e4 d6       	rcall	.+3528   	; 0x2ef6 <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	9f a7       	std	Y+47, r25	; 0x2f
    2134:	8e a7       	std	Y+46, r24	; 0x2e
    2136:	8e a5       	ldd	r24, Y+46	; 0x2e
    2138:	9f a5       	ldd	r25, Y+47	; 0x2f
    213a:	9b ab       	std	Y+51, r25	; 0x33
    213c:	8a ab       	std	Y+50, r24	; 0x32
    213e:	8a a9       	ldd	r24, Y+50	; 0x32
    2140:	9b a9       	ldd	r25, Y+51	; 0x33
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <remoteAlternateCommands+0x38a>
    2146:	9b ab       	std	Y+51, r25	; 0x33
    2148:	8a ab       	std	Y+50, r24	; 0x32
    214a:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <count>
    214e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <count+0x1>
				_delay_ms(MOTOR_DELAY);
			//}
			
			count = 0;			// Reset sleep mode
    2152:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <count+0x2>
    2156:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <count+0x3>
    215a:	8b e2       	ldi	r24, 0x2B	; 43
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	2b e2       	ldi	r18, 0x2B	; 43
			
			SETBIT(REMOTE_PORT,REMOTE_LED);
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	f9 01       	movw	r30, r18
    2164:	20 81       	ld	r18, Z
    2166:	22 60       	ori	r18, 0x02	; 2
    2168:	fc 01       	movw	r30, r24
    216a:	20 83       	st	Z, r18
    216c:	80 c1       	rjmp	.+768    	; 0x246e <remoteAlternateCommands+0x6b6>
    216e:	88 e2       	ldi	r24, 0x28	; 40
    2170:	90 e0       	ldi	r25, 0x00	; 0
			
			break;
    2172:	28 e2       	ldi	r18, 0x28	; 40
		}
		
		case REMOTE_DOWN: {
			CLEARBIT(OUTPUT_RELAYS_PORT,OUTPUT_RELAYS_MUTE);			// Mute off
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	f9 01       	movw	r30, r18
    2178:	20 81       	ld	r18, Z
    217a:	2e 7f       	andi	r18, 0xFE	; 254
    217c:	fc 01       	movw	r30, r24
    217e:	20 83       	st	Z, r18
    2180:	88 e2       	ldi	r24, 0x28	; 40
    2182:	90 e0       	ldi	r25, 0x00	; 0
			CLEARBIT(OUTPUT_LED_PORT,OUTPUT_LED_MUTE);
    2184:	28 e2       	ldi	r18, 0x28	; 40
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	f9 01       	movw	r30, r18
    218a:	20 81       	ld	r18, Z
    218c:	2f 7e       	andi	r18, 0xEF	; 239
    218e:	fc 01       	movw	r30, r24
    2190:	20 83       	st	Z, r18
    2192:	8b e2       	ldi	r24, 0x2B	; 43
    2194:	90 e0       	ldi	r25, 0x00	; 0
			
			CLEARBIT(REMOTE_PORT,REMOTE_LED);
    2196:	2b e2       	ldi	r18, 0x2B	; 43
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	f9 01       	movw	r30, r18
    219c:	20 81       	ld	r18, Z
    219e:	2d 7f       	andi	r18, 0xFD	; 253
    21a0:	fc 01       	movw	r30, r24
    21a2:	20 83       	st	Z, r18
    21a4:	4f d5       	rcall	.+2718   	; 0x2c44 <Stepper_CCW>

			//if (!VolLimits_Down() && ((OUTPUT_LED_PIN & 0xe0) != OUTPUT_LED_LOW)) {
				Stepper_CCW();
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	a8 ec       	ldi	r26, 0xC8	; 200
    21ac:	b2 e4       	ldi	r27, 0x42	; 66
    21ae:	8a 87       	std	Y+10, r24	; 0x0a
    21b0:	9b 87       	std	Y+11, r25	; 0x0b
    21b2:	ac 87       	std	Y+12, r26	; 0x0c
    21b4:	bd 87       	std	Y+13, r27	; 0x0d
    21b6:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	4a ef       	ldi	r20, 0xFA	; 250
    21bc:	54 e4       	ldi	r21, 0x44	; 68
    21be:	6a 85       	ldd	r22, Y+10	; 0x0a
    21c0:	7b 85       	ldd	r23, Y+11	; 0x0b
    21c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    21c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    21c6:	14 d7       	rcall	.+3624   	; 0x2ff0 <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	8c ab       	std	Y+52, r24	; 0x34
    21ce:	9d ab       	std	Y+53, r25	; 0x35
    21d0:	ae ab       	std	Y+54, r26	; 0x36
    21d2:	bf ab       	std	Y+55, r27	; 0x37
    21d4:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e8       	ldi	r20, 0x80	; 128
    21da:	5f e3       	ldi	r21, 0x3F	; 63
    21dc:	6c a9       	ldd	r22, Y+52	; 0x34
    21de:	7d a9       	ldd	r23, Y+53	; 0x35
    21e0:	8e a9       	ldd	r24, Y+54	; 0x36
    21e2:	9f a9       	ldd	r25, Y+55	; 0x37
    21e4:	84 d6       	rcall	.+3336   	; 0x2eee <__cmpsf2>
    21e6:	88 23       	and	r24, r24
    21e8:	2c f4       	brge	.+10     	; 0x21f4 <remoteAlternateCommands+0x43c>
    21ea:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	99 af       	std	Y+57, r25	; 0x39
    21f0:	88 af       	std	Y+56, r24	; 0x38
    21f2:	3b c0       	rjmp	.+118    	; 0x226a <remoteAlternateCommands+0x4b2>
	else if (__tmp > 65535)
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	3f ef       	ldi	r19, 0xFF	; 255
    21f8:	4f e7       	ldi	r20, 0x7F	; 127
    21fa:	57 e4       	ldi	r21, 0x47	; 71
    21fc:	6c a9       	ldd	r22, Y+52	; 0x34
    21fe:	7d a9       	ldd	r23, Y+53	; 0x35
    2200:	8e a9       	ldd	r24, Y+54	; 0x36
    2202:	9f a9       	ldd	r25, Y+55	; 0x37
    2204:	f1 d6       	rcall	.+3554   	; 0x2fe8 <__gesf2>
    2206:	18 16       	cp	r1, r24
    2208:	3c f5       	brge	.+78     	; 0x2258 <remoteAlternateCommands+0x4a0>
    220a:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	40 e2       	ldi	r20, 0x20	; 32
    2210:	51 e4       	ldi	r21, 0x41	; 65
    2212:	6a 85       	ldd	r22, Y+10	; 0x0a
    2214:	7b 85       	ldd	r23, Y+11	; 0x0b
    2216:	8c 85       	ldd	r24, Y+12	; 0x0c
    2218:	9d 85       	ldd	r25, Y+13	; 0x0d
    221a:	ea d6       	rcall	.+3540   	; 0x2ff0 <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	bc 01       	movw	r22, r24
    2222:	cd 01       	movw	r24, r26
    2224:	68 d6       	rcall	.+3280   	; 0x2ef6 <__fixunssfsi>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	99 af       	std	Y+57, r25	; 0x39
    222c:	88 af       	std	Y+56, r24	; 0x38
    222e:	0f c0       	rjmp	.+30     	; 0x224e <remoteAlternateCommands+0x496>
    2230:	88 ec       	ldi	r24, 0xC8	; 200
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9b af       	std	Y+59, r25	; 0x3b
    2236:	8a af       	std	Y+58, r24	; 0x3a
    2238:	8a ad       	ldd	r24, Y+58	; 0x3a
    223a:	9b ad       	ldd	r25, Y+59	; 0x3b
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	f1 f7       	brne	.-4      	; 0x223c <remoteAlternateCommands+0x484>
    2240:	9b af       	std	Y+59, r25	; 0x3b
    2242:	8a af       	std	Y+58, r24	; 0x3a
    2244:	88 ad       	ldd	r24, Y+56	; 0x38
    2246:	99 ad       	ldd	r25, Y+57	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	99 af       	std	Y+57, r25	; 0x39
    224c:	88 af       	std	Y+56, r24	; 0x38
    224e:	88 ad       	ldd	r24, Y+56	; 0x38
    2250:	99 ad       	ldd	r25, Y+57	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2252:	89 2b       	or	r24, r25
    2254:	69 f7       	brne	.-38     	; 0x2230 <remoteAlternateCommands+0x478>
    2256:	13 c0       	rjmp	.+38     	; 0x227e <remoteAlternateCommands+0x4c6>
    2258:	6c a9       	ldd	r22, Y+52	; 0x34
    225a:	7d a9       	ldd	r23, Y+53	; 0x35
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225c:	8e a9       	ldd	r24, Y+54	; 0x36
    225e:	9f a9       	ldd	r25, Y+55	; 0x37
    2260:	4a d6       	rcall	.+3220   	; 0x2ef6 <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	99 af       	std	Y+57, r25	; 0x39
    2268:	88 af       	std	Y+56, r24	; 0x38
    226a:	88 ad       	ldd	r24, Y+56	; 0x38
    226c:	99 ad       	ldd	r25, Y+57	; 0x39
    226e:	9d af       	std	Y+61, r25	; 0x3d
    2270:	8c af       	std	Y+60, r24	; 0x3c
    2272:	8c ad       	ldd	r24, Y+60	; 0x3c
    2274:	9d ad       	ldd	r25, Y+61	; 0x3d
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	f1 f7       	brne	.-4      	; 0x2276 <remoteAlternateCommands+0x4be>
    227a:	9d af       	std	Y+61, r25	; 0x3d
    227c:	8c af       	std	Y+60, r24	; 0x3c
    227e:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <count>
    2282:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <count+0x1>
				_delay_ms(MOTOR_DELAY);
			//}
			
			count = 0;			// Reset sleep mode
    2286:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <count+0x2>
    228a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <count+0x3>
    228e:	8b e2       	ldi	r24, 0x2B	; 43
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	2b e2       	ldi	r18, 0x2B	; 43
			
			SETBIT(REMOTE_PORT,REMOTE_LED);
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	f9 01       	movw	r30, r18
    2298:	20 81       	ld	r18, Z
    229a:	22 60       	ori	r18, 0x02	; 2
    229c:	fc 01       	movw	r30, r24
    229e:	20 83       	st	Z, r18
    22a0:	e6 c0       	rjmp	.+460    	; 0x246e <remoteAlternateCommands+0x6b6>
			
			break;
    22a2:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <levelFlag>
		}
		
		case REMOTE_RIGHT: {
			if (!levelFlag) {											// Leave if already executed
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	89 27       	eor	r24, r25
    22aa:	88 23       	and	r24, r24
    22ac:	09 f0       	breq	.+2      	; 0x22b0 <remoteAlternateCommands+0x4f8>
    22ae:	de c0       	rjmp	.+444    	; 0x246c <remoteAlternateCommands+0x6b4>
    22b0:	86 e2       	ldi	r24, 0x26	; 38
				break;
			}
			
			switch(OUTPUT_LED_PIN & 0xe0) {
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	fc 01       	movw	r30, r24
    22b6:	80 81       	ld	r24, Z
    22b8:	88 2f       	mov	r24, r24
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	80 7e       	andi	r24, 0xE0	; 224
    22be:	99 27       	eor	r25, r25
    22c0:	80 34       	cpi	r24, 0x40	; 64
    22c2:	91 05       	cpc	r25, r1
    22c4:	31 f0       	breq	.+12     	; 0x22d2 <remoteAlternateCommands+0x51a>
    22c6:	80 38       	cpi	r24, 0x80	; 128
    22c8:	91 05       	cpc	r25, r1
    22ca:	29 f0       	breq	.+10     	; 0x22d6 <remoteAlternateCommands+0x51e>
    22cc:	80 97       	sbiw	r24, 0x20	; 32
    22ce:	29 f0       	breq	.+10     	; 0x22da <remoteAlternateCommands+0x522>
    22d0:	05 c0       	rjmp	.+10     	; 0x22dc <remoteAlternateCommands+0x524>

					break;
				}

				default: {
					break;
    22d2:	b9 d2       	rcall	.+1394   	; 0x2846 <setLevelHigh>

					break;
				}

				case OUTPUT_LED_MED: {									// Switch to high
					setLevelHigh();
    22d4:	03 c0       	rjmp	.+6      	; 0x22dc <remoteAlternateCommands+0x524>

					break;
    22d6:	df d2       	rcall	.+1470   	; 0x2896 <setLevelMedium>
				}

				case OUTPUT_LED_LOW: {									// Switch to medium
					setLevelMedium();
    22d8:	01 c0       	rjmp	.+2      	; 0x22dc <remoteAlternateCommands+0x524>
    22da:	00 00       	nop

					break;
    22dc:	8b e2       	ldi	r24, 0x2B	; 43
			}
			
			switch(OUTPUT_LED_PIN & 0xe0) {
				case OUTPUT_LED_HIGH: {

					break;
    22de:	90 e0       	ldi	r25, 0x00	; 0
				default: {
					break;
				}
			}

			CLEARBIT(REMOTE_PORT,REMOTE_LED);
    22e0:	2b e2       	ldi	r18, 0x2B	; 43
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	f9 01       	movw	r30, r18
    22e6:	20 81       	ld	r18, Z
    22e8:	2d 7f       	andi	r18, 0xFD	; 253
    22ea:	fc 01       	movw	r30, r24
    22ec:	20 83       	st	Z, r18
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	a6 e1       	ldi	r26, 0x16	; 22
    22f4:	b3 e4       	ldi	r27, 0x43	; 67
    22f6:	8e 87       	std	Y+14, r24	; 0x0e
    22f8:	9f 87       	std	Y+15, r25	; 0x0f
    22fa:	a8 8b       	std	Y+16, r26	; 0x10
    22fc:	b9 8b       	std	Y+17, r27	; 0x11
    22fe:	8e 01       	movw	r16, r28

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2300:	02 5c       	subi	r16, 0xC2	; 194
    2302:	1f 4f       	sbci	r17, 0xFF	; 255
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	4a ef       	ldi	r20, 0xFA	; 250
    230a:	54 e4       	ldi	r21, 0x44	; 68
    230c:	6e 85       	ldd	r22, Y+14	; 0x0e
    230e:	7f 85       	ldd	r23, Y+15	; 0x0f
    2310:	88 89       	ldd	r24, Y+16	; 0x10
    2312:	99 89       	ldd	r25, Y+17	; 0x11
    2314:	6d d6       	rcall	.+3290   	; 0x2ff0 <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	f8 01       	movw	r30, r16
    231c:	80 83       	st	Z, r24
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	a2 83       	std	Z+2, r26	; 0x02
    2322:	b3 83       	std	Z+3, r27	; 0x03
    2324:	ce 01       	movw	r24, r28
	if (__tmp < 1.0)
    2326:	ce 96       	adiw	r24, 0x3e	; 62
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e8       	ldi	r20, 0x80	; 128
    232e:	5f e3       	ldi	r21, 0x3F	; 63
    2330:	fc 01       	movw	r30, r24
    2332:	60 81       	ld	r22, Z
    2334:	71 81       	ldd	r23, Z+1	; 0x01
    2336:	82 81       	ldd	r24, Z+2	; 0x02
    2338:	93 81       	ldd	r25, Z+3	; 0x03
    233a:	d9 d5       	rcall	.+2994   	; 0x2eee <__cmpsf2>
    233c:	88 23       	and	r24, r24
    233e:	4c f4       	brge	.+18     	; 0x2352 <remoteAlternateCommands+0x59a>
    2340:	ce 01       	movw	r24, r28
		__ticks = 1;
    2342:	8e 5b       	subi	r24, 0xBE	; 190
    2344:	9f 4f       	sbci	r25, 0xFF	; 255
    2346:	21 e0       	ldi	r18, 0x01	; 1
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	fc 01       	movw	r30, r24
    234c:	31 83       	std	Z+1, r19	; 0x01
    234e:	20 83       	st	Z, r18
    2350:	63 c0       	rjmp	.+198    	; 0x2418 <remoteAlternateCommands+0x660>
	else if (__tmp > 65535)
    2352:	ce 01       	movw	r24, r28
    2354:	ce 96       	adiw	r24, 0x3e	; 62
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	3f ef       	ldi	r19, 0xFF	; 255
    235a:	4f e7       	ldi	r20, 0x7F	; 127
    235c:	57 e4       	ldi	r21, 0x47	; 71
    235e:	fc 01       	movw	r30, r24
    2360:	60 81       	ld	r22, Z
    2362:	71 81       	ldd	r23, Z+1	; 0x01
    2364:	82 81       	ldd	r24, Z+2	; 0x02
    2366:	93 81       	ldd	r25, Z+3	; 0x03
    2368:	3f d6       	rcall	.+3198   	; 0x2fe8 <__gesf2>
    236a:	18 16       	cp	r1, r24
    236c:	0c f0       	brlt	.+2      	; 0x2370 <remoteAlternateCommands+0x5b8>
    236e:	44 c0       	rjmp	.+136    	; 0x23f8 <remoteAlternateCommands+0x640>
    2370:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e2       	ldi	r20, 0x20	; 32
    2376:	51 e4       	ldi	r21, 0x41	; 65
    2378:	6e 85       	ldd	r22, Y+14	; 0x0e
    237a:	7f 85       	ldd	r23, Y+15	; 0x0f
    237c:	88 89       	ldd	r24, Y+16	; 0x10
    237e:	99 89       	ldd	r25, Y+17	; 0x11
    2380:	37 d6       	rcall	.+3182   	; 0x2ff0 <__mulsf3>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	8e 01       	movw	r16, r28
    2388:	0e 5b       	subi	r16, 0xBE	; 190
    238a:	1f 4f       	sbci	r17, 0xFF	; 255
    238c:	bc 01       	movw	r22, r24
    238e:	cd 01       	movw	r24, r26
    2390:	b2 d5       	rcall	.+2916   	; 0x2ef6 <__fixunssfsi>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	f8 01       	movw	r30, r16
    2398:	91 83       	std	Z+1, r25	; 0x01
    239a:	80 83       	st	Z, r24
    239c:	24 c0       	rjmp	.+72     	; 0x23e6 <remoteAlternateCommands+0x62e>
    239e:	ce 01       	movw	r24, r28
    23a0:	8c 5b       	subi	r24, 0xBC	; 188
    23a2:	9f 4f       	sbci	r25, 0xFF	; 255
    23a4:	28 ec       	ldi	r18, 0xC8	; 200
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	fc 01       	movw	r30, r24
    23aa:	31 83       	std	Z+1, r19	; 0x01
    23ac:	20 83       	st	Z, r18
    23ae:	ce 01       	movw	r24, r28
    23b0:	8c 5b       	subi	r24, 0xBC	; 188
    23b2:	9f 4f       	sbci	r25, 0xFF	; 255
    23b4:	fc 01       	movw	r30, r24
    23b6:	80 81       	ld	r24, Z
    23b8:	91 81       	ldd	r25, Z+1	; 0x01
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	f1 f7       	brne	.-4      	; 0x23ba <remoteAlternateCommands+0x602>
    23be:	9e 01       	movw	r18, r28
    23c0:	2c 5b       	subi	r18, 0xBC	; 188
    23c2:	3f 4f       	sbci	r19, 0xFF	; 255
    23c4:	f9 01       	movw	r30, r18
    23c6:	91 83       	std	Z+1, r25	; 0x01
    23c8:	80 83       	st	Z, r24
    23ca:	ce 01       	movw	r24, r28
    23cc:	8e 5b       	subi	r24, 0xBE	; 190
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ce:	9f 4f       	sbci	r25, 0xFF	; 255
    23d0:	9e 01       	movw	r18, r28
    23d2:	2e 5b       	subi	r18, 0xBE	; 190
    23d4:	3f 4f       	sbci	r19, 0xFF	; 255
    23d6:	f9 01       	movw	r30, r18
    23d8:	20 81       	ld	r18, Z
    23da:	31 81       	ldd	r19, Z+1	; 0x01
    23dc:	21 50       	subi	r18, 0x01	; 1
    23de:	31 09       	sbc	r19, r1
    23e0:	fc 01       	movw	r30, r24
    23e2:	31 83       	std	Z+1, r19	; 0x01
    23e4:	20 83       	st	Z, r18
    23e6:	ce 01       	movw	r24, r28
    23e8:	8e 5b       	subi	r24, 0xBE	; 190
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ea:	9f 4f       	sbci	r25, 0xFF	; 255
    23ec:	fc 01       	movw	r30, r24
    23ee:	80 81       	ld	r24, Z
    23f0:	91 81       	ldd	r25, Z+1	; 0x01
    23f2:	89 2b       	or	r24, r25
    23f4:	a1 f6       	brne	.-88     	; 0x239e <remoteAlternateCommands+0x5e6>
    23f6:	2a c0       	rjmp	.+84     	; 0x244c <remoteAlternateCommands+0x694>
    23f8:	8e 01       	movw	r16, r28
    23fa:	0e 5b       	subi	r16, 0xBE	; 190
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fc:	1f 4f       	sbci	r17, 0xFF	; 255
    23fe:	ce 01       	movw	r24, r28
    2400:	ce 96       	adiw	r24, 0x3e	; 62
    2402:	fc 01       	movw	r30, r24
    2404:	60 81       	ld	r22, Z
    2406:	71 81       	ldd	r23, Z+1	; 0x01
    2408:	82 81       	ldd	r24, Z+2	; 0x02
    240a:	93 81       	ldd	r25, Z+3	; 0x03
    240c:	74 d5       	rcall	.+2792   	; 0x2ef6 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	f8 01       	movw	r30, r16
    2414:	91 83       	std	Z+1, r25	; 0x01
    2416:	80 83       	st	Z, r24
    2418:	ce 01       	movw	r24, r28
    241a:	8a 5b       	subi	r24, 0xBA	; 186
    241c:	9f 4f       	sbci	r25, 0xFF	; 255
    241e:	9e 01       	movw	r18, r28
    2420:	2e 5b       	subi	r18, 0xBE	; 190
    2422:	3f 4f       	sbci	r19, 0xFF	; 255
    2424:	f9 01       	movw	r30, r18
    2426:	20 81       	ld	r18, Z
    2428:	31 81       	ldd	r19, Z+1	; 0x01
    242a:	fc 01       	movw	r30, r24
    242c:	31 83       	std	Z+1, r19	; 0x01
    242e:	20 83       	st	Z, r18
    2430:	ce 01       	movw	r24, r28
    2432:	8a 5b       	subi	r24, 0xBA	; 186
    2434:	9f 4f       	sbci	r25, 0xFF	; 255
    2436:	fc 01       	movw	r30, r24
    2438:	80 81       	ld	r24, Z
    243a:	91 81       	ldd	r25, Z+1	; 0x01
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <remoteAlternateCommands+0x684>
    2440:	9e 01       	movw	r18, r28
    2442:	2a 5b       	subi	r18, 0xBA	; 186
    2444:	3f 4f       	sbci	r19, 0xFF	; 255
    2446:	f9 01       	movw	r30, r18
    2448:	91 83       	std	Z+1, r25	; 0x01
    244a:	80 83       	st	Z, r24
    244c:	8b e2       	ldi	r24, 0x2B	; 43
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	2b e2       	ldi	r18, 0x2B	; 43
			_delay_ms(IR_LED_DELAY);
			SETBIT(REMOTE_PORT,REMOTE_LED);
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	f9 01       	movw	r30, r18
    2456:	20 81       	ld	r18, Z
    2458:	22 60       	ori	r18, 0x02	; 2
    245a:	fc 01       	movw	r30, r24
    245c:	20 83       	st	Z, r18
    245e:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <levelFlag>
    2462:	05 c0       	rjmp	.+10     	; 0x246e <remoteAlternateCommands+0x6b6>
			
			levelFlag = false;											// False so is repeated only once
    2464:	00 00       	nop
    2466:	03 c0       	rjmp	.+6      	; 0x246e <remoteAlternateCommands+0x6b6>
			
			break;
    2468:	00 00       	nop
			//		_delay_ms(PAIRING_LED_DELAY);
			//		SETBIT(REMOTE_PORT,REMOTE_LED);				// LED off
			//		_delay_ms(PAIRING_LED_DELAY);
			//	}
			//}
			break;
    246a:	01 c0       	rjmp	.+2      	; 0x246e <remoteAlternateCommands+0x6b6>
    246c:	00 00       	nop
					_delay_ms(PAIRING_LED_DELAY);
					SETBIT(REMOTE_PORT,REMOTE_LED);				// LED off
					_delay_ms(PAIRING_LED_DELAY);
				}
			}
			break;
    246e:	00 00       	nop
    2470:	c4 5b       	subi	r28, 0xB4	; 180
			break;
		}
		
		case REMOTE_RIGHT: {
			if (!levelFlag) {											// Leave if already executed
				break;
    2472:	df 4f       	sbci	r29, 0xFF	; 255
		//case REMOTE_BATTERY_S:
		
		default:
			break;
	}
}
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	f8 94       	cli
    2478:	de bf       	out	0x3e, r29	; 62
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	cd bf       	out	0x3d, r28	; 61
    247e:	df 91       	pop	r29
    2480:	cf 91       	pop	r28
    2482:	1f 91       	pop	r17
    2484:	0f 91       	pop	r16
    2486:	08 95       	ret

00002488 <decodeButton>:
    2488:	cf 93       	push	r28
    248a:	df 93       	push	r29

//-----------------------------------------------------------------------------

static void decodeButton(void) {
    248c:	cd b7       	in	r28, 0x3d	; 61
    248e:	de b7       	in	r29, 0x3e	; 62
    2490:	2e 97       	sbiw	r28, 0x0e	; 14
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	de bf       	out	0x3e, r29	; 62
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	cd bf       	out	0x3d, r28	; 61
    249c:	f8 94       	cli
    249e:	88 e6       	ldi	r24, 0x68	; 104
	cli();

	CLEARBIT(PCICR,(1 << PCIE0));								// Disable PCINT0 because switch bouncing
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	28 e6       	ldi	r18, 0x68	; 104
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	f9 01       	movw	r30, r18
    24a8:	20 81       	ld	r18, Z
    24aa:	2e 7f       	andi	r18, 0xFE	; 254
    24ac:	fc 01       	movw	r30, r24
    24ae:	20 83       	st	Z, r18
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	a8 ec       	ldi	r26, 0xC8	; 200
    24b6:	b2 e4       	ldi	r27, 0x42	; 66
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	9a 83       	std	Y+2, r25	; 0x02
    24bc:	ab 83       	std	Y+3, r26	; 0x03
    24be:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	4a ef       	ldi	r20, 0xFA	; 250
    24c6:	54 e4       	ldi	r21, 0x44	; 68
    24c8:	69 81       	ldd	r22, Y+1	; 0x01
    24ca:	7a 81       	ldd	r23, Y+2	; 0x02
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	9c 81       	ldd	r25, Y+4	; 0x04
    24d0:	8f d5       	rcall	.+2846   	; 0x2ff0 <__mulsf3>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	8d 83       	std	Y+5, r24	; 0x05
    24d8:	9e 83       	std	Y+6, r25	; 0x06
    24da:	af 83       	std	Y+7, r26	; 0x07
	if (__tmp < 1.0)
    24dc:	b8 87       	std	Y+8, r27	; 0x08
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e8       	ldi	r20, 0x80	; 128
    24e4:	5f e3       	ldi	r21, 0x3F	; 63
    24e6:	6d 81       	ldd	r22, Y+5	; 0x05
    24e8:	7e 81       	ldd	r23, Y+6	; 0x06
    24ea:	8f 81       	ldd	r24, Y+7	; 0x07
    24ec:	98 85       	ldd	r25, Y+8	; 0x08
    24ee:	ff d4       	rcall	.+2558   	; 0x2eee <__cmpsf2>
    24f0:	88 23       	and	r24, r24
    24f2:	2c f4       	brge	.+10     	; 0x24fe <decodeButton+0x76>
		__ticks = 1;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	9a 87       	std	Y+10, r25	; 0x0a
    24fa:	89 87       	std	Y+9, r24	; 0x09
    24fc:	3b c0       	rjmp	.+118    	; 0x2574 <decodeButton+0xec>
	else if (__tmp > 65535)
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	3f ef       	ldi	r19, 0xFF	; 255
    2502:	4f e7       	ldi	r20, 0x7F	; 127
    2504:	57 e4       	ldi	r21, 0x47	; 71
    2506:	6d 81       	ldd	r22, Y+5	; 0x05
    2508:	7e 81       	ldd	r23, Y+6	; 0x06
    250a:	8f 81       	ldd	r24, Y+7	; 0x07
    250c:	98 85       	ldd	r25, Y+8	; 0x08
    250e:	6c d5       	rcall	.+2776   	; 0x2fe8 <__gesf2>
    2510:	18 16       	cp	r1, r24
    2512:	3c f5       	brge	.+78     	; 0x2562 <decodeButton+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e2       	ldi	r20, 0x20	; 32
    251a:	51 e4       	ldi	r21, 0x41	; 65
    251c:	69 81       	ldd	r22, Y+1	; 0x01
    251e:	7a 81       	ldd	r23, Y+2	; 0x02
    2520:	8b 81       	ldd	r24, Y+3	; 0x03
    2522:	9c 81       	ldd	r25, Y+4	; 0x04
    2524:	65 d5       	rcall	.+2762   	; 0x2ff0 <__mulsf3>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	bc 01       	movw	r22, r24
    252c:	cd 01       	movw	r24, r26
    252e:	e3 d4       	rcall	.+2502   	; 0x2ef6 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	9a 87       	std	Y+10, r25	; 0x0a
    2536:	89 87       	std	Y+9, r24	; 0x09
    2538:	0f c0       	rjmp	.+30     	; 0x2558 <decodeButton+0xd0>
    253a:	88 ec       	ldi	r24, 0xC8	; 200
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	9c 87       	std	Y+12, r25	; 0x0c
    2540:	8b 87       	std	Y+11, r24	; 0x0b
    2542:	8b 85       	ldd	r24, Y+11	; 0x0b
    2544:	9c 85       	ldd	r25, Y+12	; 0x0c
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	f1 f7       	brne	.-4      	; 0x2546 <decodeButton+0xbe>
    254a:	9c 87       	std	Y+12, r25	; 0x0c
    254c:	8b 87       	std	Y+11, r24	; 0x0b
    254e:	89 85       	ldd	r24, Y+9	; 0x09
    2550:	9a 85       	ldd	r25, Y+10	; 0x0a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	9a 87       	std	Y+10, r25	; 0x0a
    2556:	89 87       	std	Y+9, r24	; 0x09
    2558:	89 85       	ldd	r24, Y+9	; 0x09
    255a:	9a 85       	ldd	r25, Y+10	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255c:	89 2b       	or	r24, r25
    255e:	69 f7       	brne	.-38     	; 0x253a <decodeButton+0xb2>
    2560:	13 c0       	rjmp	.+38     	; 0x2588 <decodeButton+0x100>
    2562:	6d 81       	ldd	r22, Y+5	; 0x05
    2564:	7e 81       	ldd	r23, Y+6	; 0x06
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2566:	8f 81       	ldd	r24, Y+7	; 0x07
    2568:	98 85       	ldd	r25, Y+8	; 0x08
    256a:	c5 d4       	rcall	.+2442   	; 0x2ef6 <__fixunssfsi>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	9a 87       	std	Y+10, r25	; 0x0a
    2572:	89 87       	std	Y+9, r24	; 0x09
    2574:	89 85       	ldd	r24, Y+9	; 0x09
    2576:	9a 85       	ldd	r25, Y+10	; 0x0a
    2578:	9e 87       	std	Y+14, r25	; 0x0e
    257a:	8d 87       	std	Y+13, r24	; 0x0d
    257c:	8d 85       	ldd	r24, Y+13	; 0x0d
    257e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	f1 f7       	brne	.-4      	; 0x2580 <decodeButton+0xf8>
    2584:	9e 87       	std	Y+14, r25	; 0x0e
    2586:	8d 87       	std	Y+13, r24	; 0x0d
    2588:	80 e2       	ldi	r24, 0x20	; 32
    258a:	90 e0       	ldi	r25, 0x00	; 0

	_delay_ms(DEBOUNCE_DELAY);

	if (!CHECKBIT(PANEL_BUTTONS_PIN,BUTTON_MUTE)) {
    258c:	fc 01       	movw	r30, r24
    258e:	80 81       	ld	r24, Z
    2590:	88 2f       	mov	r24, r24
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	81 70       	andi	r24, 0x01	; 1
    2596:	99 27       	eor	r25, r25
    2598:	89 2b       	or	r24, r25
    259a:	a9 f4       	brne	.+42     	; 0x25c6 <decodeButton+0x13e>
    259c:	88 e2       	ldi	r24, 0x28	; 40
		TOGGLEBIT(OUTPUT_RELAYS_PORT,OUTPUT_RELAYS_MUTE);	// Toggle Mute
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	28 e2       	ldi	r18, 0x28	; 40
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	f9 01       	movw	r30, r18
    25a6:	30 81       	ld	r19, Z
    25a8:	21 e0       	ldi	r18, 0x01	; 1
    25aa:	23 27       	eor	r18, r19
    25ac:	fc 01       	movw	r30, r24
    25ae:	20 83       	st	Z, r18
		TOGGLEBIT(OUTPUT_LED_PORT,OUTPUT_LED_MUTE);
    25b0:	88 e2       	ldi	r24, 0x28	; 40
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	28 e2       	ldi	r18, 0x28	; 40
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	f9 01       	movw	r30, r18
    25ba:	30 81       	ld	r19, Z
    25bc:	20 e1       	ldi	r18, 0x10	; 16
    25be:	23 27       	eor	r18, r19
    25c0:	fc 01       	movw	r30, r24
    25c2:	20 83       	st	Z, r18
    25c4:	23 c0       	rjmp	.+70     	; 0x260c <decodeButton+0x184>
	}
	else if (!CHECKBIT(PANEL_BUTTONS_PIN,BUTTON_HIGH)) {
    25c6:	80 e2       	ldi	r24, 0x20	; 32
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	fc 01       	movw	r30, r24
    25cc:	80 81       	ld	r24, Z
    25ce:	88 2f       	mov	r24, r24
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	82 70       	andi	r24, 0x02	; 2
    25d4:	99 27       	eor	r25, r25
    25d6:	89 2b       	or	r24, r25
    25d8:	11 f4       	brne	.+4      	; 0x25de <decodeButton+0x156>
		setLevelHigh();
    25da:	35 d1       	rcall	.+618    	; 0x2846 <setLevelHigh>
    25dc:	17 c0       	rjmp	.+46     	; 0x260c <decodeButton+0x184>
    25de:	80 e2       	ldi	r24, 0x20	; 32
	}
	else if (!CHECKBIT(PANEL_BUTTONS_PIN,BUTTON_MED)) {
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	fc 01       	movw	r30, r24
    25e4:	80 81       	ld	r24, Z
    25e6:	88 2f       	mov	r24, r24
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	84 70       	andi	r24, 0x04	; 4
    25ec:	99 27       	eor	r25, r25
    25ee:	89 2b       	or	r24, r25
    25f0:	11 f4       	brne	.+4      	; 0x25f6 <decodeButton+0x16e>
    25f2:	51 d1       	rcall	.+674    	; 0x2896 <setLevelMedium>
		setLevelMedium();
    25f4:	0b c0       	rjmp	.+22     	; 0x260c <decodeButton+0x184>
    25f6:	80 e2       	ldi	r24, 0x20	; 32
    25f8:	90 e0       	ldi	r25, 0x00	; 0
	}
	else if (!CHECKBIT(PANEL_BUTTONS_PIN,BUTTON_LOW)) {
    25fa:	fc 01       	movw	r30, r24
    25fc:	80 81       	ld	r24, Z
    25fe:	88 2f       	mov	r24, r24
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	88 70       	andi	r24, 0x08	; 8
    2604:	99 27       	eor	r25, r25
    2606:	89 2b       	or	r24, r25
    2608:	09 f4       	brne	.+2      	; 0x260c <decodeButton+0x184>
    260a:	76 d1       	rcall	.+748    	; 0x28f8 <setLevelLow>
    260c:	88 e6       	ldi	r24, 0x68	; 104
		setLevelLow();
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	28 e6       	ldi	r18, 0x68	; 104
			_delay_ms(PAIRING_LED_DELAY);
		}
	}
#endif

	SETBIT(PCICR,(1 << PCIE0));				// Enable PCINT0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	f9 01       	movw	r30, r18
    2616:	20 81       	ld	r18, Z
    2618:	21 60       	ori	r18, 0x01	; 1
    261a:	fc 01       	movw	r30, r24
    261c:	20 83       	st	Z, r18
    261e:	78 94       	sei
    2620:	00 00       	nop
    2622:	2e 96       	adiw	r28, 0x0e	; 14

	sei();
    2624:	0f b6       	in	r0, 0x3f	; 63
}
    2626:	f8 94       	cli
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	cd bf       	out	0x3d, r28	; 61
    262e:	df 91       	pop	r29
    2630:	cf 91       	pop	r28
    2632:	08 95       	ret

00002634 <decodeKnob>:
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	cd b7       	in	r28, 0x3d	; 61

//-----------------------------------------------------------------------------

static inline void decodeKnob(void) {
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	f8 94       	cli
    263e:	88 e6       	ldi	r24, 0x68	; 104
    2640:	90 e0       	ldi	r25, 0x00	; 0
	cli();
    2642:	28 e6       	ldi	r18, 0x68	; 104

	CLEARBIT(PCICR,(1 << PCIE1));								// Disable PCINT1 because switch bouncing
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	f9 01       	movw	r30, r18
    2648:	20 81       	ld	r18, Z
    264a:	2d 7f       	andi	r18, 0xFD	; 253
    264c:	fc 01       	movw	r30, r24
    264e:	20 83       	st	Z, r18
    2650:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <VolLimits_Up>
    2654:	88 23       	and	r24, r24

	if (VolLimits_Up()) {
    2656:	41 f0       	breq	.+16     	; 0x2668 <decodeKnob+0x34>
    2658:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <currentVol>
    265c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <previousVol>
		previousVol = currentVol;
    2660:	82 e0       	ldi	r24, 0x02	; 2
    2662:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <currentVol>
		currentVol = LIMIT_UP;
    2666:	0b c0       	rjmp	.+22     	; 0x267e <decodeKnob+0x4a>
    2668:	0e 94 10 05 	call	0xa20	; 0xa20 <VolLimits_Down>
    266c:	88 23       	and	r24, r24
		//}
	} else if (VolLimits_Down()) {
    266e:	39 f0       	breq	.+14     	; 0x267e <decodeKnob+0x4a>
    2670:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <currentVol>
    2674:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <previousVol>
		previousVol = currentVol;
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <currentVol>
		currentVol = LIMIT_DOWN;
    267e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <currentVol>
    2682:	82 30       	cpi	r24, 0x02	; 2
	}

	if ((currentVol == LIMIT_UP) && (previousVol == 0) && !VolLimits_Up()) {
    2684:	81 f4       	brne	.+32     	; 0x26a6 <decodeKnob+0x72>
    2686:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <previousVol>
    268a:	88 23       	and	r24, r24
    268c:	61 f4       	brne	.+24     	; 0x26a6 <decodeKnob+0x72>
    268e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <VolLimits_Up>
    2692:	98 2f       	mov	r25, r24
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	89 27       	eor	r24, r25
    2698:	88 23       	and	r24, r24
    269a:	29 f0       	breq	.+10     	; 0x26a6 <decodeKnob+0x72>
    269c:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <previousVol>
		previousVol = 0;
    26a0:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <currentVol>
		currentVol = 0;
    26a4:	13 c0       	rjmp	.+38     	; 0x26cc <decodeKnob+0x98>
    26a6:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <currentVol>
	} else if ((currentVol == LIMIT_DOWN) && (previousVol == 0) && !VolLimits_Down()) {
    26aa:	81 30       	cpi	r24, 0x01	; 1
    26ac:	79 f4       	brne	.+30     	; 0x26cc <decodeKnob+0x98>
    26ae:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <previousVol>
    26b2:	88 23       	and	r24, r24
    26b4:	59 f4       	brne	.+22     	; 0x26cc <decodeKnob+0x98>
    26b6:	0e 94 10 05 	call	0xa20	; 0xa20 <VolLimits_Down>
    26ba:	98 2f       	mov	r25, r24
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	89 27       	eor	r24, r25
    26c0:	88 23       	and	r24, r24
    26c2:	21 f0       	breq	.+8      	; 0x26cc <decodeKnob+0x98>
    26c4:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <previousVol>
		previousVol = 0;
    26c8:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <currentVol>
		currentVol = 0;
    26cc:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <currentVol>
	}

	if ((currentVol == LIMIT_DOWN) && (previousVol == LIMIT_UP)
    26d0:	81 30       	cpi	r24, 0x01	; 1
    26d2:	a1 f4       	brne	.+40     	; 0x26fc <decodeKnob+0xc8>
    26d4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <previousVol>
    26d8:	82 30       	cpi	r24, 0x02	; 2
    26da:	81 f4       	brne	.+32     	; 0x26fc <decodeKnob+0xc8>
    26dc:	86 e2       	ldi	r24, 0x26	; 38
			&& ((OUTPUT_LED_PIN & 0xe0) != OUTPUT_LED_HIGH)) {
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	fc 01       	movw	r30, r24
    26e2:	80 81       	ld	r24, Z
    26e4:	88 2f       	mov	r24, r24
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	80 7e       	andi	r24, 0xE0	; 224
    26ea:	99 27       	eor	r25, r25
    26ec:	80 97       	sbiw	r24, 0x20	; 32
    26ee:	31 f0       	breq	.+12     	; 0x26fc <decodeKnob+0xc8>
    26f0:	2a d0       	rcall	.+84     	; 0x2746 <levelShiftUp>
		levelShiftUp();
    26f2:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <previousVol>

		previousVol = 0;
    26f6:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <currentVol>
		currentVol = 0;
    26fa:	18 c0       	rjmp	.+48     	; 0x272c <decodeKnob+0xf8>
    26fc:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <currentVol>
	} else if ((currentVol == LIMIT_UP) && (previousVol == LIMIT_DOWN)
    2700:	82 30       	cpi	r24, 0x02	; 2
    2702:	a1 f4       	brne	.+40     	; 0x272c <decodeKnob+0xf8>
    2704:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <previousVol>
    2708:	81 30       	cpi	r24, 0x01	; 1
    270a:	81 f4       	brne	.+32     	; 0x272c <decodeKnob+0xf8>
    270c:	86 e2       	ldi	r24, 0x26	; 38
    270e:	90 e0       	ldi	r25, 0x00	; 0
			&& ((OUTPUT_LED_PIN & 0xe0) != OUTPUT_LED_LOW)) {
    2710:	fc 01       	movw	r30, r24
    2712:	80 81       	ld	r24, Z
    2714:	88 2f       	mov	r24, r24
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	80 7e       	andi	r24, 0xE0	; 224
    271a:	99 27       	eor	r25, r25
    271c:	80 38       	cpi	r24, 0x80	; 128
    271e:	91 05       	cpc	r25, r1
    2720:	29 f0       	breq	.+10     	; 0x272c <decodeKnob+0xf8>
    2722:	51 d0       	rcall	.+162    	; 0x27c6 <levelShiftDown>
		levelShiftDown();
    2724:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <previousVol>

		previousVol = 0;
    2728:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <currentVol>
		currentVol = 0;
    272c:	88 e6       	ldi	r24, 0x68	; 104
	}

	SETBIT(PCICR,(1 << PCIE1));									// Enable PCINT0
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	28 e6       	ldi	r18, 0x68	; 104
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	f9 01       	movw	r30, r18
    2736:	20 81       	ld	r18, Z
    2738:	22 60       	ori	r18, 0x02	; 2
    273a:	fc 01       	movw	r30, r24
    273c:	20 83       	st	Z, r18
}
    273e:	00 00       	nop
    2740:	df 91       	pop	r29
    2742:	cf 91       	pop	r28
    2744:	08 95       	ret

00002746 <levelShiftUp>:

//-----------------------------------------------------------------------------

static inline void levelShiftUp(void) {
    2746:	cf 93       	push	r28
    2748:	df 93       	push	r29
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
	SETBIT(OUTPUT_RELAYS_PORT,OUTPUT_RELAYS_MUTE);			// Mute on
    274e:	88 e2       	ldi	r24, 0x28	; 40
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	28 e2       	ldi	r18, 0x28	; 40
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	f9 01       	movw	r30, r18
    2758:	20 81       	ld	r18, Z
    275a:	21 60       	ori	r18, 0x01	; 1
    275c:	fc 01       	movw	r30, r24
    275e:	20 83       	st	Z, r18
	SETBIT(OUTPUT_LED_PORT,OUTPUT_LED_MUTE);
    2760:	88 e2       	ldi	r24, 0x28	; 40
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	28 e2       	ldi	r18, 0x28	; 40
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	f9 01       	movw	r30, r18
    276a:	20 81       	ld	r18, Z
    276c:	20 61       	ori	r18, 0x10	; 16
    276e:	fc 01       	movw	r30, r24
    2770:	20 83       	st	Z, r18

	Stepper_CW();
    2772:	13 d1       	rcall	.+550    	; 0x299a <Stepper_CW>
    2774:	86 e2       	ldi	r24, 0x26	; 38
	
	switch(OUTPUT_LED_PIN & 0xe0) {
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	fc 01       	movw	r30, r24
    277a:	80 81       	ld	r24, Z
    277c:	88 2f       	mov	r24, r24
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	80 7e       	andi	r24, 0xE0	; 224
    2782:	99 27       	eor	r25, r25
    2784:	80 34       	cpi	r24, 0x40	; 64
    2786:	91 05       	cpc	r25, r1
    2788:	21 f0       	breq	.+8      	; 0x2792 <levelShiftUp+0x4c>
    278a:	80 38       	cpi	r24, 0x80	; 128
    278c:	91 05       	cpc	r25, r1
    278e:	19 f0       	breq	.+6      	; 0x2796 <levelShiftUp+0x50>

			break;
		}

		default: {
			break;
    2790:	04 c0       	rjmp	.+8      	; 0x279a <levelShiftUp+0x54>

	Stepper_CW();
	
	switch(OUTPUT_LED_PIN & 0xe0) {
		case OUTPUT_LED_MED: {								// Switch to high
			setLevelHigh();
    2792:	59 d0       	rcall	.+178    	; 0x2846 <setLevelHigh>
    2794:	02 c0       	rjmp	.+4      	; 0x279a <levelShiftUp+0x54>

			break;
    2796:	7f d0       	rcall	.+254    	; 0x2896 <setLevelMedium>
		}

		case OUTPUT_LED_LOW: {								// Switch to medium
			setLevelMedium();
    2798:	00 00       	nop
    279a:	88 e2       	ldi	r24, 0x28	; 40

			break;
    279c:	90 e0       	ldi	r25, 0x00	; 0
		default: {
			break;
		}
	}
	
	CLEARBIT(OUTPUT_RELAYS_PORT,OUTPUT_RELAYS_MUTE);		// Mute off
    279e:	28 e2       	ldi	r18, 0x28	; 40
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	f9 01       	movw	r30, r18
    27a4:	20 81       	ld	r18, Z
    27a6:	2e 7f       	andi	r18, 0xFE	; 254
    27a8:	fc 01       	movw	r30, r24
    27aa:	20 83       	st	Z, r18
	CLEARBIT(OUTPUT_LED_PORT,OUTPUT_LED_MUTE);
    27ac:	88 e2       	ldi	r24, 0x28	; 40
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	28 e2       	ldi	r18, 0x28	; 40
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	f9 01       	movw	r30, r18
    27b6:	20 81       	ld	r18, Z
    27b8:	2f 7e       	andi	r18, 0xEF	; 239
    27ba:	fc 01       	movw	r30, r24
    27bc:	20 83       	st	Z, r18
}
    27be:	00 00       	nop
    27c0:	df 91       	pop	r29
    27c2:	cf 91       	pop	r28
    27c4:	08 95       	ret

000027c6 <levelShiftDown>:

//-----------------------------------------------------------------------------

static inline void levelShiftDown(void) {
    27c6:	cf 93       	push	r28
    27c8:	df 93       	push	r29
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
	SETBIT(OUTPUT_RELAYS_PORT,OUTPUT_RELAYS_MUTE);			// Mute on
    27ce:	88 e2       	ldi	r24, 0x28	; 40
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	28 e2       	ldi	r18, 0x28	; 40
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	f9 01       	movw	r30, r18
    27d8:	20 81       	ld	r18, Z
    27da:	21 60       	ori	r18, 0x01	; 1
    27dc:	fc 01       	movw	r30, r24
    27de:	20 83       	st	Z, r18
	SETBIT(OUTPUT_LED_PORT,OUTPUT_LED_MUTE);
    27e0:	88 e2       	ldi	r24, 0x28	; 40
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	28 e2       	ldi	r18, 0x28	; 40
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	f9 01       	movw	r30, r18
    27ea:	20 81       	ld	r18, Z
    27ec:	20 61       	ori	r18, 0x10	; 16
    27ee:	fc 01       	movw	r30, r24
    27f0:	20 83       	st	Z, r18

	Stepper_CCW();
    27f2:	28 d2       	rcall	.+1104   	; 0x2c44 <Stepper_CCW>
    27f4:	86 e2       	ldi	r24, 0x26	; 38
	
	switch(OUTPUT_LED_PIN & 0xe0) {
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	fc 01       	movw	r30, r24
    27fa:	80 81       	ld	r24, Z
    27fc:	88 2f       	mov	r24, r24
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	80 7e       	andi	r24, 0xE0	; 224
    2802:	99 27       	eor	r25, r25
    2804:	80 32       	cpi	r24, 0x20	; 32
    2806:	91 05       	cpc	r25, r1
    2808:	21 f0       	breq	.+8      	; 0x2812 <levelShiftDown+0x4c>
    280a:	80 34       	cpi	r24, 0x40	; 64
    280c:	91 05       	cpc	r25, r1
    280e:	19 f0       	breq	.+6      	; 0x2816 <levelShiftDown+0x50>
    2810:	04 c0       	rjmp	.+8      	; 0x281a <levelShiftDown+0x54>

			break;
		}

		default: {
			break;
    2812:	41 d0       	rcall	.+130    	; 0x2896 <setLevelMedium>

	Stepper_CCW();
	
	switch(OUTPUT_LED_PIN & 0xe0) {
		case OUTPUT_LED_HIGH: {								// Switch to medium
			setLevelMedium();
    2814:	02 c0       	rjmp	.+4      	; 0x281a <levelShiftDown+0x54>
    2816:	70 d0       	rcall	.+224    	; 0x28f8 <setLevelLow>

			break;
    2818:	00 00       	nop
		}

		case OUTPUT_LED_MED: {								// Switch to low
			setLevelLow();
    281a:	88 e2       	ldi	r24, 0x28	; 40
    281c:	90 e0       	ldi	r25, 0x00	; 0

			break;
    281e:	28 e2       	ldi	r18, 0x28	; 40
		default: {
			break;
		}
	}
	
	CLEARBIT(OUTPUT_RELAYS_PORT,OUTPUT_RELAYS_MUTE);		// Mute off
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	f9 01       	movw	r30, r18
    2824:	20 81       	ld	r18, Z
    2826:	2e 7f       	andi	r18, 0xFE	; 254
    2828:	fc 01       	movw	r30, r24
    282a:	20 83       	st	Z, r18
    282c:	88 e2       	ldi	r24, 0x28	; 40
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	28 e2       	ldi	r18, 0x28	; 40
	CLEARBIT(OUTPUT_LED_PORT,OUTPUT_LED_MUTE);
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	f9 01       	movw	r30, r18
    2836:	20 81       	ld	r18, Z
    2838:	2f 7e       	andi	r18, 0xEF	; 239
    283a:	fc 01       	movw	r30, r24
    283c:	20 83       	st	Z, r18
    283e:	00 00       	nop
    2840:	df 91       	pop	r29
    2842:	cf 91       	pop	r28
}
    2844:	08 95       	ret

00002846 <setLevelHigh>:
    2846:	cf 93       	push	r28
    2848:	df 93       	push	r29
    284a:	cd b7       	in	r28, 0x3d	; 61

//-----------------------------------------------------------------------------

static inline void setLevelHigh(void) {
    284c:	de b7       	in	r29, 0x3e	; 62
    284e:	88 e2       	ldi	r24, 0x28	; 40
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	28 e2       	ldi	r18, 0x28	; 40
	CLEARBIT(OUTPUT_RELAYS_PORT,(OUTPUT_RELAYS_MED
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	f9 01       	movw	r30, r18
    2858:	20 81       	ld	r18, Z
    285a:	21 7f       	andi	r18, 0xF1	; 241
    285c:	fc 01       	movw	r30, r24
    285e:	20 83       	st	Z, r18
    2860:	88 e2       	ldi	r24, 0x28	; 40
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	28 e2       	ldi	r18, 0x28	; 40
									| OUTPUT_RELAYS_LOW
									| OUTPUT_RELAYS_HIGH));		// Button_High low because relay normally closed
	CLEARBIT(OUTPUT_LED_PORT,(OUTPUT_LED_MED
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	f9 01       	movw	r30, r18
    286a:	20 81       	ld	r18, Z
    286c:	2f 73       	andi	r18, 0x3F	; 63
    286e:	fc 01       	movw	r30, r24
    2870:	20 83       	st	Z, r18
    2872:	88 e2       	ldi	r24, 0x28	; 40
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	28 e2       	ldi	r18, 0x28	; 40
								| OUTPUT_LED_LOW));
	SETBIT(OUTPUT_LED_PORT,OUTPUT_LED_HIGH);
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	f9 01       	movw	r30, r18
    287c:	20 81       	ld	r18, Z
    287e:	20 62       	ori	r18, 0x20	; 32
    2880:	fc 01       	movw	r30, r24
    2882:	20 83       	st	Z, r18
    2884:	60 e2       	ldi	r22, 0x20	; 32
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	90 e0       	ldi	r25, 0x00	; 0
	
	EEPROM_Write(LEVEL_ADDR,OUTPUT_LED_HIGH);
    288a:	0e 94 75 04 	call	0x8ea	; 0x8ea <EEPROM_Write>
    288e:	00 00       	nop
    2890:	df 91       	pop	r29
    2892:	cf 91       	pop	r28
}
    2894:	08 95       	ret

00002896 <setLevelMedium>:
    2896:	cf 93       	push	r28
    2898:	df 93       	push	r29
    289a:	cd b7       	in	r28, 0x3d	; 61

//-----------------------------------------------------------------------------

static inline void setLevelMedium(void) {
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	88 e2       	ldi	r24, 0x28	; 40
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	28 e2       	ldi	r18, 0x28	; 40
	CLEARBIT(OUTPUT_RELAYS_PORT,(OUTPUT_RELAYS_LOW));
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	f9 01       	movw	r30, r18
    28a8:	20 81       	ld	r18, Z
    28aa:	27 7f       	andi	r18, 0xF7	; 247
    28ac:	fc 01       	movw	r30, r24
    28ae:	20 83       	st	Z, r18
    28b0:	88 e2       	ldi	r24, 0x28	; 40
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	28 e2       	ldi	r18, 0x28	; 40
	SETBIT(OUTPUT_RELAYS_PORT,(OUTPUT_RELAYS_MED
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	f9 01       	movw	r30, r18
    28ba:	20 81       	ld	r18, Z
    28bc:	26 60       	ori	r18, 0x06	; 6
    28be:	fc 01       	movw	r30, r24
    28c0:	20 83       	st	Z, r18
    28c2:	88 e2       	ldi	r24, 0x28	; 40
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	28 e2       	ldi	r18, 0x28	; 40
								| OUTPUT_RELAYS_HIGH));
	CLEARBIT(OUTPUT_LED_PORT,(OUTPUT_LED_HIGH
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	f9 01       	movw	r30, r18
    28cc:	20 81       	ld	r18, Z
    28ce:	2f 75       	andi	r18, 0x5F	; 95
    28d0:	fc 01       	movw	r30, r24
    28d2:	20 83       	st	Z, r18
    28d4:	88 e2       	ldi	r24, 0x28	; 40
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	28 e2       	ldi	r18, 0x28	; 40
								| OUTPUT_LED_LOW));
	SETBIT(OUTPUT_LED_PORT,OUTPUT_LED_MED);
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	f9 01       	movw	r30, r18
    28de:	20 81       	ld	r18, Z
    28e0:	20 64       	ori	r18, 0x40	; 64
    28e2:	fc 01       	movw	r30, r24
    28e4:	20 83       	st	Z, r18
    28e6:	60 e4       	ldi	r22, 0x40	; 64
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	90 e0       	ldi	r25, 0x00	; 0
	
	EEPROM_Write(LEVEL_ADDR,OUTPUT_LED_MED);
    28ec:	0e 94 75 04 	call	0x8ea	; 0x8ea <EEPROM_Write>
    28f0:	00 00       	nop
    28f2:	df 91       	pop	r29
    28f4:	cf 91       	pop	r28
}
    28f6:	08 95       	ret

000028f8 <setLevelLow>:
    28f8:	cf 93       	push	r28
    28fa:	df 93       	push	r29
    28fc:	cd b7       	in	r28, 0x3d	; 61

//-----------------------------------------------------------------------------

static inline void setLevelLow(void) {
    28fe:	de b7       	in	r29, 0x3e	; 62
    2900:	88 e2       	ldi	r24, 0x28	; 40
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	28 e2       	ldi	r18, 0x28	; 40
	CLEARBIT(OUTPUT_RELAYS_PORT,OUTPUT_RELAYS_MED);
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	f9 01       	movw	r30, r18
    290a:	20 81       	ld	r18, Z
    290c:	2b 7f       	andi	r18, 0xFB	; 251
    290e:	fc 01       	movw	r30, r24
    2910:	20 83       	st	Z, r18
    2912:	88 e2       	ldi	r24, 0x28	; 40
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	28 e2       	ldi	r18, 0x28	; 40
	SETBIT(OUTPUT_RELAYS_PORT,(OUTPUT_RELAYS_LOW
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	f9 01       	movw	r30, r18
    291c:	20 81       	ld	r18, Z
    291e:	2a 60       	ori	r18, 0x0A	; 10
    2920:	fc 01       	movw	r30, r24
    2922:	20 83       	st	Z, r18
    2924:	88 e2       	ldi	r24, 0x28	; 40
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	28 e2       	ldi	r18, 0x28	; 40
								| OUTPUT_RELAYS_HIGH));
	CLEARBIT(OUTPUT_LED_PORT,(OUTPUT_LED_HIGH
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	f9 01       	movw	r30, r18
    292e:	20 81       	ld	r18, Z
    2930:	2f 79       	andi	r18, 0x9F	; 159
    2932:	fc 01       	movw	r30, r24
    2934:	20 83       	st	Z, r18
    2936:	88 e2       	ldi	r24, 0x28	; 40
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	28 e2       	ldi	r18, 0x28	; 40
								| OUTPUT_LED_MED));
	SETBIT(OUTPUT_LED_PORT,OUTPUT_LED_LOW);
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	f9 01       	movw	r30, r18
    2940:	20 81       	ld	r18, Z
    2942:	20 68       	ori	r18, 0x80	; 128
    2944:	fc 01       	movw	r30, r24
    2946:	20 83       	st	Z, r18
    2948:	60 e8       	ldi	r22, 0x80	; 128
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	90 e0       	ldi	r25, 0x00	; 0
	
	EEPROM_Write(LEVEL_ADDR,OUTPUT_LED_LOW);
    294e:	0e 94 75 04 	call	0x8ea	; 0x8ea <EEPROM_Write>
    2952:	00 00       	nop
    2954:	df 91       	pop	r29
    2956:	cf 91       	pop	r28
}
    2958:	08 95       	ret

0000295a <Stepper_Init>:

volatile State_t *Pt;						// Current State

//-----------------------------------------------------------------------------

void Stepper_Init(void) {
    295a:	cf 93       	push	r28
    295c:	df 93       	push	r29
    295e:	cd b7       	in	r28, 0x3d	; 61
    2960:	de b7       	in	r29, 0x3e	; 62
	SETBIT(DDRB,((1 << PB5) | (1 << PB4) | (1 << PB3) | (1 << PB2)));
    2962:	84 e2       	ldi	r24, 0x24	; 36
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	24 e2       	ldi	r18, 0x24	; 36
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	f9 01       	movw	r30, r18
    296c:	20 81       	ld	r18, Z
    296e:	2c 63       	ori	r18, 0x3C	; 60
    2970:	fc 01       	movw	r30, r24
    2972:	20 83       	st	Z, r18
	
	CLEARBIT(STEPPER,((1 << PB5) | (1 << PB4) | (1 << PB3) | (1 << PB2)));
    2974:	85 e2       	ldi	r24, 0x25	; 37
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	25 e2       	ldi	r18, 0x25	; 37
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	f9 01       	movw	r30, r18
    297e:	20 81       	ld	r18, Z
    2980:	23 7c       	andi	r18, 0xC3	; 195
    2982:	fc 01       	movw	r30, r24
    2984:	20 83       	st	Z, r18

	Pt = &fsm[3];
    2986:	8f e0       	ldi	r24, 0x0F	; 15
    2988:	91 e0       	ldi	r25, 0x01	; 1
    298a:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <Pt+0x1>
    298e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <Pt>
}
    2992:	00 00       	nop
    2994:	df 91       	pop	r29
    2996:	cf 91       	pop	r28
    2998:	08 95       	ret

0000299a <Stepper_CW>:

//-----------------------------------------------------------------------------

void Stepper_CW(void) {
    299a:	cf 93       	push	r28
    299c:	df 93       	push	r29
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
    29a2:	6c 97       	sbiw	r28, 0x1c	; 28
    29a4:	0f b6       	in	r0, 0x3f	; 63
    29a6:	f8 94       	cli
    29a8:	de bf       	out	0x3e, r29	; 62
    29aa:	0f be       	out	0x3f, r0	; 63
    29ac:	cd bf       	out	0x3d, r28	; 61
	Pt = Pt->Next[CLOCKWISE];
    29ae:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <Pt>
    29b2:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <Pt+0x1>
    29b6:	fc 01       	movw	r30, r24
    29b8:	83 81       	ldd	r24, Z+3	; 0x03
    29ba:	94 81       	ldd	r25, Z+4	; 0x04
    29bc:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <Pt+0x1>
    29c0:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <Pt>
	SETBIT(STEPPER,(Pt->Out << 2));
    29c4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <Pt>
    29c8:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <Pt+0x1>
    29cc:	fc 01       	movw	r30, r24
    29ce:	80 81       	ld	r24, Z
    29d0:	88 2f       	mov	r24, r24
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	ac 01       	movw	r20, r24
    29d6:	44 0f       	add	r20, r20
    29d8:	55 1f       	adc	r21, r21
    29da:	44 0f       	add	r20, r20
    29dc:	55 1f       	adc	r21, r21
    29de:	85 e2       	ldi	r24, 0x25	; 37
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	25 e2       	ldi	r18, 0x25	; 37
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	f9 01       	movw	r30, r18
    29e8:	20 81       	ld	r18, Z
    29ea:	32 2f       	mov	r19, r18
    29ec:	24 2f       	mov	r18, r20
    29ee:	23 2b       	or	r18, r19
    29f0:	fc 01       	movw	r30, r24
    29f2:	20 83       	st	Z, r18
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	a0 ea       	ldi	r26, 0xA0	; 160
    29fa:	b1 e4       	ldi	r27, 0x41	; 65
    29fc:	89 83       	std	Y+1, r24	; 0x01
    29fe:	9a 83       	std	Y+2, r25	; 0x02
    2a00:	ab 83       	std	Y+3, r26	; 0x03
    2a02:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	4a ef       	ldi	r20, 0xFA	; 250
    2a0a:	54 e4       	ldi	r21, 0x44	; 68
    2a0c:	69 81       	ldd	r22, Y+1	; 0x01
    2a0e:	7a 81       	ldd	r23, Y+2	; 0x02
    2a10:	8b 81       	ldd	r24, Y+3	; 0x03
    2a12:	9c 81       	ldd	r25, Y+4	; 0x04
    2a14:	ed d2       	rcall	.+1498   	; 0x2ff0 <__mulsf3>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	8b 8b       	std	Y+19, r24	; 0x13
    2a1c:	9c 8b       	std	Y+20, r25	; 0x14
    2a1e:	ad 8b       	std	Y+21, r26	; 0x15
    2a20:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	40 e8       	ldi	r20, 0x80	; 128
    2a28:	5f e3       	ldi	r21, 0x3F	; 63
    2a2a:	6b 89       	ldd	r22, Y+19	; 0x13
    2a2c:	7c 89       	ldd	r23, Y+20	; 0x14
    2a2e:	8d 89       	ldd	r24, Y+21	; 0x15
    2a30:	9e 89       	ldd	r25, Y+22	; 0x16
    2a32:	5d d2       	rcall	.+1210   	; 0x2eee <__cmpsf2>
    2a34:	88 23       	and	r24, r24
    2a36:	2c f4       	brge	.+10     	; 0x2a42 <Stepper_CW+0xa8>
		__ticks = 1;
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	98 8f       	std	Y+24, r25	; 0x18
    2a3e:	8f 8b       	std	Y+23, r24	; 0x17
    2a40:	3b c0       	rjmp	.+118    	; 0x2ab8 <Stepper_CW+0x11e>
	else if (__tmp > 65535)
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	3f ef       	ldi	r19, 0xFF	; 255
    2a46:	4f e7       	ldi	r20, 0x7F	; 127
    2a48:	57 e4       	ldi	r21, 0x47	; 71
    2a4a:	6b 89       	ldd	r22, Y+19	; 0x13
    2a4c:	7c 89       	ldd	r23, Y+20	; 0x14
    2a4e:	8d 89       	ldd	r24, Y+21	; 0x15
    2a50:	9e 89       	ldd	r25, Y+22	; 0x16
    2a52:	ca d2       	rcall	.+1428   	; 0x2fe8 <__gesf2>
    2a54:	18 16       	cp	r1, r24
    2a56:	3c f5       	brge	.+78     	; 0x2aa6 <Stepper_CW+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e2       	ldi	r20, 0x20	; 32
    2a5e:	51 e4       	ldi	r21, 0x41	; 65
    2a60:	69 81       	ldd	r22, Y+1	; 0x01
    2a62:	7a 81       	ldd	r23, Y+2	; 0x02
    2a64:	8b 81       	ldd	r24, Y+3	; 0x03
    2a66:	9c 81       	ldd	r25, Y+4	; 0x04
    2a68:	c3 d2       	rcall	.+1414   	; 0x2ff0 <__mulsf3>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	bc 01       	movw	r22, r24
    2a70:	cd 01       	movw	r24, r26
    2a72:	41 d2       	rcall	.+1154   	; 0x2ef6 <__fixunssfsi>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	98 8f       	std	Y+24, r25	; 0x18
    2a7a:	8f 8b       	std	Y+23, r24	; 0x17
    2a7c:	0f c0       	rjmp	.+30     	; 0x2a9c <Stepper_CW+0x102>
    2a7e:	88 ec       	ldi	r24, 0xC8	; 200
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	9a 8f       	std	Y+26, r25	; 0x1a
    2a84:	89 8f       	std	Y+25, r24	; 0x19
    2a86:	89 8d       	ldd	r24, Y+25	; 0x19
    2a88:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	f1 f7       	brne	.-4      	; 0x2a8a <Stepper_CW+0xf0>
    2a8e:	9a 8f       	std	Y+26, r25	; 0x1a
    2a90:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a92:	8f 89       	ldd	r24, Y+23	; 0x17
    2a94:	98 8d       	ldd	r25, Y+24	; 0x18
    2a96:	01 97       	sbiw	r24, 0x01	; 1
    2a98:	98 8f       	std	Y+24, r25	; 0x18
    2a9a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa0:	89 2b       	or	r24, r25
    2aa2:	69 f7       	brne	.-38     	; 0x2a7e <Stepper_CW+0xe4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa4:	13 c0       	rjmp	.+38     	; 0x2acc <Stepper_CW+0x132>
    2aa6:	6b 89       	ldd	r22, Y+19	; 0x13
    2aa8:	7c 89       	ldd	r23, Y+20	; 0x14
    2aaa:	8d 89       	ldd	r24, Y+21	; 0x15
    2aac:	9e 89       	ldd	r25, Y+22	; 0x16
    2aae:	23 d2       	rcall	.+1094   	; 0x2ef6 <__fixunssfsi>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	98 8f       	std	Y+24, r25	; 0x18
    2ab6:	8f 8b       	std	Y+23, r24	; 0x17
    2ab8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aba:	98 8d       	ldd	r25, Y+24	; 0x18
    2abc:	9c 8f       	std	Y+28, r25	; 0x1c
    2abe:	8b 8f       	std	Y+27, r24	; 0x1b
    2ac0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ac2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	f1 f7       	brne	.-4      	; 0x2ac4 <Stepper_CW+0x12a>
    2ac8:	9c 8f       	std	Y+28, r25	; 0x1c
    2aca:	8b 8f       	std	Y+27, r24	; 0x1b

	_delay_ms(STEPPER_DELAY);
	CLEARBIT(STEPPER,(Pt->Out << 2));
    2acc:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <Pt>
    2ad0:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <Pt+0x1>
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	80 81       	ld	r24, Z
    2ad8:	88 2f       	mov	r24, r24
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	88 0f       	add	r24, r24
    2ade:	99 1f       	adc	r25, r25
    2ae0:	88 0f       	add	r24, r24
    2ae2:	99 1f       	adc	r25, r25
    2ae4:	ac 01       	movw	r20, r24
    2ae6:	40 95       	com	r20
    2ae8:	50 95       	com	r21
    2aea:	85 e2       	ldi	r24, 0x25	; 37
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	25 e2       	ldi	r18, 0x25	; 37
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	f9 01       	movw	r30, r18
    2af4:	20 81       	ld	r18, Z
    2af6:	32 2f       	mov	r19, r18
    2af8:	24 2f       	mov	r18, r20
    2afa:	23 23       	and	r18, r19
    2afc:	fc 01       	movw	r30, r24
    2afe:	20 83       	st	Z, r18
	
	Pt = Pt->Next[CLOCKWISE];
    2b00:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <Pt>
    2b04:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <Pt+0x1>
    2b08:	fc 01       	movw	r30, r24
    2b0a:	83 81       	ldd	r24, Z+3	; 0x03
    2b0c:	94 81       	ldd	r25, Z+4	; 0x04
    2b0e:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <Pt+0x1>
    2b12:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <Pt>
	SETBIT(STEPPER,(Pt->Out << 2));
    2b16:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <Pt>
    2b1a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <Pt+0x1>
    2b1e:	fc 01       	movw	r30, r24
    2b20:	80 81       	ld	r24, Z
    2b22:	88 2f       	mov	r24, r24
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	ac 01       	movw	r20, r24
    2b28:	44 0f       	add	r20, r20
    2b2a:	55 1f       	adc	r21, r21
    2b2c:	44 0f       	add	r20, r20
    2b2e:	55 1f       	adc	r21, r21
    2b30:	85 e2       	ldi	r24, 0x25	; 37
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	25 e2       	ldi	r18, 0x25	; 37
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	f9 01       	movw	r30, r18
    2b3a:	20 81       	ld	r18, Z
    2b3c:	32 2f       	mov	r19, r18
    2b3e:	24 2f       	mov	r18, r20
    2b40:	23 2b       	or	r18, r19
    2b42:	fc 01       	movw	r30, r24
    2b44:	20 83       	st	Z, r18
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	a0 ea       	ldi	r26, 0xA0	; 160
    2b4c:	b1 e4       	ldi	r27, 0x41	; 65
    2b4e:	8d 83       	std	Y+5, r24	; 0x05
    2b50:	9e 83       	std	Y+6, r25	; 0x06
    2b52:	af 83       	std	Y+7, r26	; 0x07
    2b54:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	4a ef       	ldi	r20, 0xFA	; 250
    2b5c:	54 e4       	ldi	r21, 0x44	; 68
    2b5e:	6d 81       	ldd	r22, Y+5	; 0x05
    2b60:	7e 81       	ldd	r23, Y+6	; 0x06
    2b62:	8f 81       	ldd	r24, Y+7	; 0x07
    2b64:	98 85       	ldd	r25, Y+8	; 0x08
    2b66:	44 d2       	rcall	.+1160   	; 0x2ff0 <__mulsf3>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	89 87       	std	Y+9, r24	; 0x09
    2b6e:	9a 87       	std	Y+10, r25	; 0x0a
    2b70:	ab 87       	std	Y+11, r26	; 0x0b
    2b72:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	40 e8       	ldi	r20, 0x80	; 128
    2b7a:	5f e3       	ldi	r21, 0x3F	; 63
    2b7c:	69 85       	ldd	r22, Y+9	; 0x09
    2b7e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2b80:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b82:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b84:	b4 d1       	rcall	.+872    	; 0x2eee <__cmpsf2>
    2b86:	88 23       	and	r24, r24
    2b88:	2c f4       	brge	.+10     	; 0x2b94 <Stepper_CW+0x1fa>
		__ticks = 1;
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	9e 87       	std	Y+14, r25	; 0x0e
    2b90:	8d 87       	std	Y+13, r24	; 0x0d
    2b92:	3b c0       	rjmp	.+118    	; 0x2c0a <Stepper_CW+0x270>
	else if (__tmp > 65535)
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	3f ef       	ldi	r19, 0xFF	; 255
    2b98:	4f e7       	ldi	r20, 0x7F	; 127
    2b9a:	57 e4       	ldi	r21, 0x47	; 71
    2b9c:	69 85       	ldd	r22, Y+9	; 0x09
    2b9e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ba0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ba2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ba4:	21 d2       	rcall	.+1090   	; 0x2fe8 <__gesf2>
    2ba6:	18 16       	cp	r1, r24
    2ba8:	3c f5       	brge	.+78     	; 0x2bf8 <Stepper_CW+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	40 e2       	ldi	r20, 0x20	; 32
    2bb0:	51 e4       	ldi	r21, 0x41	; 65
    2bb2:	6d 81       	ldd	r22, Y+5	; 0x05
    2bb4:	7e 81       	ldd	r23, Y+6	; 0x06
    2bb6:	8f 81       	ldd	r24, Y+7	; 0x07
    2bb8:	98 85       	ldd	r25, Y+8	; 0x08
    2bba:	1a d2       	rcall	.+1076   	; 0x2ff0 <__mulsf3>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	bc 01       	movw	r22, r24
    2bc2:	cd 01       	movw	r24, r26
    2bc4:	98 d1       	rcall	.+816    	; 0x2ef6 <__fixunssfsi>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	9e 87       	std	Y+14, r25	; 0x0e
    2bcc:	8d 87       	std	Y+13, r24	; 0x0d
    2bce:	0f c0       	rjmp	.+30     	; 0x2bee <Stepper_CW+0x254>
    2bd0:	88 ec       	ldi	r24, 0xC8	; 200
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	98 8b       	std	Y+16, r25	; 0x10
    2bd6:	8f 87       	std	Y+15, r24	; 0x0f
    2bd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bda:	98 89       	ldd	r25, Y+16	; 0x10
    2bdc:	01 97       	sbiw	r24, 0x01	; 1
    2bde:	f1 f7       	brne	.-4      	; 0x2bdc <Stepper_CW+0x242>
    2be0:	98 8b       	std	Y+16, r25	; 0x10
    2be2:	8f 87       	std	Y+15, r24	; 0x0f
    2be4:	8d 85       	ldd	r24, Y+13	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	9e 87       	std	Y+14, r25	; 0x0e
    2bec:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf2:	89 2b       	or	r24, r25
    2bf4:	69 f7       	brne	.-38     	; 0x2bd0 <Stepper_CW+0x236>
    2bf6:	13 c0       	rjmp	.+38     	; 0x2c1e <Stepper_CW+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf8:	69 85       	ldd	r22, Y+9	; 0x09
    2bfa:	7a 85       	ldd	r23, Y+10	; 0x0a
    2bfc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bfe:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c00:	7a d1       	rcall	.+756    	; 0x2ef6 <__fixunssfsi>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	9e 87       	std	Y+14, r25	; 0x0e
    2c08:	8d 87       	std	Y+13, r24	; 0x0d
    2c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c0e:	9a 8b       	std	Y+18, r25	; 0x12
    2c10:	89 8b       	std	Y+17, r24	; 0x11
    2c12:	89 89       	ldd	r24, Y+17	; 0x11
    2c14:	9a 89       	ldd	r25, Y+18	; 0x12
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	f1 f7       	brne	.-4      	; 0x2c16 <Stepper_CW+0x27c>
    2c1a:	9a 8b       	std	Y+18, r25	; 0x12
    2c1c:	89 8b       	std	Y+17, r24	; 0x11
    2c1e:	85 e2       	ldi	r24, 0x25	; 37

	_delay_ms(STEPPER_DELAY);
	CLEARBIT(STEPPER,((1 << PB5) | (1 << PB4) | (1 << PB3) | (1 << PB2)));
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	25 e2       	ldi	r18, 0x25	; 37
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	f9 01       	movw	r30, r18
    2c28:	20 81       	ld	r18, Z
    2c2a:	23 7c       	andi	r18, 0xC3	; 195
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	20 83       	st	Z, r18
    2c30:	00 00       	nop
}
    2c32:	6c 96       	adiw	r28, 0x1c	; 28
    2c34:	0f b6       	in	r0, 0x3f	; 63
    2c36:	f8 94       	cli
    2c38:	de bf       	out	0x3e, r29	; 62
    2c3a:	0f be       	out	0x3f, r0	; 63
    2c3c:	cd bf       	out	0x3d, r28	; 61
    2c3e:	df 91       	pop	r29
    2c40:	cf 91       	pop	r28
    2c42:	08 95       	ret

00002c44 <Stepper_CCW>:
    2c44:	cf 93       	push	r28

//-----------------------------------------------------------------------------

void Stepper_CCW(void) {
    2c46:	df 93       	push	r29
    2c48:	cd b7       	in	r28, 0x3d	; 61
    2c4a:	de b7       	in	r29, 0x3e	; 62
    2c4c:	6c 97       	sbiw	r28, 0x1c	; 28
    2c4e:	0f b6       	in	r0, 0x3f	; 63
    2c50:	f8 94       	cli
    2c52:	de bf       	out	0x3e, r29	; 62
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	cd bf       	out	0x3d, r28	; 61
    2c58:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <Pt>
	Pt = Pt->Next[COUNTERCLOCKWISE];
    2c5c:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <Pt+0x1>
    2c60:	fc 01       	movw	r30, r24
    2c62:	81 81       	ldd	r24, Z+1	; 0x01
    2c64:	92 81       	ldd	r25, Z+2	; 0x02
    2c66:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <Pt+0x1>
    2c6a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <Pt>
    2c6e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <Pt>
	SETBIT(STEPPER,(Pt->Out << 2));
    2c72:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <Pt+0x1>
    2c76:	fc 01       	movw	r30, r24
    2c78:	80 81       	ld	r24, Z
    2c7a:	88 2f       	mov	r24, r24
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	ac 01       	movw	r20, r24
    2c80:	44 0f       	add	r20, r20
    2c82:	55 1f       	adc	r21, r21
    2c84:	44 0f       	add	r20, r20
    2c86:	55 1f       	adc	r21, r21
    2c88:	85 e2       	ldi	r24, 0x25	; 37
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	25 e2       	ldi	r18, 0x25	; 37
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	f9 01       	movw	r30, r18
    2c92:	20 81       	ld	r18, Z
    2c94:	32 2f       	mov	r19, r18
    2c96:	24 2f       	mov	r18, r20
    2c98:	23 2b       	or	r18, r19
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	20 83       	st	Z, r18
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	a0 ea       	ldi	r26, 0xA0	; 160
    2ca4:	b1 e4       	ldi	r27, 0x41	; 65
    2ca6:	89 83       	std	Y+1, r24	; 0x01
    2ca8:	9a 83       	std	Y+2, r25	; 0x02
    2caa:	ab 83       	std	Y+3, r26	; 0x03
    2cac:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	4a ef       	ldi	r20, 0xFA	; 250
    2cb4:	54 e4       	ldi	r21, 0x44	; 68
    2cb6:	69 81       	ldd	r22, Y+1	; 0x01
    2cb8:	7a 81       	ldd	r23, Y+2	; 0x02
    2cba:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cbe:	98 d1       	rcall	.+816    	; 0x2ff0 <__mulsf3>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	8b 8b       	std	Y+19, r24	; 0x13
    2cc6:	9c 8b       	std	Y+20, r25	; 0x14
    2cc8:	ad 8b       	std	Y+21, r26	; 0x15
    2cca:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	40 e8       	ldi	r20, 0x80	; 128
    2cd2:	5f e3       	ldi	r21, 0x3F	; 63
    2cd4:	6b 89       	ldd	r22, Y+19	; 0x13
    2cd6:	7c 89       	ldd	r23, Y+20	; 0x14
    2cd8:	8d 89       	ldd	r24, Y+21	; 0x15
    2cda:	9e 89       	ldd	r25, Y+22	; 0x16
    2cdc:	08 d1       	rcall	.+528    	; 0x2eee <__cmpsf2>
    2cde:	88 23       	and	r24, r24
    2ce0:	2c f4       	brge	.+10     	; 0x2cec <Stepper_CCW+0xa8>
		__ticks = 1;
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	98 8f       	std	Y+24, r25	; 0x18
    2ce8:	8f 8b       	std	Y+23, r24	; 0x17
    2cea:	3b c0       	rjmp	.+118    	; 0x2d62 <Stepper_CCW+0x11e>
	else if (__tmp > 65535)
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	3f ef       	ldi	r19, 0xFF	; 255
    2cf0:	4f e7       	ldi	r20, 0x7F	; 127
    2cf2:	57 e4       	ldi	r21, 0x47	; 71
    2cf4:	6b 89       	ldd	r22, Y+19	; 0x13
    2cf6:	7c 89       	ldd	r23, Y+20	; 0x14
    2cf8:	8d 89       	ldd	r24, Y+21	; 0x15
    2cfa:	9e 89       	ldd	r25, Y+22	; 0x16
    2cfc:	75 d1       	rcall	.+746    	; 0x2fe8 <__gesf2>
    2cfe:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d00:	3c f5       	brge	.+78     	; 0x2d50 <Stepper_CCW+0x10c>
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	40 e2       	ldi	r20, 0x20	; 32
    2d08:	51 e4       	ldi	r21, 0x41	; 65
    2d0a:	69 81       	ldd	r22, Y+1	; 0x01
    2d0c:	7a 81       	ldd	r23, Y+2	; 0x02
    2d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d10:	9c 81       	ldd	r25, Y+4	; 0x04
    2d12:	6e d1       	rcall	.+732    	; 0x2ff0 <__mulsf3>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	bc 01       	movw	r22, r24
    2d1a:	cd 01       	movw	r24, r26
    2d1c:	ec d0       	rcall	.+472    	; 0x2ef6 <__fixunssfsi>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	98 8f       	std	Y+24, r25	; 0x18
    2d24:	8f 8b       	std	Y+23, r24	; 0x17
    2d26:	0f c0       	rjmp	.+30     	; 0x2d46 <Stepper_CCW+0x102>
    2d28:	88 ec       	ldi	r24, 0xC8	; 200
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	9a 8f       	std	Y+26, r25	; 0x1a
    2d2e:	89 8f       	std	Y+25, r24	; 0x19
    2d30:	89 8d       	ldd	r24, Y+25	; 0x19
    2d32:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d34:	01 97       	sbiw	r24, 0x01	; 1
    2d36:	f1 f7       	brne	.-4      	; 0x2d34 <Stepper_CCW+0xf0>
    2d38:	9a 8f       	std	Y+26, r25	; 0x1a
    2d3a:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	98 8f       	std	Y+24, r25	; 0x18
    2d44:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d46:	8f 89       	ldd	r24, Y+23	; 0x17
    2d48:	98 8d       	ldd	r25, Y+24	; 0x18
    2d4a:	89 2b       	or	r24, r25
    2d4c:	69 f7       	brne	.-38     	; 0x2d28 <Stepper_CCW+0xe4>
    2d4e:	13 c0       	rjmp	.+38     	; 0x2d76 <Stepper_CCW+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d50:	6b 89       	ldd	r22, Y+19	; 0x13
    2d52:	7c 89       	ldd	r23, Y+20	; 0x14
    2d54:	8d 89       	ldd	r24, Y+21	; 0x15
    2d56:	9e 89       	ldd	r25, Y+22	; 0x16
    2d58:	ce d0       	rcall	.+412    	; 0x2ef6 <__fixunssfsi>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	98 8f       	std	Y+24, r25	; 0x18
    2d60:	8f 8b       	std	Y+23, r24	; 0x17
    2d62:	8f 89       	ldd	r24, Y+23	; 0x17
    2d64:	98 8d       	ldd	r25, Y+24	; 0x18
    2d66:	9c 8f       	std	Y+28, r25	; 0x1c
    2d68:	8b 8f       	std	Y+27, r24	; 0x1b
    2d6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <Stepper_CCW+0x12a>
    2d72:	9c 8f       	std	Y+28, r25	; 0x1c
    2d74:	8b 8f       	std	Y+27, r24	; 0x1b
    2d76:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <Pt>

	_delay_ms(STEPPER_DELAY);
	CLEARBIT(STEPPER,(Pt->Out << 2));
    2d7a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <Pt+0x1>
    2d7e:	fc 01       	movw	r30, r24
    2d80:	80 81       	ld	r24, Z
    2d82:	88 2f       	mov	r24, r24
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	88 0f       	add	r24, r24
    2d88:	99 1f       	adc	r25, r25
    2d8a:	88 0f       	add	r24, r24
    2d8c:	99 1f       	adc	r25, r25
    2d8e:	ac 01       	movw	r20, r24
    2d90:	40 95       	com	r20
    2d92:	50 95       	com	r21
    2d94:	85 e2       	ldi	r24, 0x25	; 37
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	25 e2       	ldi	r18, 0x25	; 37
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	f9 01       	movw	r30, r18
    2d9e:	20 81       	ld	r18, Z
    2da0:	32 2f       	mov	r19, r18
    2da2:	24 2f       	mov	r18, r20
    2da4:	23 23       	and	r18, r19
    2da6:	fc 01       	movw	r30, r24
    2da8:	20 83       	st	Z, r18
    2daa:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <Pt>
	
	Pt = Pt->Next[COUNTERCLOCKWISE];
    2dae:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <Pt+0x1>
    2db2:	fc 01       	movw	r30, r24
    2db4:	81 81       	ldd	r24, Z+1	; 0x01
    2db6:	92 81       	ldd	r25, Z+2	; 0x02
    2db8:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <Pt+0x1>
    2dbc:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <Pt>
    2dc0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <Pt>
	SETBIT(STEPPER,(Pt->Out << 2));
    2dc4:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <Pt+0x1>
    2dc8:	fc 01       	movw	r30, r24
    2dca:	80 81       	ld	r24, Z
    2dcc:	88 2f       	mov	r24, r24
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	ac 01       	movw	r20, r24
    2dd2:	44 0f       	add	r20, r20
    2dd4:	55 1f       	adc	r21, r21
    2dd6:	44 0f       	add	r20, r20
    2dd8:	55 1f       	adc	r21, r21
    2dda:	85 e2       	ldi	r24, 0x25	; 37
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	25 e2       	ldi	r18, 0x25	; 37
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	f9 01       	movw	r30, r18
    2de4:	20 81       	ld	r18, Z
    2de6:	32 2f       	mov	r19, r18
    2de8:	24 2f       	mov	r18, r20
    2dea:	23 2b       	or	r18, r19
    2dec:	fc 01       	movw	r30, r24
    2dee:	20 83       	st	Z, r18
    2df0:	80 e0       	ldi	r24, 0x00	; 0
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	a0 ea       	ldi	r26, 0xA0	; 160
    2df6:	b1 e4       	ldi	r27, 0x41	; 65
    2df8:	8d 83       	std	Y+5, r24	; 0x05
    2dfa:	9e 83       	std	Y+6, r25	; 0x06
    2dfc:	af 83       	std	Y+7, r26	; 0x07
    2dfe:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	4a ef       	ldi	r20, 0xFA	; 250
    2e06:	54 e4       	ldi	r21, 0x44	; 68
    2e08:	6d 81       	ldd	r22, Y+5	; 0x05
    2e0a:	7e 81       	ldd	r23, Y+6	; 0x06
    2e0c:	8f 81       	ldd	r24, Y+7	; 0x07
    2e0e:	98 85       	ldd	r25, Y+8	; 0x08
    2e10:	ef d0       	rcall	.+478    	; 0x2ff0 <__mulsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	89 87       	std	Y+9, r24	; 0x09
    2e18:	9a 87       	std	Y+10, r25	; 0x0a
    2e1a:	ab 87       	std	Y+11, r26	; 0x0b
    2e1c:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	40 e8       	ldi	r20, 0x80	; 128
    2e24:	5f e3       	ldi	r21, 0x3F	; 63
    2e26:	69 85       	ldd	r22, Y+9	; 0x09
    2e28:	7a 85       	ldd	r23, Y+10	; 0x0a
    2e2a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e2e:	5f d0       	rcall	.+190    	; 0x2eee <__cmpsf2>
    2e30:	88 23       	and	r24, r24
    2e32:	2c f4       	brge	.+10     	; 0x2e3e <Stepper_CCW+0x1fa>
		__ticks = 1;
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	9e 87       	std	Y+14, r25	; 0x0e
    2e3a:	8d 87       	std	Y+13, r24	; 0x0d
	else if (__tmp > 65535)
    2e3c:	3b c0       	rjmp	.+118    	; 0x2eb4 <Stepper_CCW+0x270>
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	3f ef       	ldi	r19, 0xFF	; 255
    2e42:	4f e7       	ldi	r20, 0x7F	; 127
    2e44:	57 e4       	ldi	r21, 0x47	; 71
    2e46:	69 85       	ldd	r22, Y+9	; 0x09
    2e48:	7a 85       	ldd	r23, Y+10	; 0x0a
    2e4a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e4c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e4e:	cc d0       	rcall	.+408    	; 0x2fe8 <__gesf2>
    2e50:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e52:	3c f5       	brge	.+78     	; 0x2ea2 <Stepper_CCW+0x25e>
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	40 e2       	ldi	r20, 0x20	; 32
    2e5a:	51 e4       	ldi	r21, 0x41	; 65
    2e5c:	6d 81       	ldd	r22, Y+5	; 0x05
    2e5e:	7e 81       	ldd	r23, Y+6	; 0x06
    2e60:	8f 81       	ldd	r24, Y+7	; 0x07
    2e62:	98 85       	ldd	r25, Y+8	; 0x08
    2e64:	c5 d0       	rcall	.+394    	; 0x2ff0 <__mulsf3>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	bc 01       	movw	r22, r24
    2e6c:	cd 01       	movw	r24, r26
    2e6e:	43 d0       	rcall	.+134    	; 0x2ef6 <__fixunssfsi>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	9e 87       	std	Y+14, r25	; 0x0e
    2e76:	8d 87       	std	Y+13, r24	; 0x0d
    2e78:	0f c0       	rjmp	.+30     	; 0x2e98 <Stepper_CCW+0x254>
    2e7a:	88 ec       	ldi	r24, 0xC8	; 200
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	98 8b       	std	Y+16, r25	; 0x10
    2e80:	8f 87       	std	Y+15, r24	; 0x0f
    2e82:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e84:	98 89       	ldd	r25, Y+16	; 0x10
    2e86:	01 97       	sbiw	r24, 0x01	; 1
    2e88:	f1 f7       	brne	.-4      	; 0x2e86 <Stepper_CCW+0x242>
    2e8a:	98 8b       	std	Y+16, r25	; 0x10
    2e8c:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	9e 87       	std	Y+14, r25	; 0x0e
    2e96:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e9c:	89 2b       	or	r24, r25
    2e9e:	69 f7       	brne	.-38     	; 0x2e7a <Stepper_CCW+0x236>
    2ea0:	13 c0       	rjmp	.+38     	; 0x2ec8 <Stepper_CCW+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea2:	69 85       	ldd	r22, Y+9	; 0x09
    2ea4:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ea6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ea8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2eaa:	25 d0       	rcall	.+74     	; 0x2ef6 <__fixunssfsi>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	9e 87       	std	Y+14, r25	; 0x0e
    2eb2:	8d 87       	std	Y+13, r24	; 0x0d
    2eb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb8:	9a 8b       	std	Y+18, r25	; 0x12
    2eba:	89 8b       	std	Y+17, r24	; 0x11
    2ebc:	89 89       	ldd	r24, Y+17	; 0x11
    2ebe:	9a 89       	ldd	r25, Y+18	; 0x12
    2ec0:	01 97       	sbiw	r24, 0x01	; 1
    2ec2:	f1 f7       	brne	.-4      	; 0x2ec0 <Stepper_CCW+0x27c>
    2ec4:	9a 8b       	std	Y+18, r25	; 0x12
    2ec6:	89 8b       	std	Y+17, r24	; 0x11
    2ec8:	85 e2       	ldi	r24, 0x25	; 37

	_delay_ms(STEPPER_DELAY);
	CLEARBIT(STEPPER,((1 << PB5) | (1 << PB4) | (1 << PB3) | (1 << PB2)));
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	25 e2       	ldi	r18, 0x25	; 37
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	f9 01       	movw	r30, r18
    2ed2:	20 81       	ld	r18, Z
    2ed4:	23 7c       	andi	r18, 0xC3	; 195
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	20 83       	st	Z, r18
    2eda:	00 00       	nop
}
    2edc:	6c 96       	adiw	r28, 0x1c	; 28
    2ede:	0f b6       	in	r0, 0x3f	; 63
    2ee0:	f8 94       	cli
    2ee2:	de bf       	out	0x3e, r29	; 62
    2ee4:	0f be       	out	0x3f, r0	; 63
    2ee6:	cd bf       	out	0x3d, r28	; 61
    2ee8:	df 91       	pop	r29
    2eea:	cf 91       	pop	r28
    2eec:	08 95       	ret

00002eee <__cmpsf2>:
    2eee:	2f d0       	rcall	.+94     	; 0x2f4e <__fp_cmp>
    2ef0:	08 f4       	brcc	.+2      	; 0x2ef4 <__cmpsf2+0x6>
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	08 95       	ret

00002ef6 <__fixunssfsi>:
    2ef6:	57 d0       	rcall	.+174    	; 0x2fa6 <__fp_splitA>
    2ef8:	88 f0       	brcs	.+34     	; 0x2f1c <__fixunssfsi+0x26>
    2efa:	9f 57       	subi	r25, 0x7F	; 127
    2efc:	90 f0       	brcs	.+36     	; 0x2f22 <__fixunssfsi+0x2c>
    2efe:	b9 2f       	mov	r27, r25
    2f00:	99 27       	eor	r25, r25
    2f02:	b7 51       	subi	r27, 0x17	; 23
    2f04:	a0 f0       	brcs	.+40     	; 0x2f2e <__fixunssfsi+0x38>
    2f06:	d1 f0       	breq	.+52     	; 0x2f3c <__fixunssfsi+0x46>
    2f08:	66 0f       	add	r22, r22
    2f0a:	77 1f       	adc	r23, r23
    2f0c:	88 1f       	adc	r24, r24
    2f0e:	99 1f       	adc	r25, r25
    2f10:	1a f0       	brmi	.+6      	; 0x2f18 <__fixunssfsi+0x22>
    2f12:	ba 95       	dec	r27
    2f14:	c9 f7       	brne	.-14     	; 0x2f08 <__fixunssfsi+0x12>
    2f16:	12 c0       	rjmp	.+36     	; 0x2f3c <__fixunssfsi+0x46>
    2f18:	b1 30       	cpi	r27, 0x01	; 1
    2f1a:	81 f0       	breq	.+32     	; 0x2f3c <__fixunssfsi+0x46>
    2f1c:	5e d0       	rcall	.+188    	; 0x2fda <__fp_zero>
    2f1e:	b1 e0       	ldi	r27, 0x01	; 1
    2f20:	08 95       	ret
    2f22:	5b c0       	rjmp	.+182    	; 0x2fda <__fp_zero>
    2f24:	67 2f       	mov	r22, r23
    2f26:	78 2f       	mov	r23, r24
    2f28:	88 27       	eor	r24, r24
    2f2a:	b8 5f       	subi	r27, 0xF8	; 248
    2f2c:	39 f0       	breq	.+14     	; 0x2f3c <__fixunssfsi+0x46>
    2f2e:	b9 3f       	cpi	r27, 0xF9	; 249
    2f30:	cc f3       	brlt	.-14     	; 0x2f24 <__fixunssfsi+0x2e>
    2f32:	86 95       	lsr	r24
    2f34:	77 95       	ror	r23
    2f36:	67 95       	ror	r22
    2f38:	b3 95       	inc	r27
    2f3a:	d9 f7       	brne	.-10     	; 0x2f32 <__fixunssfsi+0x3c>
    2f3c:	3e f4       	brtc	.+14     	; 0x2f4c <__fixunssfsi+0x56>
    2f3e:	90 95       	com	r25
    2f40:	80 95       	com	r24
    2f42:	70 95       	com	r23
    2f44:	61 95       	neg	r22
    2f46:	7f 4f       	sbci	r23, 0xFF	; 255
    2f48:	8f 4f       	sbci	r24, 0xFF	; 255
    2f4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f4c:	08 95       	ret

00002f4e <__fp_cmp>:
    2f4e:	99 0f       	add	r25, r25
    2f50:	00 08       	sbc	r0, r0
    2f52:	55 0f       	add	r21, r21
    2f54:	aa 0b       	sbc	r26, r26
    2f56:	e0 e8       	ldi	r30, 0x80	; 128
    2f58:	fe ef       	ldi	r31, 0xFE	; 254
    2f5a:	16 16       	cp	r1, r22
    2f5c:	17 06       	cpc	r1, r23
    2f5e:	e8 07       	cpc	r30, r24
    2f60:	f9 07       	cpc	r31, r25
    2f62:	c0 f0       	brcs	.+48     	; 0x2f94 <__fp_cmp+0x46>
    2f64:	12 16       	cp	r1, r18
    2f66:	13 06       	cpc	r1, r19
    2f68:	e4 07       	cpc	r30, r20
    2f6a:	f5 07       	cpc	r31, r21
    2f6c:	98 f0       	brcs	.+38     	; 0x2f94 <__fp_cmp+0x46>
    2f6e:	62 1b       	sub	r22, r18
    2f70:	73 0b       	sbc	r23, r19
    2f72:	84 0b       	sbc	r24, r20
    2f74:	95 0b       	sbc	r25, r21
    2f76:	39 f4       	brne	.+14     	; 0x2f86 <__fp_cmp+0x38>
    2f78:	0a 26       	eor	r0, r26
    2f7a:	61 f0       	breq	.+24     	; 0x2f94 <__fp_cmp+0x46>
    2f7c:	23 2b       	or	r18, r19
    2f7e:	24 2b       	or	r18, r20
    2f80:	25 2b       	or	r18, r21
    2f82:	21 f4       	brne	.+8      	; 0x2f8c <__fp_cmp+0x3e>
    2f84:	08 95       	ret
    2f86:	0a 26       	eor	r0, r26
    2f88:	09 f4       	brne	.+2      	; 0x2f8c <__fp_cmp+0x3e>
    2f8a:	a1 40       	sbci	r26, 0x01	; 1
    2f8c:	a6 95       	lsr	r26
    2f8e:	8f ef       	ldi	r24, 0xFF	; 255
    2f90:	81 1d       	adc	r24, r1
    2f92:	81 1d       	adc	r24, r1
    2f94:	08 95       	ret

00002f96 <__fp_split3>:
    2f96:	57 fd       	sbrc	r21, 7
    2f98:	90 58       	subi	r25, 0x80	; 128
    2f9a:	44 0f       	add	r20, r20
    2f9c:	55 1f       	adc	r21, r21
    2f9e:	59 f0       	breq	.+22     	; 0x2fb6 <__fp_splitA+0x10>
    2fa0:	5f 3f       	cpi	r21, 0xFF	; 255
    2fa2:	71 f0       	breq	.+28     	; 0x2fc0 <__fp_splitA+0x1a>
    2fa4:	47 95       	ror	r20

00002fa6 <__fp_splitA>:
    2fa6:	88 0f       	add	r24, r24
    2fa8:	97 fb       	bst	r25, 7
    2faa:	99 1f       	adc	r25, r25
    2fac:	61 f0       	breq	.+24     	; 0x2fc6 <__fp_splitA+0x20>
    2fae:	9f 3f       	cpi	r25, 0xFF	; 255
    2fb0:	79 f0       	breq	.+30     	; 0x2fd0 <__fp_splitA+0x2a>
    2fb2:	87 95       	ror	r24
    2fb4:	08 95       	ret
    2fb6:	12 16       	cp	r1, r18
    2fb8:	13 06       	cpc	r1, r19
    2fba:	14 06       	cpc	r1, r20
    2fbc:	55 1f       	adc	r21, r21
    2fbe:	f2 cf       	rjmp	.-28     	; 0x2fa4 <__fp_split3+0xe>
    2fc0:	46 95       	lsr	r20
    2fc2:	f1 df       	rcall	.-30     	; 0x2fa6 <__fp_splitA>
    2fc4:	08 c0       	rjmp	.+16     	; 0x2fd6 <__fp_splitA+0x30>
    2fc6:	16 16       	cp	r1, r22
    2fc8:	17 06       	cpc	r1, r23
    2fca:	18 06       	cpc	r1, r24
    2fcc:	99 1f       	adc	r25, r25
    2fce:	f1 cf       	rjmp	.-30     	; 0x2fb2 <__fp_splitA+0xc>
    2fd0:	86 95       	lsr	r24
    2fd2:	71 05       	cpc	r23, r1
    2fd4:	61 05       	cpc	r22, r1
    2fd6:	08 94       	sec
    2fd8:	08 95       	ret

00002fda <__fp_zero>:
    2fda:	e8 94       	clt

00002fdc <__fp_szero>:
    2fdc:	bb 27       	eor	r27, r27
    2fde:	66 27       	eor	r22, r22
    2fe0:	77 27       	eor	r23, r23
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	97 f9       	bld	r25, 7
    2fe6:	08 95       	ret

00002fe8 <__gesf2>:
    2fe8:	b2 df       	rcall	.-156    	; 0x2f4e <__fp_cmp>
    2fea:	08 f4       	brcc	.+2      	; 0x2fee <__gesf2+0x6>
    2fec:	8f ef       	ldi	r24, 0xFF	; 255
    2fee:	08 95       	ret

00002ff0 <__mulsf3>:
    2ff0:	0b d0       	rcall	.+22     	; 0x3008 <__mulsf3x>
    2ff2:	78 c0       	rjmp	.+240    	; 0x30e4 <__fp_round>
    2ff4:	69 d0       	rcall	.+210    	; 0x30c8 <__fp_pscA>
    2ff6:	28 f0       	brcs	.+10     	; 0x3002 <__mulsf3+0x12>
    2ff8:	6e d0       	rcall	.+220    	; 0x30d6 <__fp_pscB>
    2ffa:	18 f0       	brcs	.+6      	; 0x3002 <__mulsf3+0x12>
    2ffc:	95 23       	and	r25, r21
    2ffe:	09 f0       	breq	.+2      	; 0x3002 <__mulsf3+0x12>
    3000:	5a c0       	rjmp	.+180    	; 0x30b6 <__fp_inf>
    3002:	5f c0       	rjmp	.+190    	; 0x30c2 <__fp_nan>
    3004:	11 24       	eor	r1, r1
    3006:	ea cf       	rjmp	.-44     	; 0x2fdc <__fp_szero>

00003008 <__mulsf3x>:
    3008:	c6 df       	rcall	.-116    	; 0x2f96 <__fp_split3>
    300a:	a0 f3       	brcs	.-24     	; 0x2ff4 <__mulsf3+0x4>

0000300c <__mulsf3_pse>:
    300c:	95 9f       	mul	r25, r21
    300e:	d1 f3       	breq	.-12     	; 0x3004 <__mulsf3+0x14>
    3010:	95 0f       	add	r25, r21
    3012:	50 e0       	ldi	r21, 0x00	; 0
    3014:	55 1f       	adc	r21, r21
    3016:	62 9f       	mul	r22, r18
    3018:	f0 01       	movw	r30, r0
    301a:	72 9f       	mul	r23, r18
    301c:	bb 27       	eor	r27, r27
    301e:	f0 0d       	add	r31, r0
    3020:	b1 1d       	adc	r27, r1
    3022:	63 9f       	mul	r22, r19
    3024:	aa 27       	eor	r26, r26
    3026:	f0 0d       	add	r31, r0
    3028:	b1 1d       	adc	r27, r1
    302a:	aa 1f       	adc	r26, r26
    302c:	64 9f       	mul	r22, r20
    302e:	66 27       	eor	r22, r22
    3030:	b0 0d       	add	r27, r0
    3032:	a1 1d       	adc	r26, r1
    3034:	66 1f       	adc	r22, r22
    3036:	82 9f       	mul	r24, r18
    3038:	22 27       	eor	r18, r18
    303a:	b0 0d       	add	r27, r0
    303c:	a1 1d       	adc	r26, r1
    303e:	62 1f       	adc	r22, r18
    3040:	73 9f       	mul	r23, r19
    3042:	b0 0d       	add	r27, r0
    3044:	a1 1d       	adc	r26, r1
    3046:	62 1f       	adc	r22, r18
    3048:	83 9f       	mul	r24, r19
    304a:	a0 0d       	add	r26, r0
    304c:	61 1d       	adc	r22, r1
    304e:	22 1f       	adc	r18, r18
    3050:	74 9f       	mul	r23, r20
    3052:	33 27       	eor	r19, r19
    3054:	a0 0d       	add	r26, r0
    3056:	61 1d       	adc	r22, r1
    3058:	23 1f       	adc	r18, r19
    305a:	84 9f       	mul	r24, r20
    305c:	60 0d       	add	r22, r0
    305e:	21 1d       	adc	r18, r1
    3060:	82 2f       	mov	r24, r18
    3062:	76 2f       	mov	r23, r22
    3064:	6a 2f       	mov	r22, r26
    3066:	11 24       	eor	r1, r1
    3068:	9f 57       	subi	r25, 0x7F	; 127
    306a:	50 40       	sbci	r21, 0x00	; 0
    306c:	8a f0       	brmi	.+34     	; 0x3090 <__mulsf3_pse+0x84>
    306e:	e1 f0       	breq	.+56     	; 0x30a8 <__mulsf3_pse+0x9c>
    3070:	88 23       	and	r24, r24
    3072:	4a f0       	brmi	.+18     	; 0x3086 <__mulsf3_pse+0x7a>
    3074:	ee 0f       	add	r30, r30
    3076:	ff 1f       	adc	r31, r31
    3078:	bb 1f       	adc	r27, r27
    307a:	66 1f       	adc	r22, r22
    307c:	77 1f       	adc	r23, r23
    307e:	88 1f       	adc	r24, r24
    3080:	91 50       	subi	r25, 0x01	; 1
    3082:	50 40       	sbci	r21, 0x00	; 0
    3084:	a9 f7       	brne	.-22     	; 0x3070 <__mulsf3_pse+0x64>
    3086:	9e 3f       	cpi	r25, 0xFE	; 254
    3088:	51 05       	cpc	r21, r1
    308a:	70 f0       	brcs	.+28     	; 0x30a8 <__mulsf3_pse+0x9c>
    308c:	14 c0       	rjmp	.+40     	; 0x30b6 <__fp_inf>
    308e:	a6 cf       	rjmp	.-180    	; 0x2fdc <__fp_szero>
    3090:	5f 3f       	cpi	r21, 0xFF	; 255
    3092:	ec f3       	brlt	.-6      	; 0x308e <__mulsf3_pse+0x82>
    3094:	98 3e       	cpi	r25, 0xE8	; 232
    3096:	dc f3       	brlt	.-10     	; 0x308e <__mulsf3_pse+0x82>
    3098:	86 95       	lsr	r24
    309a:	77 95       	ror	r23
    309c:	67 95       	ror	r22
    309e:	b7 95       	ror	r27
    30a0:	f7 95       	ror	r31
    30a2:	e7 95       	ror	r30
    30a4:	9f 5f       	subi	r25, 0xFF	; 255
    30a6:	c1 f7       	brne	.-16     	; 0x3098 <__mulsf3_pse+0x8c>
    30a8:	fe 2b       	or	r31, r30
    30aa:	88 0f       	add	r24, r24
    30ac:	91 1d       	adc	r25, r1
    30ae:	96 95       	lsr	r25
    30b0:	87 95       	ror	r24
    30b2:	97 f9       	bld	r25, 7
    30b4:	08 95       	ret

000030b6 <__fp_inf>:
    30b6:	97 f9       	bld	r25, 7
    30b8:	9f 67       	ori	r25, 0x7F	; 127
    30ba:	80 e8       	ldi	r24, 0x80	; 128
    30bc:	70 e0       	ldi	r23, 0x00	; 0
    30be:	60 e0       	ldi	r22, 0x00	; 0
    30c0:	08 95       	ret

000030c2 <__fp_nan>:
    30c2:	9f ef       	ldi	r25, 0xFF	; 255
    30c4:	80 ec       	ldi	r24, 0xC0	; 192
    30c6:	08 95       	ret

000030c8 <__fp_pscA>:
    30c8:	00 24       	eor	r0, r0
    30ca:	0a 94       	dec	r0
    30cc:	16 16       	cp	r1, r22
    30ce:	17 06       	cpc	r1, r23
    30d0:	18 06       	cpc	r1, r24
    30d2:	09 06       	cpc	r0, r25
    30d4:	08 95       	ret

000030d6 <__fp_pscB>:
    30d6:	00 24       	eor	r0, r0
    30d8:	0a 94       	dec	r0
    30da:	12 16       	cp	r1, r18
    30dc:	13 06       	cpc	r1, r19
    30de:	14 06       	cpc	r1, r20
    30e0:	05 06       	cpc	r0, r21
    30e2:	08 95       	ret

000030e4 <__fp_round>:
    30e4:	09 2e       	mov	r0, r25
    30e6:	03 94       	inc	r0
    30e8:	00 0c       	add	r0, r0
    30ea:	11 f4       	brne	.+4      	; 0x30f0 <__fp_round+0xc>
    30ec:	88 23       	and	r24, r24
    30ee:	52 f0       	brmi	.+20     	; 0x3104 <__fp_round+0x20>
    30f0:	bb 0f       	add	r27, r27
    30f2:	40 f4       	brcc	.+16     	; 0x3104 <__fp_round+0x20>
    30f4:	bf 2b       	or	r27, r31
    30f6:	11 f4       	brne	.+4      	; 0x30fc <__fp_round+0x18>
    30f8:	60 ff       	sbrs	r22, 0
    30fa:	04 c0       	rjmp	.+8      	; 0x3104 <__fp_round+0x20>
    30fc:	6f 5f       	subi	r22, 0xFF	; 255
    30fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3100:	8f 4f       	sbci	r24, 0xFF	; 255
    3102:	9f 4f       	sbci	r25, 0xFF	; 255
    3104:	08 95       	ret

00003106 <__divmodhi4>:
    3106:	97 fb       	bst	r25, 7
    3108:	07 2e       	mov	r0, r23
    310a:	16 f4       	brtc	.+4      	; 0x3110 <__divmodhi4+0xa>
    310c:	00 94       	com	r0
    310e:	06 d0       	rcall	.+12     	; 0x311c <__divmodhi4_neg1>
    3110:	77 fd       	sbrc	r23, 7
    3112:	08 d0       	rcall	.+16     	; 0x3124 <__divmodhi4_neg2>
    3114:	14 d0       	rcall	.+40     	; 0x313e <__udivmodhi4>
    3116:	07 fc       	sbrc	r0, 7
    3118:	05 d0       	rcall	.+10     	; 0x3124 <__divmodhi4_neg2>
    311a:	3e f4       	brtc	.+14     	; 0x312a <__divmodhi4_exit>

0000311c <__divmodhi4_neg1>:
    311c:	90 95       	com	r25
    311e:	81 95       	neg	r24
    3120:	9f 4f       	sbci	r25, 0xFF	; 255
    3122:	08 95       	ret

00003124 <__divmodhi4_neg2>:
    3124:	70 95       	com	r23
    3126:	61 95       	neg	r22
    3128:	7f 4f       	sbci	r23, 0xFF	; 255

0000312a <__divmodhi4_exit>:
    312a:	08 95       	ret

0000312c <__tablejump2__>:
    312c:	ee 0f       	add	r30, r30
    312e:	ff 1f       	adc	r31, r31
    3130:	00 24       	eor	r0, r0
    3132:	00 1c       	adc	r0, r0
    3134:	0b be       	out	0x3b, r0	; 59
    3136:	07 90       	elpm	r0, Z+
    3138:	f6 91       	elpm	r31, Z
    313a:	e0 2d       	mov	r30, r0
    313c:	09 94       	ijmp

0000313e <__udivmodhi4>:
    313e:	aa 1b       	sub	r26, r26
    3140:	bb 1b       	sub	r27, r27
    3142:	51 e1       	ldi	r21, 0x11	; 17
    3144:	07 c0       	rjmp	.+14     	; 0x3154 <__udivmodhi4_ep>

00003146 <__udivmodhi4_loop>:
    3146:	aa 1f       	adc	r26, r26
    3148:	bb 1f       	adc	r27, r27
    314a:	a6 17       	cp	r26, r22
    314c:	b7 07       	cpc	r27, r23
    314e:	10 f0       	brcs	.+4      	; 0x3154 <__udivmodhi4_ep>
    3150:	a6 1b       	sub	r26, r22
    3152:	b7 0b       	sbc	r27, r23

00003154 <__udivmodhi4_ep>:
    3154:	88 1f       	adc	r24, r24
    3156:	99 1f       	adc	r25, r25
    3158:	5a 95       	dec	r21
    315a:	a9 f7       	brne	.-22     	; 0x3146 <__udivmodhi4_loop>
    315c:	80 95       	com	r24
    315e:	90 95       	com	r25
    3160:	bc 01       	movw	r22, r24
    3162:	cd 01       	movw	r24, r26
    3164:	08 95       	ret

00003166 <_exit>:
    3166:	f8 94       	cli

00003168 <__stop_program>:
    3168:	ff cf       	rjmp	.-2      	; 0x3168 <__stop_program>

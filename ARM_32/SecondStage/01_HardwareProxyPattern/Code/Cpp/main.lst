###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.2.15995/W32 for ARM       21/Apr/2018  09:23:11
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\01_HardwareProxyPattern\Code\Cpp\main.cpp
#    Command line =  
#        -f C:\Users\Tim\AppData\Local\Temp\EW705D.tmp
#        (C:\Users\Tim\Programming\Code\ARM_32\Patterns\01_HardwareProxyPattern\Code\Cpp\main.cpp
#        -lC
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\01_HardwareProxyPattern\Code\Cpp\Debug\List
#        -lA
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\01_HardwareProxyPattern\Code\Cpp\Debug\List
#        -o
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\01_HardwareProxyPattern\Code\Cpp\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 --fpu=None --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\INC\c\DLib_Config_Normal.h" -On
#        --c++ --no_exceptions --no_rtti --no_static_destruction)
#    Locale       =  C
#    List file    =  
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\01_HardwareProxyPattern\Code\Cpp\Debug\List\main.lst
#    Object file  =  
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\01_HardwareProxyPattern\Code\Cpp\Debug\Obj\main.o
#
###############################################################################

C:\Users\Tim\Programming\Code\ARM_32\Patterns\01_HardwareProxyPattern\Code\Cpp\main.cpp
      1          #include <stdlib.h>
      2          #include <stdio.h>
      3          #include "MotorProxy.h"

   \                                 In section .text, align 2
   \   __code __interwork __softfp MotorProxy::MotorProxy()
   \                     _ZN10MotorProxyC1Ev: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x6001             STR      R1,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
      4          

   \                                 In section .text, align 4, keep-with-next
      5          int main(void) {
   \                     main: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
      6          	MotorProxy myMotor;
   \   00000002   0x4668             MOV      R0,SP
   \   00000004   0x.... 0x....      BL       _ZN10MotorProxyC1Ev
      7          	unsigned int hwAddr;
      8          
      9          	myMotor.configure(0, &hwAddr);
   \   00000008   0xAA02             ADD      R2,SP,#+8
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x.... 0x....      BL       _ZN10MotorProxy9configureEjPj
     10          	myMotor.initialize();
   \   00000010   0x4668             MOV      R0,SP
   \   00000012   0x.... 0x....      BL       _ZN10MotorProxy10initializeEv
     11          
     12          	myMotor.setMotorSpeed(FORWARD, 10);
   \   00000016   0x220A             MOVS     R2,#+10
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x.... 0x....      BL       _ZN10MotorProxy13setMotorSpeedE13DirectionTypej
     13          
     14          	printf("Motor address: 0x%X\n", &hwAddr);
   \   00000020   0xA902             ADD      R1,SP,#+8
   \   00000022   0x4810             LDR.N    R0,??main_0
   \   00000024   0x.... 0x....      BL       printf
     15          	printf("Motor direction: %d\n", myMotor.getMotorDirection());
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x.... 0x....      BL       _ZN10MotorProxy17getMotorDirectionEv
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0x0001             MOVS     R1,R0
   \   00000032   0x480D             LDR.N    R0,??main_0+0x4
   \   00000034   0x.... 0x....      BL       printf
     16          	printf("Motor speed: %d\n", myMotor.getMotorSpeed());
   \   00000038   0x4668             MOV      R0,SP
   \   0000003A   0x.... 0x....      BL       _ZN10MotorProxy13getMotorSpeedEv
   \   0000003E   0x0001             MOVS     R1,R0
   \   00000040   0x480A             LDR.N    R0,??main_0+0x8
   \   00000042   0x.... 0x....      BL       printf
     17          	printf("Motor error state: %d\n", myMotor.getMotorState());
   \   00000046   0x4668             MOV      R0,SP
   \   00000048   0x.... 0x....      BL       _ZN10MotorProxy13getMotorStateEv
   \   0000004C   0x0001             MOVS     R1,R0
   \   0000004E   0x4808             LDR.N    R0,??main_0+0xC
   \   00000050   0x.... 0x....      BL       printf
     18          
     19          	myMotor.disable();
   \   00000054   0x4668             MOV      R0,SP
   \   00000056   0x.... 0x....      BL       _ZN10MotorProxy7disableEv
     20          
     21          	myMotor.enable();
   \   0000005A   0x4668             MOV      R0,SP
   \   0000005C   0x.... 0x....      BL       _ZN10MotorProxy6enableEv
     22          
     23          	while (1) {
   \                     ??main_1: (+1)
   \   00000060   0xE7FE             B.N      ??main_1
   \   00000062   0xBF00             Nop      
   \                     ??main_0:
   \   00000064   0x........         DC32     ?_0
   \   00000068   0x........         DC32     ?_1
   \   0000006C   0x........         DC32     ?_2
   \   00000070   0x........         DC32     ?_3
     24          
     25          	}
     26          }

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x4D 0x6F          DC8 "Motor address: 0x%X\012"
   \              0x74 0x6F    
   \              0x72 0x20    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x58 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x4D 0x6F          DC8 "Motor direction: %d\012"
   \              0x74 0x6F    
   \              0x72 0x20    
   \              0x64 0x69    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x3A    
   \              0x20 0x25    
   \              0x64 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x4D 0x6F          DC8 "Motor speed: %d\012"
   \              0x74 0x6F    
   \              0x72 0x20    
   \              0x73 0x70    
   \              0x65 0x65    
   \              0x64 0x3A    
   \              0x20 0x25    
   \              0x64 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x4D 0x6F          DC8 "Motor error state: %d\012"
   \              0x74 0x6F    
   \              0x72 0x20    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x65 0x3A    
   \              0x20 0x25    
   \              0x64 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   MotorProxy::MotorProxy()
      16   main
        16   -> MotorProxy::MotorProxy()
        16   -> MotorProxy::configure(unsigned int, unsigned int *)
        16   -> MotorProxy::disable()
        16   -> MotorProxy::enable()
        16   -> MotorProxy::getMotorDirection()
        16   -> MotorProxy::getMotorSpeed()
        16   -> MotorProxy::getMotorState()
        16   -> MotorProxy::initialize()
        16   -> MotorProxy::setMotorSpeed(DirectionType, unsigned int)
        16   -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?_0
      24  ?_1
      20  ?_2
      24  ?_3
       6  MotorProxy::MotorProxy()
     116  main

 
  92 bytes in section .rodata
 122 bytes in section .text
 
 116 bytes of CODE  memory (+ 6 bytes shared)
  92 bytes of CONST memory

Errors: none
Warnings: none

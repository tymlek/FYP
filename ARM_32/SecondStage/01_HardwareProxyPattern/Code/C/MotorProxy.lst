###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.2.15995/W32 for ARM       21/Apr/2018  09:13:14
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\01_HardwareProxyPattern\Code\C\MotorProxy.c
#    Command line =  
#        -f C:\Users\Tim\AppData\Local\Temp\EW50DE.tmp
#        (C:\Users\Tim\Programming\Code\ARM_32\Patterns\01_HardwareProxyPattern\Code\C\MotorProxy.c
#        -lC
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\01_HardwareProxyPattern\Code\C\Debug\List
#        -lA
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\01_HardwareProxyPattern\Code\C\Debug\List
#        -o
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\01_HardwareProxyPattern\Code\C\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 --fpu=None --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\INC\c\DLib_Config_Normal.h" -On)
#    Locale       =  C
#    List file    =  
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\01_HardwareProxyPattern\Code\C\Debug\List\MotorProxy.lst
#    Object file  =  
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\01_HardwareProxyPattern\Code\C\Debug\Obj\MotorProxy.o
#
###############################################################################

C:\Users\Tim\Programming\Code\ARM_32\Patterns\01_HardwareProxyPattern\Code\C\MotorProxy.c
      1          #include <stdlib.h>
      2          #include "MotorProxy.h"
      3          
      4          //-----------------------------------------------------------------------------
      5          
      6          static unsigned int marshal(const struct MotorData mData);
      7          static struct MotorData unmarshal(unsigned int encodedMData);
      8          
      9          //-----------------------------------------------------------------------------
     10          

   \                                 In section .text, align 2, keep-with-next
     11          void MotorProxy_Init(MotorProxy* const me) {
     12          	me->motorAddr = NULL;
   \                     MotorProxy_Init: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x6001             STR      R1,[R0, #+0]
     13          }
   \   00000004   0x4770             BX       LR               ;; return
     14          
     15          //-----------------------------------------------------------------------------
     16          

   \                                 In section .text, align 2, keep-with-next
     17          void MotorProxy_Cleanup(MotorProxy* const me) {
     18          
     19          }
   \                     MotorProxy_Cleanup: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     20          
     21          //-----------------------------------------------------------------------------
     22          

   \                                 In section .text, align 2, keep-with-next
     23          DirectionType MotorProxy_accessMotorDirection(MotorProxy* const me) {
   \                     MotorProxy_accessMotorDirection: (+1)
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     24          	MotorData mData;
     25          
     26          	if (!me->motorAddr) {
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD101             BNE.N    ??MotorProxy_accessMotorDirection_0
     27          		return NO_DIRECTION;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE006             B.N      ??MotorProxy_accessMotorDirection_1
     28          	}
     29          
     30          mData = unmarshal(*me->motorAddr);
   \                     ??MotorProxy_accessMotorDirection_0: (+1)
   \   0000000E   0x6820             LDR      R0,[R4, #+0]
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x.... 0x....      BL       unmarshal
     31          
     32          return mData.direction;
   \   00000018   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \                     ??MotorProxy_accessMotorDirection_1: (+1)
   \   0000001C   0xB004             ADD      SP,SP,#+16
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
     33          }
     34          
     35          //-----------------------------------------------------------------------------
     36          

   \                                 In section .text, align 2, keep-with-next
     37          unsigned int MotorProxy_accessMotorSpeed(MotorProxy* const me) {
   \                     MotorProxy_accessMotorSpeed: (+1)
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     38          	MotorData mData;
     39          
     40          	if (!me->motorAddr) {
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD101             BNE.N    ??MotorProxy_accessMotorSpeed_0
     41          		return 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE005             B.N      ??MotorProxy_accessMotorSpeed_1
     42          	}
     43          
     44          	mData = unmarshal(*me->motorAddr);
   \                     ??MotorProxy_accessMotorSpeed_0: (+1)
   \   0000000E   0x6820             LDR      R0,[R4, #+0]
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x.... 0x....      BL       unmarshal
     45          
     46          	return mData.speed;
   \   00000018   0x9801             LDR      R0,[SP, #+4]
   \                     ??MotorProxy_accessMotorSpeed_1: (+1)
   \   0000001A   0xB004             ADD      SP,SP,#+16
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
     47          }
     48          
     49          //-----------------------------------------------------------------------------
     50          

   \                                 In section .text, align 2, keep-with-next
     51          unsigned int MotorProxy_accessMotorState(MotorProxy* const me) {
   \                     MotorProxy_accessMotorState: (+1)
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     52          	MotorData mData;
     53          
     54          	if (!me->motorAddr) {
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD101             BNE.N    ??MotorProxy_accessMotorState_0
     55          		return 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE006             B.N      ??MotorProxy_accessMotorState_1
     56          	}
     57          
     58          	mData = unmarshal(*me->motorAddr);
   \                     ??MotorProxy_accessMotorState_0: (+1)
   \   0000000E   0x6820             LDR      R0,[R4, #+0]
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x.... 0x....      BL       unmarshal
     59          
     60          	return mData.errorStatus;
   \   00000018   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \                     ??MotorProxy_accessMotorState_1: (+1)
   \   0000001C   0xB004             ADD      SP,SP,#+16
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
     61          }
     62          
     63          //-----------------------------------------------------------------------------
     64          

   \                                 In section .text, align 2, keep-with-next
     65          void MotorProxy_clearErrorStatus(MotorProxy* const me) {
     66          	if (!me->motorAddr) {
   \                     MotorProxy_clearErrorStatus: (+1)
   \   00000000   0x6801             LDR      R1,[R0, #+0]
   \   00000002   0x2900             CMP      R1,#+0
   \   00000004   0xD005             BEQ.N    ??MotorProxy_clearErrorStatus_0
     67          		return;
     68          	}
     69          
     70          	*me->motorAddr &= 0xFF;
   \                     ??MotorProxy_clearErrorStatus_1: (+1)
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x7809             LDRB     R1,[R1, #+0]
   \   0000000A   0xF001 0x01FF      AND      R1,R1,#0xFF
   \   0000000E   0x6802             LDR      R2,[R0, #+0]
   \   00000010   0x6011             STR      R1,[R2, #+0]
     71          }
   \                     ??MotorProxy_clearErrorStatus_0: (+1)
   \   00000012   0x4770             BX       LR               ;; return
     72          
     73          //-----------------------------------------------------------------------------
     74          

   \                                 In section .text, align 2, keep-with-next
     75          void MotorProxy_configure(MotorProxy* const me, unsigned int length,
     76          	unsigned int* location) {
     77          	me->rotaryArmLength = length;
   \                     MotorProxy_configure: (+1)
   \   00000000   0x6041             STR      R1,[R0, #+4]
     78          	me->motorAddr = location;
   \   00000002   0x6002             STR      R2,[R0, #+0]
     79          }
   \   00000004   0x4770             BX       LR               ;; return
     80          
     81          //-----------------------------------------------------------------------------
     82          

   \                                 In section .text, align 2, keep-with-next
     83          void MotorProxy_disable(MotorProxy* const me) {
     84          	if (!me->motorAddr) {
   \                     MotorProxy_disable: (+1)
   \   00000000   0x6801             LDR      R1,[R0, #+0]
   \   00000002   0x2900             CMP      R1,#+0
   \   00000004   0xD006             BEQ.N    ??MotorProxy_disable_0
     85          		return;
     86          	}
     87          
     88          	*me->motorAddr &= 0xFFFE;
   \                     ??MotorProxy_disable_1: (+1)
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x680A             LDR      R2,[R1, #+0]
   \   0000000A   0xF64F 0x71FE      MOVW     R1,#+65534
   \   0000000E   0x400A             ANDS     R2,R1,R2
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0x600A             STR      R2,[R1, #+0]
     89          }
   \                     ??MotorProxy_disable_0: (+1)
   \   00000014   0x4770             BX       LR               ;; return
     90          
     91          //-----------------------------------------------------------------------------
     92          

   \                                 In section .text, align 2, keep-with-next
     93          void MotorProxy_enable(MotorProxy* const me) {
     94          	if (!me->motorAddr) {
   \                     MotorProxy_enable: (+1)
   \   00000000   0x6801             LDR      R1,[R0, #+0]
   \   00000002   0x2900             CMP      R1,#+0
   \   00000004   0xD005             BEQ.N    ??MotorProxy_enable_0
     95          		return;
     96          	}
     97          
     98          	*me->motorAddr |= 1;
   \                     ??MotorProxy_enable_1: (+1)
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   0000000E   0x6802             LDR      R2,[R0, #+0]
   \   00000010   0x6011             STR      R1,[R2, #+0]
     99          }
   \                     ??MotorProxy_enable_0: (+1)
   \   00000012   0x4770             BX       LR               ;; return
    100          
    101          //-----------------------------------------------------------------------------
    102          

   \                                 In section .text, align 2, keep-with-next
    103          void MotorProxy_initialize(MotorProxy* const me) {
   \                     MotorProxy_initialize: (+1)
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    104          	MotorData mData;
    105          
    106          	if (!me->motorAddr) {
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD025             BEQ.N    ??MotorProxy_initialize_0
    107          		return;
    108          	}
    109          
    110          	mData.on_off = 1;
   \                     ??MotorProxy_initialize_1: (+1)
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    111          	mData.direction = NO_DIRECTION;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF88D 0x0001      STRB     R0,[SP, #+1]
    112          	mData.speed = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x9001             STR      R0,[SP, #+4]
    113          	mData.errorStatus = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xF88D 0x0008      STRB     R0,[SP, #+8]
    114          	mData.noPowerError = 0;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xF88D 0x0009      STRB     R0,[SP, #+9]
    115          	mData.noTorqueError = 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xF88D 0x000A      STRB     R0,[SP, #+10]
    116          	mData.BITError = 0;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xF88D 0x000B      STRB     R0,[SP, #+11]
    117          	mData.overTemperatureError = 0;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xF88D 0x000C      STRB     R0,[SP, #+12]
    118          	mData.reservedError1 = 0;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xF88D 0x000D      STRB     R0,[SP, #+13]
    119          	mData.reservedError2 = 0;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xF88D 0x000E      STRB     R0,[SP, #+14]
    120          	mData.unknownError = 0;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0xF88D 0x000F      STRB     R0,[SP, #+15]
    121          
    122          	*me->motorAddr = marshal(mData);
   \   0000004A   0x4668             MOV      R0,SP
   \   0000004C   0xC80F             LDM      R0,{R0-R3}
   \   0000004E   0x.... 0x....      BL       marshal
   \   00000052   0x6821             LDR      R1,[R4, #+0]
   \   00000054   0x6008             STR      R0,[R1, #+0]
    123          }
   \                     ??MotorProxy_initialize_0: (+1)
   \   00000056   0xBD1F             POP      {R0-R4,PC}       ;; return
    124          
    125          //-----------------------------------------------------------------------------
    126          

   \                                 In section .text, align 2, keep-with-next
    127          void MotorProxy_writeMotorSpeed(MotorProxy* const me,
    128          	const DirectionType direction,
    129          	unsigned int speed) {
   \                     MotorProxy_writeMotorSpeed: (+1)
   \   00000000   0xE92D 0x4F70      PUSH     {R4-R6,R8-R11,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000E             MOVS     R6,R1
   \   0000000A   0x0015             MOVS     R5,R2
    130          	MotorData mData;
    131          
    132          	double dPi;
                 	       ^
Warning[Pe177]: variable "dPi" was declared but never referenced
    133          	double dArmLength;
    134          	double dSpeed;
    135          	double dAdjSpeed;
    136          
    137          	if (!me->motorAddr) {
   \   0000000C   0x6820             LDR      R0,[R4, #+0]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD035             BEQ.N    ??MotorProxy_writeMotorSpeed_0
    138          		return;
    139          	}
    140          
    141          	mData = unmarshal(*me->motorAddr);
   \                     ??MotorProxy_writeMotorSpeed_1: (+1)
   \   00000012   0x6820             LDR      R0,[R4, #+0]
   \   00000014   0x6801             LDR      R1,[R0, #+0]
   \   00000016   0xA802             ADD      R0,SP,#+8
   \   00000018   0x.... 0x....      BL       unmarshal
    142          	mData.direction = direction;
   \   0000001C   0xF88D 0x6009      STRB     R6,[SP, #+9]
    143          
    144          	if (me->rotaryArmLength > 0) {
   \   00000020   0x6860             LDR      R0,[R4, #+4]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD024             BEQ.N    ??MotorProxy_writeMotorSpeed_2
    145          		dSpeed = speed;
   \   00000026   0x0028             MOVS     R0,R5
   \   00000028   0x.... 0x....      BL       __aeabi_ui2d
   \   0000002C   0x4680             MOV      R8,R0
   \   0000002E   0x4689             MOV      R9,R1
    146          		dArmLength = me->rotaryArmLength;
   \   00000030   0x6860             LDR      R0,[R4, #+4]
   \   00000032   0x.... 0x....      BL       __aeabi_ui2d
   \   00000036   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
    147          		dAdjSpeed = dSpeed / 2.0 / 3.14159 / dArmLength * 10.0;
   \   0000003A   0x4640             MOV      R0,R8
   \   0000003C   0x4649             MOV      R1,R9
   \   0000003E   0x2200             MOVS     R2,#+0
   \   00000040   0xF05F 0x4380      MOVS     R3,#+1073741824
   \   00000044   0x.... 0x....      BL       __aeabi_ddiv
   \   00000048   0x....             LDR.N    R2,??DataTable1  ;; 0xf01b866e
   \   0000004A   0x....             LDR.N    R3,??DataTable1_1  ;; 0x400921f9
   \   0000004C   0x.... 0x....      BL       __aeabi_ddiv
   \   00000050   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   00000054   0x.... 0x....      BL       __aeabi_ddiv
   \   00000058   0x2200             MOVS     R2,#+0
   \   0000005A   0x....             LDR.N    R3,??DataTable1_2  ;; 0x40240000
   \   0000005C   0x.... 0x....      BL       __aeabi_dmul
   \   00000060   0x4682             MOV      R10,R0
   \   00000062   0x468B             MOV      R11,R1
    148          		mData.speed = (int)dAdjSpeed;
   \   00000064   0x4650             MOV      R0,R10
   \   00000066   0x4659             MOV      R1,R11
   \   00000068   0x.... 0x....      BL       __aeabi_d2iz
   \   0000006C   0x9003             STR      R0,[SP, #+12]
   \   0000006E   0xE000             B.N      ??MotorProxy_writeMotorSpeed_3
    149          	}
    150          	else {
    151          		mData.speed = speed;
   \                     ??MotorProxy_writeMotorSpeed_2: (+1)
   \   00000070   0x9503             STR      R5,[SP, #+12]
    152          	}
    153          
    154          	*me->motorAddr = marshal(mData);
   \                     ??MotorProxy_writeMotorSpeed_3: (+1)
   \   00000072   0xA802             ADD      R0,SP,#+8
   \   00000074   0xC80F             LDM      R0,{R0-R3}
   \   00000076   0x.... 0x....      BL       marshal
   \   0000007A   0x6821             LDR      R1,[R4, #+0]
   \   0000007C   0x6008             STR      R0,[R1, #+0]
    155          }
   \                     ??MotorProxy_writeMotorSpeed_0: (+1)
   \   0000007E   0xB006             ADD      SP,SP,#+24
   \   00000080   0xE8BD 0x8F70      POP      {R4-R6,R8-R11,PC}  ;; return
    156          
    157          //-----------------------------------------------------------------------------
    158          

   \                                 In section .text, align 2, keep-with-next
    159          static unsigned int marshal(const struct MotorData mData) {
   \                     marshal: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
    160          	unsigned int deviceCmd;
    161          
    162          	deviceCmd = 0;
   \   00000002   0x2000             MOVS     R0,#+0
    163          	if (mData.on_off) {
   \   00000004   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD001             BEQ.N    ??marshal_0
    164          		deviceCmd |= 1;
   \   0000000C   0xF050 0x0001      ORRS     R0,R0,#0x1
    165          	}
    166          
    167          	if (mData.direction == FORWARD) {
   \                     ??marshal_0: (+1)
   \   00000010   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   00000014   0x2901             CMP      R1,#+1
   \   00000016   0xD102             BNE.N    ??marshal_1
    168          		deviceCmd |= (1 << 2);
   \   00000018   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000001C   0xE005             B.N      ??marshal_2
    169          	}
    170          	else if (mData.direction == REVERSE) {
   \                     ??marshal_1: (+1)
   \   0000001E   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   00000022   0x2902             CMP      R1,#+2
   \   00000024   0xD101             BNE.N    ??marshal_2
    171          		deviceCmd |= (1 << 1);
   \   00000026   0xF050 0x0002      ORRS     R0,R0,#0x2
    172          	}
    173          
    174          	if (mData.speed < 32 && mData.speed >= 0) {
                 	                                    ^
Warning[Pe186]: pointless comparison of unsigned integer with zero
   \                     ??marshal_2: (+1)
   \   0000002A   0x9901             LDR      R1,[SP, #+4]
   \   0000002C   0x2920             CMP      R1,#+32
   \   0000002E   0xD202             BCS.N    ??marshal_3
    175          		deviceCmd |= (mData.speed << 3);
   \   00000030   0x9901             LDR      R1,[SP, #+4]
   \   00000032   0xEA50 0x00C1      ORRS     R0,R0,R1, LSL #+3
    176          	}
    177          
    178          	if (mData.errorStatus) {
   \                     ??marshal_3: (+1)
   \   00000036   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   0000003A   0x2900             CMP      R1,#+0
   \   0000003C   0xD001             BEQ.N    ??marshal_4
    179          		deviceCmd |= (1 << 8);
   \   0000003E   0xF450 0x7080      ORRS     R0,R0,#0x100
    180          	}
    181          
    182          	if (mData.noPowerError) {
   \                     ??marshal_4: (+1)
   \   00000042   0xF89D 0x1009      LDRB     R1,[SP, #+9]
   \   00000046   0x2900             CMP      R1,#+0
   \   00000048   0xD001             BEQ.N    ??marshal_5
    183          		deviceCmd |= (1 << 9);
   \   0000004A   0xF450 0x7000      ORRS     R0,R0,#0x200
    184          	}
    185          
    186          	if (mData.noTorqueError) {
   \                     ??marshal_5: (+1)
   \   0000004E   0xF89D 0x100A      LDRB     R1,[SP, #+10]
   \   00000052   0x2900             CMP      R1,#+0
   \   00000054   0xD001             BEQ.N    ??marshal_6
    187          		deviceCmd |= (1 << 10);
   \   00000056   0xF450 0x6080      ORRS     R0,R0,#0x400
    188          	}
    189          
    190          	if (mData.BITError) {
   \                     ??marshal_6: (+1)
   \   0000005A   0xF89D 0x100B      LDRB     R1,[SP, #+11]
   \   0000005E   0x2900             CMP      R1,#+0
   \   00000060   0xD001             BEQ.N    ??marshal_7
    191          		deviceCmd |= (1 << 11);
   \   00000062   0xF450 0x6000      ORRS     R0,R0,#0x800
    192          	}
    193          
    194          	if (mData.overTemperatureError) {
   \                     ??marshal_7: (+1)
   \   00000066   0xF89D 0x100C      LDRB     R1,[SP, #+12]
   \   0000006A   0x2900             CMP      R1,#+0
   \   0000006C   0xD001             BEQ.N    ??marshal_8
    195          		deviceCmd |= (1 << 12);
   \   0000006E   0xF450 0x5080      ORRS     R0,R0,#0x1000
    196          	}
    197          
    198          	if (mData.reservedError1) {
   \                     ??marshal_8: (+1)
   \   00000072   0xF89D 0x100D      LDRB     R1,[SP, #+13]
   \   00000076   0x2900             CMP      R1,#+0
   \   00000078   0xD001             BEQ.N    ??marshal_9
    199          		deviceCmd |= (1 << 13);
   \   0000007A   0xF450 0x5000      ORRS     R0,R0,#0x2000
    200          	}
    201          
    202          	if (mData.reservedError2) {
   \                     ??marshal_9: (+1)
   \   0000007E   0xF89D 0x100E      LDRB     R1,[SP, #+14]
   \   00000082   0x2900             CMP      R1,#+0
   \   00000084   0xD001             BEQ.N    ??marshal_10
    203          		deviceCmd |= (1 << 14);
   \   00000086   0xF450 0x4080      ORRS     R0,R0,#0x4000
    204          	}
    205          
    206          	if (mData.unknownError) {
   \                     ??marshal_10: (+1)
   \   0000008A   0xF89D 0x100F      LDRB     R1,[SP, #+15]
   \   0000008E   0x2900             CMP      R1,#+0
   \   00000090   0xD001             BEQ.N    ??marshal_11
    207          		deviceCmd |= (1 << 15);
   \   00000092   0xF450 0x4000      ORRS     R0,R0,#0x8000
    208          	}
    209          
    210          	return deviceCmd;
   \                     ??marshal_11: (+1)
   \   00000096   0xB004             ADD      SP,SP,#+16
   \   00000098   0x4770             BX       LR               ;; return
    211          }
    212          
    213          //-----------------------------------------------------------------------------
    214          

   \                                 In section .text, align 2, keep-with-next
    215          static struct MotorData unmarshal(unsigned int encodedMData) {
   \                     unmarshal: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x000C             MOVS     R4,R1
    216          	MotorData mData;
    217          	int temp;
    218          
    219          	mData.on_off = encodedMData & 1;
   \   00000006   0xF014 0x0101      ANDS     R1,R4,#0x1
   \   0000000A   0xF88D 0x1000      STRB     R1,[SP, #+0]
    220          	temp = (encodedMData & (3 << 1)) >> 1;
   \   0000000E   0xF3C4 0x0541      UBFX     R5,R4,#+1,#+2
    221          
    222          	if (temp == 1) {
   \   00000012   0x2D01             CMP      R5,#+1
   \   00000014   0xD103             BNE.N    ??unmarshal_0
    223          		mData.direction = REVERSE;
   \   00000016   0x2102             MOVS     R1,#+2
   \   00000018   0xF88D 0x1001      STRB     R1,[SP, #+1]
   \   0000001C   0xE008             B.N      ??unmarshal_1
    224          	}
    225          	else if (temp == 2) {
   \                     ??unmarshal_0: (+1)
   \   0000001E   0x2D02             CMP      R5,#+2
   \   00000020   0xD103             BNE.N    ??unmarshal_2
    226          		mData.direction = FORWARD;
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0xF88D 0x1001      STRB     R1,[SP, #+1]
   \   00000028   0xE002             B.N      ??unmarshal_1
    227          	}
    228          	else {
    229          		mData.direction = NO_DIRECTION;
   \                     ??unmarshal_2: (+1)
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0xF88D 0x1001      STRB     R1,[SP, #+1]
    230          	}
    231          
    232          	mData.speed = (encodedMData & (31 << 3)) >> 3;
   \                     ??unmarshal_1: (+1)
   \   00000030   0xF3C4 0x01C4      UBFX     R1,R4,#+3,#+5
   \   00000034   0x9101             STR      R1,[SP, #+4]
    233          	mData.errorStatus = (encodedMData & (1 << 8));
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0xF88D 0x1008      STRB     R1,[SP, #+8]
    234          	mData.noPowerError = (encodedMData & (1 << 9));
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0xF88D 0x1009      STRB     R1,[SP, #+9]
    235          	mData.noTorqueError = (encodedMData & (1 << 10));
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0xF88D 0x100A      STRB     R1,[SP, #+10]
    236          	mData.BITError = (encodedMData & (1 << 11));
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0xF88D 0x100B      STRB     R1,[SP, #+11]
    237          	mData.overTemperatureError = (encodedMData & (1 << 12));
   \   0000004E   0x2100             MOVS     R1,#+0
   \   00000050   0xF88D 0x100C      STRB     R1,[SP, #+12]
    238          	mData.reservedError1 = (encodedMData & (1 << 13));
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0xF88D 0x100D      STRB     R1,[SP, #+13]
    239          	mData.reservedError2 = (encodedMData & (1 << 14));
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0xF88D 0x100E      STRB     R1,[SP, #+14]
    240          	mData.unknownError = (encodedMData & (1 << 15));
   \   00000060   0x2100             MOVS     R1,#+0
   \   00000062   0xF88D 0x100F      STRB     R1,[SP, #+15]
    241          
    242          	return mData;
   \   00000066   0x4669             MOV      R1,SP
   \   00000068   0x2210             MOVS     R2,#+16
   \   0000006A   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000006E   0xB005             ADD      SP,SP,#+20
   \   00000070   0xBD30             POP      {R4,R5,PC}       ;; return
    243          }
    244          
    245          //-----------------------------------------------------------------------------
    246          

   \                                 In section .text, align 2, keep-with-next
    247          MotorProxy* MotorProxy_Create(void) {
   \                     MotorProxy_Create: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    248          	MotorProxy* me = (MotorProxy*)malloc(sizeof(MotorProxy));
   \   00000002   0x2008             MOVS     R0,#+8
   \   00000004   0x.... 0x....      BL       malloc
   \   00000008   0x0004             MOVS     R4,R0
    249          
    250          	if (me != NULL) {
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD002             BEQ.N    ??MotorProxy_Create_0
    251          		MotorProxy_Init(me);
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       MotorProxy_Init
    252          	}
    253          
    254          	return me;
   \                     ??MotorProxy_Create_0: (+1)
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    255          }
    256          
    257          //-----------------------------------------------------------------------------
    258          

   \                                 In section .text, align 2, keep-with-next
    259          void MotorProxy_Destroy(MotorProxy* const me) {
   \                     MotorProxy_Destroy: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    260          	if (me != NULL) {
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD002             BEQ.N    ??MotorProxy_Destroy_0
    261          		MotorProxy_Cleanup(me);
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       MotorProxy_Cleanup
    262          	}
    263          
    264          	free(me);
   \                     ??MotorProxy_Destroy_0: (+1)
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       free
    265          }
   \   00000014   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0xF01B866E         DC32     0xf01b866e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x400921F9         DC32     0x400921f9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x40240000         DC32     0x40240000
    266          
    267          //-----------------------------------------------------------------------------

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   MotorProxy_Cleanup
       8   MotorProxy_Create
         8   -> MotorProxy_Init
         8   -> malloc
       8   MotorProxy_Destroy
         8   -> MotorProxy_Cleanup
         8   -> free
       0   MotorProxy_Init
      24   MotorProxy_accessMotorDirection
        24   -> unmarshal
      24   MotorProxy_accessMotorSpeed
        24   -> unmarshal
      24   MotorProxy_accessMotorState
        24   -> unmarshal
       0   MotorProxy_clearErrorStatus
       0   MotorProxy_configure
       0   MotorProxy_disable
       0   MotorProxy_enable
      24   MotorProxy_initialize
        24   -> marshal
      56   MotorProxy_writeMotorSpeed
        56   -> __aeabi_d2iz
        56   -> __aeabi_ddiv
        56   -> __aeabi_dmul
        56   -> __aeabi_ui2d
        56   -> marshal
        56   -> unmarshal
      16   marshal
      32   unmarshal
        32   -> __aeabi_memcpy4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       2  MotorProxy_Cleanup
      24  MotorProxy_Create
      22  MotorProxy_Destroy
       6  MotorProxy_Init
      32  MotorProxy_accessMotorDirection
      30  MotorProxy_accessMotorSpeed
      32  MotorProxy_accessMotorState
      20  MotorProxy_clearErrorStatus
       6  MotorProxy_configure
      22  MotorProxy_disable
      20  MotorProxy_enable
      88  MotorProxy_initialize
     132  MotorProxy_writeMotorSpeed
     154  marshal
     114  unmarshal

 
 716 bytes in section .text
 
 716 bytes of CODE memory

Errors: none
Warnings: 2

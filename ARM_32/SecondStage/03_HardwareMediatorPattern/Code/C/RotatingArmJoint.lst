###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.2.15995/W32 for ARM       21/Apr/2018  15:49:22
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\C\RotatingArmJoint.c
#    Command line =  
#        -f C:\Users\Tim\AppData\Local\Temp\EW13.tmp
#        (C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\C\RotatingArmJoint.c
#        -lC
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\C\Debug\List
#        -lA
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\C\Debug\List
#        -o
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\C\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 --fpu=None --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\INC\c\DLib_Config_Normal.h" -On)
#    Locale       =  C
#    List file    =  
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\C\Debug\List\RotatingArmJoint.lst
#    Object file  =  
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\C\Debug\Obj\RotatingArmJoint.o
#
###############################################################################

C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\C\RotatingArmJoint.c
      1          #include "RotatingArmJoint.h"
      2          

   \                                 In section .text, align 2, keep-with-next
      3          int RotatingArmJoint_getRotation(const RotatingArmJoint* const me) {
   \                     RotatingArmJoint_getRotation: (+1)
   \   00000000   0x0001             MOVS     R1,R0
      4          	if (!me) {
   \   00000002   0x2900             CMP      R1,#+0
   \   00000004   0xD102             BNE.N    ??RotatingArmJoint_getRotation_0
      5          		return -1;
   \   00000006   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000000A   0xE000             B.N      ??RotatingArmJoint_getRotation_1
      6          	}
      7          
      8          	return me->angle;
   \                     ??RotatingArmJoint_getRotation_0: (+1)
   \   0000000C   0x6808             LDR      R0,[R1, #+0]
   \                     ??RotatingArmJoint_getRotation_1: (+1)
   \   0000000E   0x4770             BX       LR               ;; return
      9          }
     10          

   \                                 In section .text, align 2, keep-with-next
     11          int RotatingArmJoint_rotate(RotatingArmJoint* const me, int x) {
   \                     RotatingArmJoint_rotate: (+1)
   \   00000000   0x0002             MOVS     R2,R0
     12          	if ((x + me->angle) < 360) {
   \   00000002   0x6810             LDR      R0,[R2, #+0]
   \   00000004   0x1840             ADDS     R0,R0,R1
   \   00000006   0xF5B0 0x7FB4      CMP      R0,#+360
   \   0000000A   0xDA04             BGE.N    ??RotatingArmJoint_rotate_0
     13          		me->angle += x;
   \   0000000C   0x6810             LDR      R0,[R2, #+0]
   \   0000000E   0x1808             ADDS     R0,R1,R0
   \   00000010   0x6010             STR      R0,[R2, #+0]
     14          		return 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE001             B.N      ??RotatingArmJoint_rotate_1
     15          	}
     16          
     17          	return -1;
   \                     ??RotatingArmJoint_rotate_0: (+1)
   \   00000016   0xF05F 0x30FF      MOVS     R0,#-1
   \                     ??RotatingArmJoint_rotate_1: (+1)
   \   0000001A   0x4770             BX       LR               ;; return
     18          }
     19          

   \                                 In section .text, align 2, keep-with-next
     20          int RotatingArmJoint_zero(RotatingArmJoint* const me) {
   \                     RotatingArmJoint_zero: (+1)
   \   00000000   0x0001             MOVS     R1,R0
     21          	me->angle = 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x6008             STR      R0,[R1, #+0]
     22          
     23          	if (me->angle == 0) {
   \   00000006   0x6808             LDR      R0,[R1, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD101             BNE.N    ??RotatingArmJoint_zero_0
     24          		return 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xE001             B.N      ??RotatingArmJoint_zero_1
     25          	}
     26          
     27          	return -1;
   \                     ??RotatingArmJoint_zero_0: (+1)
   \   00000010   0xF05F 0x30FF      MOVS     R0,#-1
   \                     ??RotatingArmJoint_zero_1: (+1)
   \   00000014   0x4770             BX       LR               ;; return
     28          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   RotatingArmJoint_getRotation
       0   RotatingArmJoint_rotate
       0   RotatingArmJoint_zero


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  RotatingArmJoint_getRotation
      28  RotatingArmJoint_rotate
      22  RotatingArmJoint_zero

 
 66 bytes in section .text
 
 66 bytes of CODE memory

Errors: none
Warnings: none

###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.2.15995/W32 for ARM       21/Apr/2018  16:22:02
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\C\RobotArmManager.c
#    Command line =  
#        -f C:\Users\Tim\AppData\Local\Temp\EWE8F6.tmp
#        (C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\C\RobotArmManager.c
#        -lC
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\C\Debug\List
#        -lA
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\C\Debug\List
#        -o
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\C\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 --fpu=None --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\INC\c\DLib_Config_Normal.h" -On)
#    Locale       =  C
#    List file    =  
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\C\Debug\List\RobotArmManager.lst
#    Object file  =  
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\C\Debug\Obj\RobotArmManager.o
#
###############################################################################

C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\C\RobotArmManager.c
      1          #include <stdlib.h>
      2          #include "RobotArmManager.h"
      3          
      4          static void cleanUpRelations(RobotArmManager* const me);
      5          

   \                                 In section .text, align 2, keep-with-next
      6          void RobotArmManager_Init(RobotArmManager* const me) {
      7          	int pos;
      8          
      9          	me->itsGraspingManipulator = NULL;
   \                     RobotArmManager_Init: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x6081             STR      R1,[R0, #+8]
     10                  me->currentStep = 0;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6001             STR      R1,[R0, #+0]
     11          
     12          	for (pos = 0; pos < 100; ++pos) {
   \   00000008   0x2100             MOVS     R1,#+0
   \                     ??RobotArmManager_Init_0: (+1)
   \   0000000A   0x2964             CMP      R1,#+100
   \   0000000C   0xDA05             BGE.N    ??RobotArmManager_Init_1
     13          		me->itsAction[pos] = NULL;
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0xEB00 0x0381      ADD      R3,R0,R1, LSL #+2
   \   00000014   0x625A             STR      R2,[R3, #+36]
     14          	}
   \   00000016   0x1C49             ADDS     R1,R1,#+1
   \   00000018   0xE7F7             B.N      ??RobotArmManager_Init_0
     15          
     16          	for (pos = 0; pos < 4; ++pos) {
   \                     ??RobotArmManager_Init_1: (+1)
   \   0000001A   0x2200             MOVS     R2,#+0
   \                     ??RobotArmManager_Init_2: (+1)
   \   0000001C   0x2A04             CMP      R2,#+4
   \   0000001E   0xDA05             BGE.N    ??RobotArmManager_Init_3
     17          		me->itsRotatingArmJoint[pos] = NULL;
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0xEB00 0x0382      ADD      R3,R0,R2, LSL #+2
   \   00000026   0x60D9             STR      R1,[R3, #+12]
     18          	}
   \   00000028   0x1C52             ADDS     R2,R2,#+1
   \   0000002A   0xE7F7             B.N      ??RobotArmManager_Init_2
     19          
     20          	for (pos = 0; pos < 2; ++pos) {
   \                     ??RobotArmManager_Init_3: (+1)
   \   0000002C   0x2100             MOVS     R1,#+0
   \                     ??RobotArmManager_Init_4: (+1)
   \   0000002E   0x2902             CMP      R1,#+2
   \   00000030   0xDA05             BGE.N    ??RobotArmManager_Init_5
     21          		me->itsSlidingArmJoint[pos] = NULL;
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0xEB00 0x0381      ADD      R3,R0,R1, LSL #+2
   \   00000038   0x61DA             STR      R2,[R3, #+28]
     22          	}
   \   0000003A   0x1C49             ADDS     R1,R1,#+1
   \   0000003C   0xE7F7             B.N      ??RobotArmManager_Init_4
     23          }
   \                     ??RobotArmManager_Init_5: (+1)
   \   0000003E   0x4770             BX       LR               ;; return
     24          

   \                                 In section .text, align 2, keep-with-next
     25          void RobotArmManager_Cleanup(RobotArmManager* const me) {
   \                     RobotArmManager_Cleanup: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     26          	cleanUpRelations(me);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       cleanUpRelations
     27          }
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
     28          

   \                                 In section .text, align 2, keep-with-next
     29          void RobotArmManager_computeTrajectory(RobotArmManager* const me, int x, int y, int z, int t) {
   \                     RobotArmManager_computeTrajectory: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
     30          	Action* ap = NULL;
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
     31          
     32          	me->nSteps = 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x6060             STR      R0,[R4, #+4]
     33          	RobotArmManager_clearItsAction(me);
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x.... 0x....      BL       RobotArmManager_clearItsAction
     34          
     35          	ap = Action_Create();
   \   0000001A   0x.... 0x....      BL       Action_Create
   \   0000001E   0x4681             MOV      R9,R0
     36          	RobotArmManager_addItsAction(me, ap);
   \   00000020   0x4649             MOV      R1,R9
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x.... 0x....      BL       RobotArmManager_addItsAction
     37          
     38          	ap->rotatingArmJoint1 = 1;
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0xF8C9 0x0000      STR      R0,[R9, #+0]
     39          	ap->rotatingArmJoint2 = 2;
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0xF8C9 0x0004      STR      R0,[R9, #+4]
     40          	ap->rotatingArmJoint3 = 3;
   \   00000034   0x2003             MOVS     R0,#+3
   \   00000036   0xF8C9 0x0008      STR      R0,[R9, #+8]
     41          	ap->rotatingArmJoint4 = 4;
   \   0000003A   0x2004             MOVS     R0,#+4
   \   0000003C   0xF8C9 0x000C      STR      R0,[R9, #+12]
     42          
     43          	ap->slidingArmJoint1 = 10;
   \   00000040   0x200A             MOVS     R0,#+10
   \   00000042   0xF8C9 0x0010      STR      R0,[R9, #+16]
     44          	ap->slidingArmJoint2 = 20;
   \   00000046   0x2014             MOVS     R0,#+20
   \   00000048   0xF8C9 0x0014      STR      R0,[R9, #+20]
     45          
     46          	ap->manipulatorForce = 0;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0xF8C9 0x0018      STR      R0,[R9, #+24]
     47          	ap->manipulatorOpen = 1;
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0xF8C9 0x001C      STR      R0,[R9, #+28]
     48          
     49          	ap = Action_Create();
   \   00000058   0x.... 0x....      BL       Action_Create
   \   0000005C   0x4682             MOV      R10,R0
     50          	RobotArmManager_addItsAction(me, ap);
   \   0000005E   0x4651             MOV      R1,R10
   \   00000060   0x0020             MOVS     R0,R4
   \   00000062   0x.... 0x....      BL       RobotArmManager_addItsAction
     51          
     52          	ap->rotatingArmJoint1 = 1;
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0xF8CA 0x0000      STR      R0,[R10, #+0]
     53          	ap->rotatingArmJoint2 = 2;
   \   0000006C   0x2002             MOVS     R0,#+2
   \   0000006E   0xF8CA 0x0004      STR      R0,[R10, #+4]
     54          	ap->rotatingArmJoint3 = 3;
   \   00000072   0x2003             MOVS     R0,#+3
   \   00000074   0xF8CA 0x0008      STR      R0,[R10, #+8]
     55          	ap->rotatingArmJoint4 = 4;
   \   00000078   0x2004             MOVS     R0,#+4
   \   0000007A   0xF8CA 0x000C      STR      R0,[R10, #+12]
     56          
     57          	ap->slidingArmJoint1 = 10;
   \   0000007E   0x200A             MOVS     R0,#+10
   \   00000080   0xF8CA 0x0010      STR      R0,[R10, #+16]
     58          	ap->slidingArmJoint2 = 20;
   \   00000084   0x2014             MOVS     R0,#+20
   \   00000086   0xF8CA 0x0014      STR      R0,[R10, #+20]
     59          
     60          	ap->manipulatorForce = 10;
   \   0000008A   0x200A             MOVS     R0,#+10
   \   0000008C   0xF8CA 0x0018      STR      R0,[R10, #+24]
     61          	ap->manipulatorOpen = 0;
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0xF8CA 0x001C      STR      R0,[R10, #+28]
     62          
     63          	ap = Action_Create();
   \   00000096   0x.... 0x....      BL       Action_Create
   \   0000009A   0x4683             MOV      R11,R0
     64          	RobotArmManager_addItsAction(me, ap);
   \   0000009C   0x4659             MOV      R1,R11
   \   0000009E   0x0020             MOVS     R0,R4
   \   000000A0   0x.... 0x....      BL       RobotArmManager_addItsAction
     65          
     66          	ap->rotatingArmJoint1 = 0;
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0xF8CB 0x0000      STR      R0,[R11, #+0]
     67          	ap->rotatingArmJoint2 = 0;
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0xF8CB 0x0004      STR      R0,[R11, #+4]
     68          	ap->rotatingArmJoint3 = 0;
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0xF8CB 0x0008      STR      R0,[R11, #+8]
     69          	ap->rotatingArmJoint4 = 0;
   \   000000B6   0x2000             MOVS     R0,#+0
   \   000000B8   0xF8CB 0x000C      STR      R0,[R11, #+12]
     70          
     71          	ap->slidingArmJoint1 = 0;
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0xF8CB 0x0010      STR      R0,[R11, #+16]
     72          	ap->slidingArmJoint2 = 0;
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0xF8CB 0x0014      STR      R0,[R11, #+20]
     73          
     74          	ap->manipulatorForce = 10;
   \   000000C8   0x200A             MOVS     R0,#+10
   \   000000CA   0xF8CB 0x0018      STR      R0,[R11, #+24]
     75          	ap->manipulatorOpen = 0;
   \   000000CE   0x2000             MOVS     R0,#+0
   \   000000D0   0xF8CB 0x001C      STR      R0,[R11, #+28]
     76          
     77          	me->nSteps = 3;
   \   000000D4   0x2003             MOVS     R0,#+3
   \   000000D6   0x6060             STR      R0,[R4, #+4]
     78          }
   \   000000D8   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
     79          

   \                                 In section .text, align 2, keep-with-next
     80          int RobotArmManager_executeStep(RobotArmManager* const me) {
   \                     RobotArmManager_executeStep: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0006             MOVS     R6,R0
     81          	int actionValue = 0;
   \   00000006   0xF05F 0x0800      MOVS     R8,#+0
     82          	int step = me->currentStep;
   \   0000000A   0x6837             LDR      R7,[R6, #+0]
     83          	int status = 0;
   \   0000000C   0x2500             MOVS     R5,#+0
     84          
     85          	if (me->itsAction[step]) {
   \   0000000E   0xEB06 0x0087      ADD      R0,R6,R7, LSL #+2
   \   00000012   0x6A40             LDR      R0,[R0, #+36]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD070             BEQ.N    ??RobotArmManager_executeStep_0
     86          		actionValue = me->itsAction[step]->rotatingArmJoint1;
   \   00000018   0xEB06 0x0087      ADD      R0,R6,R7, LSL #+2
   \   0000001C   0x6A40             LDR      R0,[R0, #+36]
   \   0000001E   0xF8D0 0x9000      LDR      R9,[R0, #+0]
     87          		status = RotatingArmJoint_rotate(me->itsRotatingArmJoint[0], actionValue);
   \   00000022   0x4649             MOV      R1,R9
   \   00000024   0x68F0             LDR      R0,[R6, #+12]
   \   00000026   0x.... 0x....      BL       RotatingArmJoint_rotate
   \   0000002A   0x0004             MOVS     R4,R0
     88          		if (status) {
   \   0000002C   0x2C00             CMP      R4,#+0
   \   0000002E   0xD001             BEQ.N    ??RobotArmManager_executeStep_1
     89          			return status;
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0xE063             B.N      ??RobotArmManager_executeStep_2
     90          		}
     91          
     92          		actionValue = me->itsAction[step]->rotatingArmJoint2;
   \                     ??RobotArmManager_executeStep_1: (+1)
   \   00000034   0xEB06 0x0087      ADD      R0,R6,R7, LSL #+2
   \   00000038   0x6A40             LDR      R0,[R0, #+36]
   \   0000003A   0xF8D0 0x8004      LDR      R8,[R0, #+4]
     93          		status = RotatingArmJoint_rotate(me->itsRotatingArmJoint[1], actionValue);
   \   0000003E   0x4641             MOV      R1,R8
   \   00000040   0x6930             LDR      R0,[R6, #+16]
   \   00000042   0x.... 0x....      BL       RotatingArmJoint_rotate
   \   00000046   0x0005             MOVS     R5,R0
     94          		if (status) {
   \   00000048   0x2D00             CMP      R5,#+0
   \   0000004A   0xD001             BEQ.N    ??RobotArmManager_executeStep_3
     95          			return status;
   \   0000004C   0x0028             MOVS     R0,R5
   \   0000004E   0xE055             B.N      ??RobotArmManager_executeStep_2
     96          		}
     97          
     98          		actionValue = me->itsAction[step]->rotatingArmJoint3;
   \                     ??RobotArmManager_executeStep_3: (+1)
   \   00000050   0xEB06 0x0087      ADD      R0,R6,R7, LSL #+2
   \   00000054   0x6A40             LDR      R0,[R0, #+36]
   \   00000056   0xF8D0 0x9008      LDR      R9,[R0, #+8]
     99          		status = RotatingArmJoint_rotate(me->itsRotatingArmJoint[2], actionValue);
   \   0000005A   0x4649             MOV      R1,R9
   \   0000005C   0x6970             LDR      R0,[R6, #+20]
   \   0000005E   0x.... 0x....      BL       RotatingArmJoint_rotate
   \   00000062   0x0004             MOVS     R4,R0
    100          		if (status) {
   \   00000064   0x2C00             CMP      R4,#+0
   \   00000066   0xD001             BEQ.N    ??RobotArmManager_executeStep_4
    101          			return status;
   \   00000068   0x0020             MOVS     R0,R4
   \   0000006A   0xE047             B.N      ??RobotArmManager_executeStep_2
    102          		}
    103          
    104          		actionValue = me->itsAction[step]->rotatingArmJoint4;
   \                     ??RobotArmManager_executeStep_4: (+1)
   \   0000006C   0xEB06 0x0087      ADD      R0,R6,R7, LSL #+2
   \   00000070   0x6A40             LDR      R0,[R0, #+36]
   \   00000072   0xF8D0 0x800C      LDR      R8,[R0, #+12]
    105          		status = RotatingArmJoint_rotate(me->itsRotatingArmJoint[3], actionValue);
   \   00000076   0x4641             MOV      R1,R8
   \   00000078   0x69B0             LDR      R0,[R6, #+24]
   \   0000007A   0x.... 0x....      BL       RotatingArmJoint_rotate
   \   0000007E   0x0005             MOVS     R5,R0
    106          		if (status) {
   \   00000080   0x2D00             CMP      R5,#+0
   \   00000082   0xD001             BEQ.N    ??RobotArmManager_executeStep_5
    107          			return status;
   \   00000084   0x0028             MOVS     R0,R5
   \   00000086   0xE039             B.N      ??RobotArmManager_executeStep_2
    108          		}
    109          
    110          		actionValue = me->itsAction[step]->slidingArmJoint1;
   \                     ??RobotArmManager_executeStep_5: (+1)
   \   00000088   0xEB06 0x0087      ADD      R0,R6,R7, LSL #+2
   \   0000008C   0x6A40             LDR      R0,[R0, #+36]
   \   0000008E   0xF8D0 0x9010      LDR      R9,[R0, #+16]
    111          		status = SlidingArmJoint_setLength(me->itsSlidingArmJoint[0], actionValue);
   \   00000092   0x4649             MOV      R1,R9
   \   00000094   0x69F0             LDR      R0,[R6, #+28]
   \   00000096   0x.... 0x....      BL       SlidingArmJoint_setLength
   \   0000009A   0x0004             MOVS     R4,R0
    112          		if (status) {
   \   0000009C   0x2C00             CMP      R4,#+0
   \   0000009E   0xD001             BEQ.N    ??RobotArmManager_executeStep_6
    113          			return status;
   \   000000A0   0x0020             MOVS     R0,R4
   \   000000A2   0xE02B             B.N      ??RobotArmManager_executeStep_2
    114          		}
    115          
    116          		actionValue = me->itsAction[step]->slidingArmJoint2;
   \                     ??RobotArmManager_executeStep_6: (+1)
   \   000000A4   0xEB06 0x0087      ADD      R0,R6,R7, LSL #+2
   \   000000A8   0x6A40             LDR      R0,[R0, #+36]
   \   000000AA   0xF8D0 0xA014      LDR      R10,[R0, #+20]
    117          		status = SlidingArmJoint_setLength(me->itsSlidingArmJoint[1], actionValue);
   \   000000AE   0x4651             MOV      R1,R10
   \   000000B0   0x6A30             LDR      R0,[R6, #+32]
   \   000000B2   0x.... 0x....      BL       SlidingArmJoint_setLength
   \   000000B6   0x0005             MOVS     R5,R0
    118          		if (status) {
   \   000000B8   0x2D00             CMP      R5,#+0
   \   000000BA   0xD001             BEQ.N    ??RobotArmManager_executeStep_7
    119          			return status;
   \   000000BC   0x0028             MOVS     R0,R5
   \   000000BE   0xE01D             B.N      ??RobotArmManager_executeStep_2
    120          		}
    121          
    122          		actionValue = me->itsAction[step]->manipulatorForce;
   \                     ??RobotArmManager_executeStep_7: (+1)
   \   000000C0   0xEB06 0x0087      ADD      R0,R6,R7, LSL #+2
   \   000000C4   0x6A40             LDR      R0,[R0, #+36]
   \   000000C6   0xF8D0 0x8018      LDR      R8,[R0, #+24]
    123          		status = GraspingManipulator_setMaxForce(me->itsGraspingManipulator, actionValue);
   \   000000CA   0x4641             MOV      R1,R8
   \   000000CC   0x68B0             LDR      R0,[R6, #+8]
   \   000000CE   0x.... 0x....      BL       GraspingManipulator_setMaxForce
   \   000000D2   0x0004             MOVS     R4,R0
    124          		if (status) {
   \   000000D4   0x2C00             CMP      R4,#+0
   \   000000D6   0xD001             BEQ.N    ??RobotArmManager_executeStep_8
    125          			return status;
   \   000000D8   0x0020             MOVS     R0,R4
   \   000000DA   0xE00F             B.N      ??RobotArmManager_executeStep_2
    126          		}
    127          
    128          		if (me->itsAction[step]->manipulatorOpen) {
   \                     ??RobotArmManager_executeStep_8: (+1)
   \   000000DC   0xEB06 0x0087      ADD      R0,R6,R7, LSL #+2
   \   000000E0   0x6A40             LDR      R0,[R0, #+36]
   \   000000E2   0x69C0             LDR      R0,[R0, #+28]
   \   000000E4   0x2800             CMP      R0,#+0
   \   000000E6   0xD004             BEQ.N    ??RobotArmManager_executeStep_9
    129          			status = GraspingManipulator_open(me->itsGraspingManipulator);
   \   000000E8   0x68B0             LDR      R0,[R6, #+8]
   \   000000EA   0x.... 0x....      BL       GraspingManipulator_open
   \   000000EE   0x0005             MOVS     R5,R0
   \   000000F0   0xE003             B.N      ??RobotArmManager_executeStep_0
    130          		}
    131          		else {
    132          			status = GraspingManipulator_close(me->itsGraspingManipulator);
   \                     ??RobotArmManager_executeStep_9: (+1)
   \   000000F2   0x68B0             LDR      R0,[R6, #+8]
   \   000000F4   0x.... 0x....      BL       GraspingManipulator_close
   \   000000F8   0x0005             MOVS     R5,R0
    133          		}
    134          	}
    135          
    136          	return status;
   \                     ??RobotArmManager_executeStep_0: (+1)
   \   000000FA   0x0028             MOVS     R0,R5
   \                     ??RobotArmManager_executeStep_2: (+1)
   \   000000FC   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    137          }
    138          

   \                                 In section .text, align 2, keep-with-next
    139          int RobotArmManager_graspAt(RobotArmManager* const me, int x, int y, int z, int t) {
   \                     RobotArmManager_graspAt: (+1)
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0xF8DD 0x8020      LDR      R8,[SP, #+32]
    140          	me->currentStep = -1;
   \   00000010   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000014   0x6020             STR      R0,[R4, #+0]
    141          	me->nSteps = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x6060             STR      R0,[R4, #+4]
    142          	RobotArmManager_zero(me);
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       RobotArmManager_zero
    143          	RobotArmManager_computeTrajectory(me, x, y, z, t);
   \   00000020   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   00000024   0x003B             MOVS     R3,R7
   \   00000026   0x0032             MOVS     R2,R6
   \   00000028   0x0029             MOVS     R1,R5
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x.... 0x....      BL       RobotArmManager_computeTrajectory
    144          
    145          	if (me->nSteps == 0) {
   \   00000030   0x6860             LDR      R0,[R4, #+4]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD104             BNE.N    ??RobotArmManager_graspAt_0
    146          		me->status = -1;
   \   00000036   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000003A   0xF8C4 0x01B4      STR      R0,[R4, #+436]
   \   0000003E   0xE00F             B.N      ??RobotArmManager_graspAt_1
    147          	}
    148          	else {
    149          		do {
    150          			me->currentStep++;
   \                     ??RobotArmManager_graspAt_0: (+1)
   \   00000040   0x6820             LDR      R0,[R4, #+0]
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x6020             STR      R0,[R4, #+0]
    151          			me->status = RobotArmManager_executeStep(me);
   \   00000046   0x0020             MOVS     R0,R4
   \   00000048   0x.... 0x....      BL       RobotArmManager_executeStep
   \   0000004C   0xF8C4 0x01B4      STR      R0,[R4, #+436]
    152          		} while (me->status == 0 && me->currentStep < me->nSteps);
   \   00000050   0xF8D4 0x01B4      LDR      R0,[R4, #+436]
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD103             BNE.N    ??RobotArmManager_graspAt_1
   \   00000058   0x6820             LDR      R0,[R4, #+0]
   \   0000005A   0x6861             LDR      R1,[R4, #+4]
   \   0000005C   0x4288             CMP      R0,R1
   \   0000005E   0xD3EF             BCC.N    ??RobotArmManager_graspAt_0
    153          	}
    154          
    155          	return me->status;
   \                     ??RobotArmManager_graspAt_1: (+1)
   \   00000060   0xF8D4 0x01B4      LDR      R0,[R4, #+436]
   \   00000064   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    156          }
    157          

   \                                 In section .text, align 2, keep-with-next
    158          int RobotArmManager_zero(RobotArmManager* const me) {
   \                     RobotArmManager_zero: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    159          	int j;
    160          
    161          	for (j = 0; j < 4; ++j) {
   \   00000004   0x2500             MOVS     R5,#+0
   \                     ??RobotArmManager_zero_0: (+1)
   \   00000006   0x2D04             CMP      R5,#+4
   \   00000008   0xDA13             BGE.N    ??RobotArmManager_zero_1
    162          		if (me->itsRotatingArmJoint[j] == NULL) {
   \   0000000A   0xEB04 0x0085      ADD      R0,R4,R5, LSL #+2
   \   0000000E   0x68C0             LDR      R0,[R0, #+12]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD102             BNE.N    ??RobotArmManager_zero_2
    163          			return -1;
   \   00000014   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000018   0xE031             B.N      ??RobotArmManager_zero_3
    164          		}
    165          
    166          		if (RotatingArmJoint_zero(me->itsRotatingArmJoint[j])) {
   \                     ??RobotArmManager_zero_2: (+1)
   \   0000001A   0xEB04 0x0085      ADD      R0,R4,R5, LSL #+2
   \   0000001E   0x68C0             LDR      R0,[R0, #+12]
   \   00000020   0x.... 0x....      BL       RotatingArmJoint_zero
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD002             BEQ.N    ??RobotArmManager_zero_4
    167          			return -1;
   \   00000028   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000002C   0xE027             B.N      ??RobotArmManager_zero_3
    168          		}
    169          	}
   \                     ??RobotArmManager_zero_4: (+1)
   \   0000002E   0x1C6D             ADDS     R5,R5,#+1
   \   00000030   0xE7E9             B.N      ??RobotArmManager_zero_0
    170          
    171          	for (j = 0; j < 2; ++j) {
   \                     ??RobotArmManager_zero_1: (+1)
   \   00000032   0x2600             MOVS     R6,#+0
   \                     ??RobotArmManager_zero_5: (+1)
   \   00000034   0x2E02             CMP      R6,#+2
   \   00000036   0xDA13             BGE.N    ??RobotArmManager_zero_6
    172          		if (me->itsSlidingArmJoint[j] == NULL) {
   \   00000038   0xEB04 0x0086      ADD      R0,R4,R6, LSL #+2
   \   0000003C   0x69C0             LDR      R0,[R0, #+28]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD102             BNE.N    ??RobotArmManager_zero_7
    173          			return -1;
   \   00000042   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000046   0xE01A             B.N      ??RobotArmManager_zero_3
    174          		}
    175          
    176          		if (SlidingArmJoint_zero(me->itsSlidingArmJoint[j])) {
   \                     ??RobotArmManager_zero_7: (+1)
   \   00000048   0xEB04 0x0086      ADD      R0,R4,R6, LSL #+2
   \   0000004C   0x69C0             LDR      R0,[R0, #+28]
   \   0000004E   0x.... 0x....      BL       SlidingArmJoint_zero
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD002             BEQ.N    ??RobotArmManager_zero_8
    177          			return -1;
   \   00000056   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000005A   0xE010             B.N      ??RobotArmManager_zero_3
    178          		}
    179          	}
   \                     ??RobotArmManager_zero_8: (+1)
   \   0000005C   0x1C76             ADDS     R6,R6,#+1
   \   0000005E   0xE7E9             B.N      ??RobotArmManager_zero_5
    180          
    181          	if (me->itsGraspingManipulator == NULL) {
   \                     ??RobotArmManager_zero_6: (+1)
   \   00000060   0x68A0             LDR      R0,[R4, #+8]
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD102             BNE.N    ??RobotArmManager_zero_9
    182          		return -1;
   \   00000066   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000006A   0xE008             B.N      ??RobotArmManager_zero_3
    183          	}
    184          	
    185          	if (GraspingManipulator_open(me->itsGraspingManipulator)) {
   \                     ??RobotArmManager_zero_9: (+1)
   \   0000006C   0x68A0             LDR      R0,[R4, #+8]
   \   0000006E   0x.... 0x....      BL       GraspingManipulator_open
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD002             BEQ.N    ??RobotArmManager_zero_10
    186          		return -1;
   \   00000076   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000007A   0xE000             B.N      ??RobotArmManager_zero_3
    187          	}
    188          
    189          	return 0;
   \                     ??RobotArmManager_zero_10: (+1)
   \   0000007C   0x2000             MOVS     R0,#+0
   \                     ??RobotArmManager_zero_3: (+1)
   \   0000007E   0xBD70             POP      {R4-R6,PC}       ;; return
    190          }
    191          

   \                                 In section .text, align 2, keep-with-next
    192          GraspingManipulator* RobotArmManager_getItsGraspingManipulator(const RobotArmManager* const me) {
    193          	return (GraspingManipulator*)me->itsGraspingManipulator;
   \                     RobotArmManager_getItsGraspingManipulator: (+1)
   \   00000000   0x6880             LDR      R0,[R0, #+8]
   \   00000002   0x4770             BX       LR               ;; return
    194          }
    195          

   \                                 In section .text, align 2, keep-with-next
    196          void RobotArmManager_setItsGraspingManipulator(RobotArmManager* const me, GraspingManipulator* p_GraspingManipulator) {
    197          	me->itsGraspingManipulator = p_GraspingManipulator;
   \                     RobotArmManager_setItsGraspingManipulator: (+1)
   \   00000000   0x6081             STR      R1,[R0, #+8]
    198          }
   \   00000002   0x4770             BX       LR               ;; return
    199          

   \                                 In section .text, align 2, keep-with-next
    200          unsigned int* RobotArmManager_getItsRotatingArmJoint(const RobotArmManager* const me) {
    201          	return (unsigned int*)&(me->itsRotatingArmJoint[0]);
   \                     RobotArmManager_getItsRotatingArmJoint: (+1)
   \   00000000   0x300C             ADDS     R0,R0,#+12
   \   00000002   0x4770             BX       LR               ;; return
    202          }
    203          

   \                                 In section .text, align 2, keep-with-next
    204          void RobotArmManager_addItsRotatingArmJoint(RobotArmManager* const me, RotatingArmJoint* p_RotatingArmJoint) {
    205          	int pos;
    206          
    207          	for (pos = 0; pos < 4; ++pos) {
   \                     RobotArmManager_addItsRotatingArmJoint: (+1)
   \   00000000   0x2300             MOVS     R3,#+0
   \                     ??RobotArmManager_addItsRotatingArmJoint_0: (+1)
   \   00000002   0x2B04             CMP      R3,#+4
   \   00000004   0xDA0A             BGE.N    ??RobotArmManager_addItsRotatingArmJoint_1
    208          		if (!me->itsRotatingArmJoint[pos]) {
   \   00000006   0xEB00 0x0283      ADD      R2,R0,R3, LSL #+2
   \   0000000A   0x68D2             LDR      R2,[R2, #+12]
   \   0000000C   0x2A00             CMP      R2,#+0
   \   0000000E   0xD103             BNE.N    ??RobotArmManager_addItsRotatingArmJoint_2
    209          			me->itsRotatingArmJoint[pos] = p_RotatingArmJoint;
   \   00000010   0xEB00 0x0283      ADD      R2,R0,R3, LSL #+2
   \   00000014   0x60D1             STR      R1,[R2, #+12]
    210          			break;
   \   00000016   0xE001             B.N      ??RobotArmManager_addItsRotatingArmJoint_1
    211          		}
    212          	}
   \                     ??RobotArmManager_addItsRotatingArmJoint_2: (+1)
   \   00000018   0x1C5B             ADDS     R3,R3,#+1
   \   0000001A   0xE7F2             B.N      ??RobotArmManager_addItsRotatingArmJoint_0
    213          }
   \                     ??RobotArmManager_addItsRotatingArmJoint_1: (+1)
   \   0000001C   0x4770             BX       LR               ;; return
    214          

   \                                 In section .text, align 2, keep-with-next
    215          void RobotArmManager_removeItsRotatingArmJoint(RobotArmManager* const me, RotatingArmJoint* p_RotatingArmJoint) {
   \                     RobotArmManager_removeItsRotatingArmJoint: (+1)
   \   00000000   0xB410             PUSH     {R4}
    216          	int pos;
    217          
    218          	for (pos = 0; pos < 4; ++pos) {
   \   00000002   0x2200             MOVS     R2,#+0
   \                     ??RobotArmManager_removeItsRotatingArmJoint_0: (+1)
   \   00000004   0x2A04             CMP      R2,#+4
   \   00000006   0xDA0B             BGE.N    ??RobotArmManager_removeItsRotatingArmJoint_1
    219          		if (me->itsRotatingArmJoint[pos] == p_RotatingArmJoint) {
   \   00000008   0xEB00 0x0382      ADD      R3,R0,R2, LSL #+2
   \   0000000C   0x68DB             LDR      R3,[R3, #+12]
   \   0000000E   0x428B             CMP      R3,R1
   \   00000010   0xD104             BNE.N    ??RobotArmManager_removeItsRotatingArmJoint_2
    220          			me->itsRotatingArmJoint[pos] = NULL;
   \   00000012   0x2300             MOVS     R3,#+0
   \   00000014   0xEB00 0x0482      ADD      R4,R0,R2, LSL #+2
   \   00000018   0x60E3             STR      R3,[R4, #+12]
    221          			break;
   \   0000001A   0xE001             B.N      ??RobotArmManager_removeItsRotatingArmJoint_1
    222          		}
    223          	}
   \                     ??RobotArmManager_removeItsRotatingArmJoint_2: (+1)
   \   0000001C   0x1C52             ADDS     R2,R2,#+1
   \   0000001E   0xE7F1             B.N      ??RobotArmManager_removeItsRotatingArmJoint_0
    224          }
   \                     ??RobotArmManager_removeItsRotatingArmJoint_1: (+1)
   \   00000020   0xBC10             POP      {R4}
   \   00000022   0x4770             BX       LR               ;; return
    225          

   \                                 In section .text, align 2, keep-with-next
    226          void RobotArmManager_clearItsRotatingArmJoint(RobotArmManager* const me) {
    227          	int pos;
    228          
    229          	for (pos = 0; pos < 4; ++pos) {
   \                     RobotArmManager_clearItsRotatingArmJoint: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \                     ??RobotArmManager_clearItsRotatingArmJoint_0: (+1)
   \   00000002   0x2904             CMP      R1,#+4
   \   00000004   0xDA05             BGE.N    ??RobotArmManager_clearItsRotatingArmJoint_1
    230          		me->itsRotatingArmJoint[pos] = NULL;
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0xEB00 0x0381      ADD      R3,R0,R1, LSL #+2
   \   0000000C   0x60DA             STR      R2,[R3, #+12]
    231          	}
   \   0000000E   0x1C49             ADDS     R1,R1,#+1
   \   00000010   0xE7F7             B.N      ??RobotArmManager_clearItsRotatingArmJoint_0
    232          }
   \                     ??RobotArmManager_clearItsRotatingArmJoint_1: (+1)
   \   00000012   0x4770             BX       LR               ;; return
    233          

   \                                 In section .text, align 2, keep-with-next
    234          unsigned int* RobotArmManager_getItsSlidingArmJoint(const RobotArmManager* const me) {
    235          	return (unsigned int*)&(me->itsSlidingArmJoint[0]);
   \                     RobotArmManager_getItsSlidingArmJoint: (+1)
   \   00000000   0x301C             ADDS     R0,R0,#+28
   \   00000002   0x4770             BX       LR               ;; return
    236          }
    237          

   \                                 In section .text, align 2, keep-with-next
    238          void RobotArmManager_addItsSlidingArmJoint(RobotArmManager* const me, SlidingArmJoint* p_SlidingArmJoint) {
    239          	int pos;
    240          
    241          	for (pos = 0; pos < 2; ++pos) {
   \                     RobotArmManager_addItsSlidingArmJoint: (+1)
   \   00000000   0x2300             MOVS     R3,#+0
   \                     ??RobotArmManager_addItsSlidingArmJoint_0: (+1)
   \   00000002   0x2B02             CMP      R3,#+2
   \   00000004   0xDA0A             BGE.N    ??RobotArmManager_addItsSlidingArmJoint_1
    242          		if (!me->itsSlidingArmJoint[pos]) {
   \   00000006   0xEB00 0x0283      ADD      R2,R0,R3, LSL #+2
   \   0000000A   0x69D2             LDR      R2,[R2, #+28]
   \   0000000C   0x2A00             CMP      R2,#+0
   \   0000000E   0xD103             BNE.N    ??RobotArmManager_addItsSlidingArmJoint_2
    243          			me->itsSlidingArmJoint[pos] = p_SlidingArmJoint;
   \   00000010   0xEB00 0x0283      ADD      R2,R0,R3, LSL #+2
   \   00000014   0x61D1             STR      R1,[R2, #+28]
    244          			break;
   \   00000016   0xE001             B.N      ??RobotArmManager_addItsSlidingArmJoint_1
    245          		}
    246          	}
   \                     ??RobotArmManager_addItsSlidingArmJoint_2: (+1)
   \   00000018   0x1C5B             ADDS     R3,R3,#+1
   \   0000001A   0xE7F2             B.N      ??RobotArmManager_addItsSlidingArmJoint_0
    247          }
   \                     ??RobotArmManager_addItsSlidingArmJoint_1: (+1)
   \   0000001C   0x4770             BX       LR               ;; return
    248          

   \                                 In section .text, align 2, keep-with-next
    249          void RobotArmManager_removeItsSlidingAmJoint(RobotArmManager* const me, SlidingArmJoint* p_SlidingArmJoint) {
   \                     RobotArmManager_removeItsSlidingAmJoint: (+1)
   \   00000000   0xB410             PUSH     {R4}
    250          	int pos;
    251          
    252          	for (pos = 0; pos < 2; ++pos) {
   \   00000002   0x2200             MOVS     R2,#+0
   \                     ??RobotArmManager_removeItsSlidingAmJoint_0: (+1)
   \   00000004   0x2A02             CMP      R2,#+2
   \   00000006   0xDA0B             BGE.N    ??RobotArmManager_removeItsSlidingAmJoint_1
    253          		if (me->itsSlidingArmJoint[pos] == p_SlidingArmJoint) {
   \   00000008   0xEB00 0x0382      ADD      R3,R0,R2, LSL #+2
   \   0000000C   0x69DB             LDR      R3,[R3, #+28]
   \   0000000E   0x428B             CMP      R3,R1
   \   00000010   0xD104             BNE.N    ??RobotArmManager_removeItsSlidingAmJoint_2
    254          			me->itsSlidingArmJoint[pos] = NULL;
   \   00000012   0x2300             MOVS     R3,#+0
   \   00000014   0xEB00 0x0482      ADD      R4,R0,R2, LSL #+2
   \   00000018   0x61E3             STR      R3,[R4, #+28]
    255          			break;
   \   0000001A   0xE001             B.N      ??RobotArmManager_removeItsSlidingAmJoint_1
    256          		}
    257          	}
   \                     ??RobotArmManager_removeItsSlidingAmJoint_2: (+1)
   \   0000001C   0x1C52             ADDS     R2,R2,#+1
   \   0000001E   0xE7F1             B.N      ??RobotArmManager_removeItsSlidingAmJoint_0
    258          }
   \                     ??RobotArmManager_removeItsSlidingAmJoint_1: (+1)
   \   00000020   0xBC10             POP      {R4}
   \   00000022   0x4770             BX       LR               ;; return
    259          

   \                                 In section .text, align 2, keep-with-next
    260          void RobotArmManager_clearItsSlidingArmJoint(RobotArmManager* const me) {
    261          	int pos;
    262          
    263          	for (pos = 0; pos < 2; ++pos) {
   \                     RobotArmManager_clearItsSlidingArmJoint: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \                     ??RobotArmManager_clearItsSlidingArmJoint_0: (+1)
   \   00000002   0x2902             CMP      R1,#+2
   \   00000004   0xDA05             BGE.N    ??RobotArmManager_clearItsSlidingArmJoint_1
    264          		me->itsSlidingArmJoint[pos] = NULL;
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0xEB00 0x0381      ADD      R3,R0,R1, LSL #+2
   \   0000000C   0x61DA             STR      R2,[R3, #+28]
    265          	}
   \   0000000E   0x1C49             ADDS     R1,R1,#+1
   \   00000010   0xE7F7             B.N      ??RobotArmManager_clearItsSlidingArmJoint_0
    266          }
   \                     ??RobotArmManager_clearItsSlidingArmJoint_1: (+1)
   \   00000012   0x4770             BX       LR               ;; return
    267          

   \                                 In section .text, align 2, keep-with-next
    268          unsigned int* RobotArmManager_getItsAction(const RobotArmManager* const me) {
    269          	return (unsigned int*)&(me->itsAction[0]);
   \                     RobotArmManager_getItsAction: (+1)
   \   00000000   0x3024             ADDS     R0,R0,#+36
   \   00000002   0x4770             BX       LR               ;; return
    270          }
    271          

   \                                 In section .text, align 2, keep-with-next
    272          void RobotArmManager_addItsAction(RobotArmManager* const me, Action* p_Action) {
    273          	int pos;
    274          
    275          	for (pos = 0; pos < 100; ++pos) {
   \                     RobotArmManager_addItsAction: (+1)
   \   00000000   0x2300             MOVS     R3,#+0
   \                     ??RobotArmManager_addItsAction_0: (+1)
   \   00000002   0x2B64             CMP      R3,#+100
   \   00000004   0xDA0A             BGE.N    ??RobotArmManager_addItsAction_1
    276          		if (!me->itsAction[pos]) {
   \   00000006   0xEB00 0x0283      ADD      R2,R0,R3, LSL #+2
   \   0000000A   0x6A52             LDR      R2,[R2, #+36]
   \   0000000C   0x2A00             CMP      R2,#+0
   \   0000000E   0xD103             BNE.N    ??RobotArmManager_addItsAction_2
    277          			me->itsAction[pos] = p_Action;
   \   00000010   0xEB00 0x0283      ADD      R2,R0,R3, LSL #+2
   \   00000014   0x6251             STR      R1,[R2, #+36]
    278          			break;
   \   00000016   0xE001             B.N      ??RobotArmManager_addItsAction_1
    279          		}
    280          	}
   \                     ??RobotArmManager_addItsAction_2: (+1)
   \   00000018   0x1C5B             ADDS     R3,R3,#+1
   \   0000001A   0xE7F2             B.N      ??RobotArmManager_addItsAction_0
    281          }
   \                     ??RobotArmManager_addItsAction_1: (+1)
   \   0000001C   0x4770             BX       LR               ;; return
    282          

   \                                 In section .text, align 2, keep-with-next
    283          void RobotArmManager_removeItsAction(RobotArmManager* const me, Action* p_Action) {
   \                     RobotArmManager_removeItsAction: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    284          	int pos;
    285          
    286          	for (pos = 0; pos < 100; ++pos) {
   \   00000006   0x2600             MOVS     R6,#+0
   \                     ??RobotArmManager_removeItsAction_0: (+1)
   \   00000008   0x2E64             CMP      R6,#+100
   \   0000000A   0xDA10             BGE.N    ??RobotArmManager_removeItsAction_1
    287          		if (me->itsAction[pos] == p_Action) {
   \   0000000C   0xEB04 0x0086      ADD      R0,R4,R6, LSL #+2
   \   00000010   0x6A40             LDR      R0,[R0, #+36]
   \   00000012   0x42A8             CMP      R0,R5
   \   00000014   0xD109             BNE.N    ??RobotArmManager_removeItsAction_2
    288          			Action_Delete(me->itsAction[pos]);
   \   00000016   0xEB04 0x0086      ADD      R0,R4,R6, LSL #+2
   \   0000001A   0x6A40             LDR      R0,[R0, #+36]
   \   0000001C   0x.... 0x....      BL       Action_Delete
    289          			me->itsAction[pos] = NULL;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xEB04 0x0186      ADD      R1,R4,R6, LSL #+2
   \   00000026   0x6248             STR      R0,[R1, #+36]
    290          			break;
   \   00000028   0xE001             B.N      ??RobotArmManager_removeItsAction_1
    291          		}
    292          	}
   \                     ??RobotArmManager_removeItsAction_2: (+1)
   \   0000002A   0x1C76             ADDS     R6,R6,#+1
   \   0000002C   0xE7EC             B.N      ??RobotArmManager_removeItsAction_0
    293          }
   \                     ??RobotArmManager_removeItsAction_1: (+1)
   \   0000002E   0xBD70             POP      {R4-R6,PC}       ;; return
    294          

   \                                 In section .text, align 2, keep-with-next
    295          void RobotArmManager_clearItsAction(RobotArmManager* const me) {
   \                     RobotArmManager_clearItsAction: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    296          	int pos;
    297          
    298          	for (pos = 0; pos < 100; ++pos) {
   \   00000004   0x2500             MOVS     R5,#+0
   \                     ??RobotArmManager_clearItsAction_0: (+1)
   \   00000006   0x2D64             CMP      R5,#+100
   \   00000008   0xDA0A             BGE.N    ??RobotArmManager_clearItsAction_1
    299          		Action_Delete(me->itsAction[pos]);
   \   0000000A   0xEB04 0x0085      ADD      R0,R4,R5, LSL #+2
   \   0000000E   0x6A40             LDR      R0,[R0, #+36]
   \   00000010   0x.... 0x....      BL       Action_Delete
    300          		me->itsAction[pos] = NULL;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xEB04 0x0185      ADD      R1,R4,R5, LSL #+2
   \   0000001A   0x6248             STR      R0,[R1, #+36]
    301          	}
   \   0000001C   0x1C6D             ADDS     R5,R5,#+1
   \   0000001E   0xE7F2             B.N      ??RobotArmManager_clearItsAction_0
    302          }
   \                     ??RobotArmManager_clearItsAction_1: (+1)
   \   00000020   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    303          

   \                                 In section .text, align 2, keep-with-next
    304          RobotArmManager* RobotArmManager_Create(void) {
   \                     RobotArmManager_Create: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    305          	RobotArmManager* me = (RobotArmManager*)malloc(sizeof(RobotArmManager));
   \   00000002   0xF44F 0x70DC      MOV      R0,#+440
   \   00000006   0x.... 0x....      BL       malloc
   \   0000000A   0x0004             MOVS     R4,R0
    306          
    307          	if (me != NULL) {
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD002             BEQ.N    ??RobotArmManager_Create_0
    308          		RobotArmManager_Init(me);
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       RobotArmManager_Init
    309          	}
    310          
    311          	return me;
   \                     ??RobotArmManager_Create_0: (+1)
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    312          }
    313          

   \                                 In section .text, align 2, keep-with-next
    314          void RobotArmManager_Destroy(RobotArmManager* const me) {
   \                     RobotArmManager_Destroy: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    315          	if (me != NULL) {
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD002             BEQ.N    ??RobotArmManager_Destroy_0
    316          		RobotArmManager_Cleanup(me);
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       RobotArmManager_Cleanup
    317          	}
    318          
    319          	free(me);
   \                     ??RobotArmManager_Destroy_0: (+1)
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       free
    320          }
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    321          

   \                                 In section .text, align 2, keep-with-next
    322          static void cleanUpRelations(RobotArmManager* const me) {
    323          	if (me->itsGraspingManipulator != NULL) {
   \                     cleanUpRelations: (+1)
   \   00000000   0x6881             LDR      R1,[R0, #+8]
   \   00000002   0x2900             CMP      R1,#+0
   \   00000004   0xD001             BEQ.N    ??cleanUpRelations_0
    324          		me->itsGraspingManipulator = NULL;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x6081             STR      R1,[R0, #+8]
    325          	}
    326          }
   \                     ??cleanUpRelations_0: (+1)
   \   0000000A   0x4770             BX       LR               ;; return

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   RobotArmManager_Cleanup
         8   -> cleanUpRelations
       8   RobotArmManager_Create
         8   -> RobotArmManager_Init
         8   -> malloc
       8   RobotArmManager_Destroy
         8   -> RobotArmManager_Cleanup
         8   -> free
       0   RobotArmManager_Init
       0   RobotArmManager_addItsAction
       0   RobotArmManager_addItsRotatingArmJoint
       0   RobotArmManager_addItsSlidingArmJoint
      16   RobotArmManager_clearItsAction
        16   -> Action_Delete
       0   RobotArmManager_clearItsRotatingArmJoint
       0   RobotArmManager_clearItsSlidingArmJoint
      40   RobotArmManager_computeTrajectory
        40   -> Action_Create
        40   -> RobotArmManager_addItsAction
        40   -> RobotArmManager_clearItsAction
      32   RobotArmManager_executeStep
        32   -> GraspingManipulator_close
        32   -> GraspingManipulator_open
        32   -> GraspingManipulator_setMaxForce
        32   -> RotatingArmJoint_rotate
        32   -> SlidingArmJoint_setLength
       0   RobotArmManager_getItsAction
       0   RobotArmManager_getItsGraspingManipulator
       0   RobotArmManager_getItsRotatingArmJoint
       0   RobotArmManager_getItsSlidingArmJoint
      32   RobotArmManager_graspAt
        32   -> RobotArmManager_computeTrajectory
        32   -> RobotArmManager_executeStep
        32   -> RobotArmManager_zero
      16   RobotArmManager_removeItsAction
        16   -> Action_Delete
       4   RobotArmManager_removeItsRotatingArmJoint
       4   RobotArmManager_removeItsSlidingAmJoint
       0   RobotArmManager_setItsGraspingManipulator
      16   RobotArmManager_zero
        16   -> GraspingManipulator_open
        16   -> RotatingArmJoint_zero
        16   -> SlidingArmJoint_zero
       0   cleanUpRelations


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  RobotArmManager_Cleanup
      26  RobotArmManager_Create
      22  RobotArmManager_Destroy
      64  RobotArmManager_Init
      30  RobotArmManager_addItsAction
      30  RobotArmManager_addItsRotatingArmJoint
      30  RobotArmManager_addItsSlidingArmJoint
      34  RobotArmManager_clearItsAction
      20  RobotArmManager_clearItsRotatingArmJoint
      20  RobotArmManager_clearItsSlidingArmJoint
     220  RobotArmManager_computeTrajectory
     256  RobotArmManager_executeStep
       4  RobotArmManager_getItsAction
       4  RobotArmManager_getItsGraspingManipulator
       4  RobotArmManager_getItsRotatingArmJoint
       4  RobotArmManager_getItsSlidingArmJoint
     104  RobotArmManager_graspAt
      48  RobotArmManager_removeItsAction
      36  RobotArmManager_removeItsRotatingArmJoint
      36  RobotArmManager_removeItsSlidingAmJoint
       4  RobotArmManager_setItsGraspingManipulator
     128  RobotArmManager_zero
      12  cleanUpRelations

 
 1 148 bytes in section .text
 
 1 148 bytes of CODE memory

Errors: none
Warnings: none

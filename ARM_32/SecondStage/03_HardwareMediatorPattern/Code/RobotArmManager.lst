###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.2.15995/W32 for ARM       21/Apr/2018  16:38:14
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\Cpp\RobotArmManager.cpp
#    Command line =  
#        -f C:\Users\Tim\AppData\Local\Temp\EWBCBD.tmp
#        (C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\Cpp\RobotArmManager.cpp
#        -lC
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\Cpp\Debug\List
#        -lA
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\Cpp\Debug\List
#        -o
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\Cpp\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 --fpu=None --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\INC\c\DLib_Config_Normal.h" -On
#        --c++ --no_exceptions --no_rtti --no_static_destruction)
#    Locale       =  C
#    List file    =  
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\Cpp\Debug\List\RobotArmManager.lst
#    Object file  =  
#        C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\Cpp\Debug\Obj\RobotArmManager.o
#
###############################################################################

C:\Users\Tim\Programming\Code\ARM_32\Patterns\03_HardwareMediatorPattern\Code\Cpp\RobotArmManager.cpp
      1          #include <stdlib.h>
      2          #include "RobotArmManager.h"
      3          
      4          static void cleanUpRelations(RobotArmManager* const me);
                             ^
Warning[Pe177]: function "cleanUpRelations" was declared but never referenced
      5          

   \                                 In section .text, align 2, keep-with-next
      6          void RobotArmManager::computeTrajectory(int x, int y, int z, int t) {
   \                     _ZN15RobotArmManager17computeTrajectoryEiiii: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0xB098             SUB      SP,SP,#+96
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
      7          	Action ap1;
      8          
      9          	this->nSteps = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x6060             STR      R0,[R4, #+4]
     10          	this->clearItsAction();
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       _ZN15RobotArmManager14clearItsActionEv
     11          
     12          	this->addItsAction(&ap1);
   \   00000016   0xA910             ADD      R1,SP,#+64
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x.... 0x....      BL       _ZN15RobotArmManager12addItsActionEP6Action
     13          
     14          	ap1.rotatingArmJoint1 = 1;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x9010             STR      R0,[SP, #+64]
     15          	ap1.rotatingArmJoint2 = 2;
   \   00000022   0x2002             MOVS     R0,#+2
   \   00000024   0x9011             STR      R0,[SP, #+68]
     16          	ap1.rotatingArmJoint3 = 3;
   \   00000026   0x2003             MOVS     R0,#+3
   \   00000028   0x9012             STR      R0,[SP, #+72]
     17          	ap1.rotatingArmJoint4 = 4;
   \   0000002A   0x2004             MOVS     R0,#+4
   \   0000002C   0x9013             STR      R0,[SP, #+76]
     18          
     19          	ap1.slidingArmJoint1 = 10;
   \   0000002E   0x200A             MOVS     R0,#+10
   \   00000030   0x9014             STR      R0,[SP, #+80]
     20          	ap1.slidingArmJoint2 = 20;
   \   00000032   0x2014             MOVS     R0,#+20
   \   00000034   0x9015             STR      R0,[SP, #+84]
     21          
     22          	ap1.manipulatorForce = 0;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x9016             STR      R0,[SP, #+88]
     23          	ap1.manipulatorOpen = 1;
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x9017             STR      R0,[SP, #+92]
     24          
     25          	Action ap2;
     26          	this->addItsAction(&ap2);
   \   0000003E   0xA908             ADD      R1,SP,#+32
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0x.... 0x....      BL       _ZN15RobotArmManager12addItsActionEP6Action
     27          
     28          	ap2.rotatingArmJoint1 = 1;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x9008             STR      R0,[SP, #+32]
     29          	ap2.rotatingArmJoint2 = 2;
   \   0000004A   0x2002             MOVS     R0,#+2
   \   0000004C   0x9009             STR      R0,[SP, #+36]
     30          	ap2.rotatingArmJoint3 = 3;
   \   0000004E   0x2003             MOVS     R0,#+3
   \   00000050   0x900A             STR      R0,[SP, #+40]
     31          	ap2.rotatingArmJoint4 = 4;
   \   00000052   0x2004             MOVS     R0,#+4
   \   00000054   0x900B             STR      R0,[SP, #+44]
     32          
     33          	ap2.slidingArmJoint1 = 10;
   \   00000056   0x200A             MOVS     R0,#+10
   \   00000058   0x900C             STR      R0,[SP, #+48]
     34          	ap2.slidingArmJoint2 = 20;
   \   0000005A   0x2014             MOVS     R0,#+20
   \   0000005C   0x900D             STR      R0,[SP, #+52]
     35          
     36          	ap2.manipulatorForce = 10;
   \   0000005E   0x200A             MOVS     R0,#+10
   \   00000060   0x900E             STR      R0,[SP, #+56]
     37          	ap2.manipulatorOpen = 0;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x900F             STR      R0,[SP, #+60]
     38          
     39          	Action ap3;
     40          	this->addItsAction(&ap3);
   \   00000066   0x4669             MOV      R1,SP
   \   00000068   0x0020             MOVS     R0,R4
   \   0000006A   0x.... 0x....      BL       _ZN15RobotArmManager12addItsActionEP6Action
     41          
     42          	ap3.rotatingArmJoint1 = 0;
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x9000             STR      R0,[SP, #+0]
     43          	ap3.rotatingArmJoint2 = 0;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x9001             STR      R0,[SP, #+4]
     44          	ap3.rotatingArmJoint3 = 0;
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x9002             STR      R0,[SP, #+8]
     45          	ap3.rotatingArmJoint4 = 0;
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x9003             STR      R0,[SP, #+12]
     46          
     47          	ap3.slidingArmJoint1 = 0;
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x9004             STR      R0,[SP, #+16]
     48          	ap3.slidingArmJoint2 = 0;
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x9005             STR      R0,[SP, #+20]
     49          
     50          	ap3.manipulatorForce = 10;
   \   00000086   0x200A             MOVS     R0,#+10
   \   00000088   0x9006             STR      R0,[SP, #+24]
     51          	ap3.manipulatorOpen = 0;
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x9007             STR      R0,[SP, #+28]
     52          
     53          	this->nSteps = 3;
   \   0000008E   0x2003             MOVS     R0,#+3
   \   00000090   0x6060             STR      R0,[R4, #+4]
     54          }
   \   00000092   0xB019             ADD      SP,SP,#+100
   \   00000094   0xBDF0             POP      {R4-R7,PC}       ;; return
     55          

   \                                 In section .text, align 2, keep-with-next
     56          int RobotArmManager::executeStep() {
   \                     _ZN15RobotArmManager11executeStepEv: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0006             MOVS     R6,R0
     57          	int actionValue = 0;
   \   00000006   0xF05F 0x0800      MOVS     R8,#+0
     58          	int step = this->currentStep;
   \   0000000A   0x6837             LDR      R7,[R6, #+0]
     59          	int status = 0;
   \   0000000C   0x2500             MOVS     R5,#+0
     60          
     61          	if (this->itsAction[step]) {
   \   0000000E   0xEB06 0x0087      ADD      R0,R6,R7, LSL #+2
   \   00000012   0x6A40             LDR      R0,[R0, #+36]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD070             BEQ.N    ??executeStep_0
     62          		actionValue = this->itsAction[step]->rotatingArmJoint1;
   \   00000018   0xEB06 0x0087      ADD      R0,R6,R7, LSL #+2
   \   0000001C   0x6A40             LDR      R0,[R0, #+36]
   \   0000001E   0xF8D0 0x9000      LDR      R9,[R0, #+0]
     63          		status = this->itsRotatingArmJoint[0]->rotate(actionValue);
   \   00000022   0x4649             MOV      R1,R9
   \   00000024   0x68F0             LDR      R0,[R6, #+12]
   \   00000026   0x.... 0x....      BL       _ZN16RotatingArmJoint6rotateEi
   \   0000002A   0x0004             MOVS     R4,R0
     64          		if (status) {
   \   0000002C   0x2C00             CMP      R4,#+0
   \   0000002E   0xD001             BEQ.N    ??executeStep_1
     65          			return status;
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0xE063             B.N      ??executeStep_2
     66          		}
     67          
     68          		actionValue = this->itsAction[step]->rotatingArmJoint2;
   \                     ??executeStep_1: (+1)
   \   00000034   0xEB06 0x0087      ADD      R0,R6,R7, LSL #+2
   \   00000038   0x6A40             LDR      R0,[R0, #+36]
   \   0000003A   0xF8D0 0x8004      LDR      R8,[R0, #+4]
     69          		status = this->itsRotatingArmJoint[1]->rotate(actionValue);
   \   0000003E   0x4641             MOV      R1,R8
   \   00000040   0x6930             LDR      R0,[R6, #+16]
   \   00000042   0x.... 0x....      BL       _ZN16RotatingArmJoint6rotateEi
   \   00000046   0x0005             MOVS     R5,R0
     70          		if (status) {
   \   00000048   0x2D00             CMP      R5,#+0
   \   0000004A   0xD001             BEQ.N    ??executeStep_3
     71          			return status;
   \   0000004C   0x0028             MOVS     R0,R5
   \   0000004E   0xE055             B.N      ??executeStep_2
     72          		}
     73          
     74          		actionValue = this->itsAction[step]->rotatingArmJoint3;
   \                     ??executeStep_3: (+1)
   \   00000050   0xEB06 0x0087      ADD      R0,R6,R7, LSL #+2
   \   00000054   0x6A40             LDR      R0,[R0, #+36]
   \   00000056   0xF8D0 0x9008      LDR      R9,[R0, #+8]
     75          		status = this->itsRotatingArmJoint[2]->rotate(actionValue);
   \   0000005A   0x4649             MOV      R1,R9
   \   0000005C   0x6970             LDR      R0,[R6, #+20]
   \   0000005E   0x.... 0x....      BL       _ZN16RotatingArmJoint6rotateEi
   \   00000062   0x0004             MOVS     R4,R0
     76          		if (status) {
   \   00000064   0x2C00             CMP      R4,#+0
   \   00000066   0xD001             BEQ.N    ??executeStep_4
     77          			return status;
   \   00000068   0x0020             MOVS     R0,R4
   \   0000006A   0xE047             B.N      ??executeStep_2
     78          		}
     79          
     80          		actionValue = this->itsAction[step]->rotatingArmJoint4;
   \                     ??executeStep_4: (+1)
   \   0000006C   0xEB06 0x0087      ADD      R0,R6,R7, LSL #+2
   \   00000070   0x6A40             LDR      R0,[R0, #+36]
   \   00000072   0xF8D0 0x800C      LDR      R8,[R0, #+12]
     81          		status = this->itsRotatingArmJoint[3]->rotate(actionValue);
   \   00000076   0x4641             MOV      R1,R8
   \   00000078   0x69B0             LDR      R0,[R6, #+24]
   \   0000007A   0x.... 0x....      BL       _ZN16RotatingArmJoint6rotateEi
   \   0000007E   0x0005             MOVS     R5,R0
     82          		if (status) {
   \   00000080   0x2D00             CMP      R5,#+0
   \   00000082   0xD001             BEQ.N    ??executeStep_5
     83          			return status;
   \   00000084   0x0028             MOVS     R0,R5
   \   00000086   0xE039             B.N      ??executeStep_2
     84          		}
     85          
     86          		actionValue = this->itsAction[step]->slidingArmJoint1;
   \                     ??executeStep_5: (+1)
   \   00000088   0xEB06 0x0087      ADD      R0,R6,R7, LSL #+2
   \   0000008C   0x6A40             LDR      R0,[R0, #+36]
   \   0000008E   0xF8D0 0x9010      LDR      R9,[R0, #+16]
     87          		status = this->itsSlidingArmJoint[0]->setLength(actionValue);
   \   00000092   0x4649             MOV      R1,R9
   \   00000094   0x69F0             LDR      R0,[R6, #+28]
   \   00000096   0x.... 0x....      BL       _ZN15SlidingArmJoint9setLengthEi
   \   0000009A   0x0004             MOVS     R4,R0
     88          		if (status) {
   \   0000009C   0x2C00             CMP      R4,#+0
   \   0000009E   0xD001             BEQ.N    ??executeStep_6
     89          			return status;
   \   000000A0   0x0020             MOVS     R0,R4
   \   000000A2   0xE02B             B.N      ??executeStep_2
     90          		}
     91          
     92          		actionValue = this->itsAction[step]->slidingArmJoint2;
   \                     ??executeStep_6: (+1)
   \   000000A4   0xEB06 0x0087      ADD      R0,R6,R7, LSL #+2
   \   000000A8   0x6A40             LDR      R0,[R0, #+36]
   \   000000AA   0xF8D0 0xA014      LDR      R10,[R0, #+20]
     93          		status = this->itsSlidingArmJoint[1]->setLength(actionValue);
   \   000000AE   0x4651             MOV      R1,R10
   \   000000B0   0x6A30             LDR      R0,[R6, #+32]
   \   000000B2   0x.... 0x....      BL       _ZN15SlidingArmJoint9setLengthEi
   \   000000B6   0x0005             MOVS     R5,R0
     94          		if (status) {
   \   000000B8   0x2D00             CMP      R5,#+0
   \   000000BA   0xD001             BEQ.N    ??executeStep_7
     95          			return status;
   \   000000BC   0x0028             MOVS     R0,R5
   \   000000BE   0xE01D             B.N      ??executeStep_2
     96          		}
     97          
     98          		actionValue = this->itsAction[step]->manipulatorForce;
   \                     ??executeStep_7: (+1)
   \   000000C0   0xEB06 0x0087      ADD      R0,R6,R7, LSL #+2
   \   000000C4   0x6A40             LDR      R0,[R0, #+36]
   \   000000C6   0xF8D0 0x8018      LDR      R8,[R0, #+24]
     99          		status = this->itsGraspingManipulator->setMaxForce(actionValue);
   \   000000CA   0x4641             MOV      R1,R8
   \   000000CC   0x68B0             LDR      R0,[R6, #+8]
   \   000000CE   0x.... 0x....      BL       _ZN19GraspingManipulator11setMaxForceEi
   \   000000D2   0x0004             MOVS     R4,R0
    100          		if (status) {
   \   000000D4   0x2C00             CMP      R4,#+0
   \   000000D6   0xD001             BEQ.N    ??executeStep_8
    101          			return status;
   \   000000D8   0x0020             MOVS     R0,R4
   \   000000DA   0xE00F             B.N      ??executeStep_2
    102          		}
    103          
    104          		if (this->itsAction[step]->manipulatorOpen) {
   \                     ??executeStep_8: (+1)
   \   000000DC   0xEB06 0x0087      ADD      R0,R6,R7, LSL #+2
   \   000000E0   0x6A40             LDR      R0,[R0, #+36]
   \   000000E2   0x69C0             LDR      R0,[R0, #+28]
   \   000000E4   0x2800             CMP      R0,#+0
   \   000000E6   0xD004             BEQ.N    ??executeStep_9
    105          			status = this->itsGraspingManipulator->open();
   \   000000E8   0x68B0             LDR      R0,[R6, #+8]
   \   000000EA   0x.... 0x....      BL       _ZN19GraspingManipulator4openEv
   \   000000EE   0x0005             MOVS     R5,R0
   \   000000F0   0xE003             B.N      ??executeStep_0
    106          		}
    107          		else {
    108          			status = this->itsGraspingManipulator->close();
   \                     ??executeStep_9: (+1)
   \   000000F2   0x68B0             LDR      R0,[R6, #+8]
   \   000000F4   0x.... 0x....      BL       _ZN19GraspingManipulator5closeEv
   \   000000F8   0x0005             MOVS     R5,R0
    109          		}
    110          	}
    111          
    112          	return status;
   \                     ??executeStep_0: (+1)
   \   000000FA   0x0028             MOVS     R0,R5
   \                     ??executeStep_2: (+1)
   \   000000FC   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    113          }
    114          

   \                                 In section .text, align 2, keep-with-next
    115          int RobotArmManager::graspAt(int x, int y, int z, int t) {
   \                     _ZN15RobotArmManager7graspAtEiiii: (+1)
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0xF8DD 0x8020      LDR      R8,[SP, #+32]
    116          	this->currentStep = -1;
   \   00000010   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000014   0x6020             STR      R0,[R4, #+0]
    117          	this->nSteps = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x6060             STR      R0,[R4, #+4]
    118          	this->zero();
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       _ZN15RobotArmManager4zeroEv
    119          	this->computeTrajectory(x, y, z, t);
   \   00000020   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   00000024   0x003B             MOVS     R3,R7
   \   00000026   0x0032             MOVS     R2,R6
   \   00000028   0x0029             MOVS     R1,R5
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x.... 0x....      BL       _ZN15RobotArmManager17computeTrajectoryEiiii
    120          
    121          	if (this->nSteps == 0) {
   \   00000030   0x6860             LDR      R0,[R4, #+4]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD104             BNE.N    ??graspAt_0
    122          		this->status = -1;
   \   00000036   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000003A   0xF8C4 0x01B4      STR      R0,[R4, #+436]
   \   0000003E   0xE00F             B.N      ??graspAt_1
    123          	}
    124          	else {
    125          		do {
    126          			this->currentStep++;
   \                     ??graspAt_0: (+1)
   \   00000040   0x6820             LDR      R0,[R4, #+0]
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x6020             STR      R0,[R4, #+0]
    127          			this->status = this->executeStep();
   \   00000046   0x0020             MOVS     R0,R4
   \   00000048   0x.... 0x....      BL       _ZN15RobotArmManager11executeStepEv
   \   0000004C   0xF8C4 0x01B4      STR      R0,[R4, #+436]
    128          		} while (this->status == 0 && this->currentStep < this->nSteps);
   \   00000050   0xF8D4 0x01B4      LDR      R0,[R4, #+436]
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD103             BNE.N    ??graspAt_1
   \   00000058   0x6820             LDR      R0,[R4, #+0]
   \   0000005A   0x6861             LDR      R1,[R4, #+4]
   \   0000005C   0x4288             CMP      R0,R1
   \   0000005E   0xD3EF             BCC.N    ??graspAt_0
    129          	}
    130          
    131          	return this->status;
   \                     ??graspAt_1: (+1)
   \   00000060   0xF8D4 0x01B4      LDR      R0,[R4, #+436]
   \   00000064   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    132          }
    133          

   \                                 In section .text, align 2, keep-with-next
    134          int RobotArmManager::zero() {
   \                     _ZN15RobotArmManager4zeroEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    135          	for (int j = 0; j < 4; ++j) {
   \   00000004   0x2500             MOVS     R5,#+0
   \                     ??zero_0: (+1)
   \   00000006   0x2D04             CMP      R5,#+4
   \   00000008   0xDA13             BGE.N    ??zero_1
    136          		if (this->itsRotatingArmJoint[j] == nullptr) {
   \   0000000A   0xEB04 0x0085      ADD      R0,R4,R5, LSL #+2
   \   0000000E   0x68C0             LDR      R0,[R0, #+12]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD102             BNE.N    ??zero_2
    137          			return -1;
   \   00000014   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000018   0xE031             B.N      ??zero_3
    138          		}
    139          
    140          		if (this->itsRotatingArmJoint[j]->zero()) {
   \                     ??zero_2: (+1)
   \   0000001A   0xEB04 0x0085      ADD      R0,R4,R5, LSL #+2
   \   0000001E   0x68C0             LDR      R0,[R0, #+12]
   \   00000020   0x.... 0x....      BL       _ZN16RotatingArmJoint4zeroEv
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD002             BEQ.N    ??zero_4
    141          			return -1;
   \   00000028   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000002C   0xE027             B.N      ??zero_3
    142          		}
    143          	}
   \                     ??zero_4: (+1)
   \   0000002E   0x1C6D             ADDS     R5,R5,#+1
   \   00000030   0xE7E9             B.N      ??zero_0
    144          
    145          	for (int j = 0; j < 2; ++j) {
   \                     ??zero_1: (+1)
   \   00000032   0x2500             MOVS     R5,#+0
   \                     ??zero_5: (+1)
   \   00000034   0x2D02             CMP      R5,#+2
   \   00000036   0xDA13             BGE.N    ??zero_6
    146          		if (this->itsSlidingArmJoint[j] == nullptr) {
   \   00000038   0xEB04 0x0085      ADD      R0,R4,R5, LSL #+2
   \   0000003C   0x69C0             LDR      R0,[R0, #+28]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD102             BNE.N    ??zero_7
    147          			return -1;
   \   00000042   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000046   0xE01A             B.N      ??zero_3
    148          		}
    149          
    150          		if (this->itsSlidingArmJoint[j]->zero()) {
   \                     ??zero_7: (+1)
   \   00000048   0xEB04 0x0085      ADD      R0,R4,R5, LSL #+2
   \   0000004C   0x69C0             LDR      R0,[R0, #+28]
   \   0000004E   0x.... 0x....      BL       _ZN15SlidingArmJoint4zeroEv
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD002             BEQ.N    ??zero_8
    151          			return -1;
   \   00000056   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000005A   0xE010             B.N      ??zero_3
    152          		}
    153          	}
   \                     ??zero_8: (+1)
   \   0000005C   0x1C6D             ADDS     R5,R5,#+1
   \   0000005E   0xE7E9             B.N      ??zero_5
    154          
    155          	if (this->itsGraspingManipulator == nullptr) {
   \                     ??zero_6: (+1)
   \   00000060   0x68A0             LDR      R0,[R4, #+8]
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD102             BNE.N    ??zero_9
    156          		return -1;
   \   00000066   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000006A   0xE008             B.N      ??zero_3
    157          	}
    158          	
    159          	if (this->itsGraspingManipulator->open()) {
   \                     ??zero_9: (+1)
   \   0000006C   0x68A0             LDR      R0,[R4, #+8]
   \   0000006E   0x.... 0x....      BL       _ZN19GraspingManipulator4openEv
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD002             BEQ.N    ??zero_10
    160          		return -1;
   \   00000076   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000007A   0xE000             B.N      ??zero_3
    161          	}
    162          
    163          	return 0;
   \                     ??zero_10: (+1)
   \   0000007C   0x2000             MOVS     R0,#+0
   \                     ??zero_3: (+1)
   \   0000007E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    164          }
    165          

   \                                 In section .text, align 2, keep-with-next
    166          GraspingManipulator* RobotArmManager::getItsGraspingManipulator() {
    167          	return (GraspingManipulator*)this->itsGraspingManipulator;
   \                     _ZN15RobotArmManager25getItsGraspingManipulatorEv: (+1)
   \   00000000   0x6880             LDR      R0,[R0, #+8]
   \   00000002   0x4770             BX       LR               ;; return
    168          }
    169          

   \                                 In section .text, align 2, keep-with-next
    170          void RobotArmManager::setItsGraspingManipulator(GraspingManipulator* p_GraspingManipulator) {
    171          	this->itsGraspingManipulator = p_GraspingManipulator;
   \                     _ZN15RobotArmManager25setItsGraspingManipulatorEP19GraspingManipulator: (+1)
   \   00000000   0x6081             STR      R1,[R0, #+8]
    172          }
   \   00000002   0x4770             BX       LR               ;; return
    173          

   \                                 In section .text, align 2, keep-with-next
    174          unsigned int* RobotArmManager::getItsRotatingArmJoint() {
    175          	return (unsigned int*)&(this->itsRotatingArmJoint[0]);
   \                     _ZN15RobotArmManager22getItsRotatingArmJointEv: (+1)
   \   00000000   0x300C             ADDS     R0,R0,#+12
   \   00000002   0x4770             BX       LR               ;; return
    176          }
    177          

   \                                 In section .text, align 2, keep-with-next
    178          void RobotArmManager::addItsRotatingArmJoint(RotatingArmJoint* p_RotatingArmJoint) {
    179          	for (int pos = 0; pos < 4; ++pos) {
   \                     _ZN15RobotArmManager22addItsRotatingArmJointEP16RotatingArmJoint: (+1)
   \   00000000   0x2300             MOVS     R3,#+0
   \                     ??addItsRotatingArmJoint_0: (+1)
   \   00000002   0x2B04             CMP      R3,#+4
   \   00000004   0xDA0A             BGE.N    ??addItsRotatingArmJoint_1
    180          		if (!this->itsRotatingArmJoint[pos]) {
   \   00000006   0xEB00 0x0283      ADD      R2,R0,R3, LSL #+2
   \   0000000A   0x68D2             LDR      R2,[R2, #+12]
   \   0000000C   0x2A00             CMP      R2,#+0
   \   0000000E   0xD103             BNE.N    ??addItsRotatingArmJoint_2
    181          			this->itsRotatingArmJoint[pos] = p_RotatingArmJoint;
   \   00000010   0xEB00 0x0283      ADD      R2,R0,R3, LSL #+2
   \   00000014   0x60D1             STR      R1,[R2, #+12]
    182          			break;
   \   00000016   0xE001             B.N      ??addItsRotatingArmJoint_1
    183          		}
    184          	}
   \                     ??addItsRotatingArmJoint_2: (+1)
   \   00000018   0x1C5B             ADDS     R3,R3,#+1
   \   0000001A   0xE7F2             B.N      ??addItsRotatingArmJoint_0
    185          }
   \                     ??addItsRotatingArmJoint_1: (+1)
   \   0000001C   0x4770             BX       LR               ;; return
    186          

   \                                 In section .text, align 2, keep-with-next
    187          void RobotArmManager::removeItsRotatingArmJoint(RotatingArmJoint* p_RotatingArmJoint) {
   \                     _ZN15RobotArmManager25removeItsRotatingArmJointEP16RotatingArmJoint: (+1)
   \   00000000   0xB410             PUSH     {R4}
    188          	for (int pos = 0; pos < 4; ++pos) {
   \   00000002   0x2200             MOVS     R2,#+0
   \                     ??removeItsRotatingArmJoint_0: (+1)
   \   00000004   0x2A04             CMP      R2,#+4
   \   00000006   0xDA0B             BGE.N    ??removeItsRotatingArmJoint_1
    189          		if (this->itsRotatingArmJoint[pos] == p_RotatingArmJoint) {
   \   00000008   0xEB00 0x0382      ADD      R3,R0,R2, LSL #+2
   \   0000000C   0x68DB             LDR      R3,[R3, #+12]
   \   0000000E   0x428B             CMP      R3,R1
   \   00000010   0xD104             BNE.N    ??removeItsRotatingArmJoint_2
    190          			this->itsRotatingArmJoint[pos] = nullptr;
   \   00000012   0x2300             MOVS     R3,#+0
   \   00000014   0xEB00 0x0482      ADD      R4,R0,R2, LSL #+2
   \   00000018   0x60E3             STR      R3,[R4, #+12]
    191          			break;
   \   0000001A   0xE001             B.N      ??removeItsRotatingArmJoint_1
    192          		}
    193          	}
   \                     ??removeItsRotatingArmJoint_2: (+1)
   \   0000001C   0x1C52             ADDS     R2,R2,#+1
   \   0000001E   0xE7F1             B.N      ??removeItsRotatingArmJoint_0
    194          }
   \                     ??removeItsRotatingArmJoint_1: (+1)
   \   00000020   0xBC10             POP      {R4}
   \   00000022   0x4770             BX       LR               ;; return
    195          

   \                                 In section .text, align 2, keep-with-next
    196          void RobotArmManager::clearItsRotatingArmJoint() {
    197          	for (int pos = 0; pos < 4; ++pos) {
   \                     _ZN15RobotArmManager24clearItsRotatingArmJointEv: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \                     ??clearItsRotatingArmJoint_0: (+1)
   \   00000002   0x2904             CMP      R1,#+4
   \   00000004   0xDA05             BGE.N    ??clearItsRotatingArmJoint_1
    198          		this->itsRotatingArmJoint[pos] = nullptr;
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0xEB00 0x0381      ADD      R3,R0,R1, LSL #+2
   \   0000000C   0x60DA             STR      R2,[R3, #+12]
    199          	}
   \   0000000E   0x1C49             ADDS     R1,R1,#+1
   \   00000010   0xE7F7             B.N      ??clearItsRotatingArmJoint_0
    200          }
   \                     ??clearItsRotatingArmJoint_1: (+1)
   \   00000012   0x4770             BX       LR               ;; return
    201          

   \                                 In section .text, align 2, keep-with-next
    202          unsigned int* RobotArmManager::getItsSlidingArmJoint() {
    203          	return (unsigned int*)&(this->itsSlidingArmJoint[0]);
   \                     _ZN15RobotArmManager21getItsSlidingArmJointEv: (+1)
   \   00000000   0x301C             ADDS     R0,R0,#+28
   \   00000002   0x4770             BX       LR               ;; return
    204          }
    205          

   \                                 In section .text, align 2, keep-with-next
    206          void RobotArmManager::addItsSlidingArmJoint(SlidingArmJoint* p_SlidingArmJoint) {
    207          	for (int pos = 0; pos < 2; ++pos) {
   \                     _ZN15RobotArmManager21addItsSlidingArmJointEP15SlidingArmJoint: (+1)
   \   00000000   0x2300             MOVS     R3,#+0
   \                     ??addItsSlidingArmJoint_0: (+1)
   \   00000002   0x2B02             CMP      R3,#+2
   \   00000004   0xDA0A             BGE.N    ??addItsSlidingArmJoint_1
    208          		if (!this->itsSlidingArmJoint[pos]) {
   \   00000006   0xEB00 0x0283      ADD      R2,R0,R3, LSL #+2
   \   0000000A   0x69D2             LDR      R2,[R2, #+28]
   \   0000000C   0x2A00             CMP      R2,#+0
   \   0000000E   0xD103             BNE.N    ??addItsSlidingArmJoint_2
    209          			this->itsSlidingArmJoint[pos] = p_SlidingArmJoint;
   \   00000010   0xEB00 0x0283      ADD      R2,R0,R3, LSL #+2
   \   00000014   0x61D1             STR      R1,[R2, #+28]
    210          			break;
   \   00000016   0xE001             B.N      ??addItsSlidingArmJoint_1
    211          		}
    212          	}
   \                     ??addItsSlidingArmJoint_2: (+1)
   \   00000018   0x1C5B             ADDS     R3,R3,#+1
   \   0000001A   0xE7F2             B.N      ??addItsSlidingArmJoint_0
    213          }
   \                     ??addItsSlidingArmJoint_1: (+1)
   \   0000001C   0x4770             BX       LR               ;; return
    214          

   \                                 In section .text, align 2, keep-with-next
    215          void RobotArmManager::removeItsSlidingAmJoint(SlidingArmJoint* p_SlidingArmJoint) {
   \                     _ZN15RobotArmManager23removeItsSlidingAmJointEP15SlidingArmJoint: (+1)
   \   00000000   0xB410             PUSH     {R4}
    216          	for (int pos = 0; pos < 2; ++pos) {
   \   00000002   0x2200             MOVS     R2,#+0
   \                     ??removeItsSlidingAmJoint_0: (+1)
   \   00000004   0x2A02             CMP      R2,#+2
   \   00000006   0xDA0B             BGE.N    ??removeItsSlidingAmJoint_1
    217          		if (this->itsSlidingArmJoint[pos] == p_SlidingArmJoint) {
   \   00000008   0xEB00 0x0382      ADD      R3,R0,R2, LSL #+2
   \   0000000C   0x69DB             LDR      R3,[R3, #+28]
   \   0000000E   0x428B             CMP      R3,R1
   \   00000010   0xD104             BNE.N    ??removeItsSlidingAmJoint_2
    218          			this->itsSlidingArmJoint[pos] = nullptr;
   \   00000012   0x2300             MOVS     R3,#+0
   \   00000014   0xEB00 0x0482      ADD      R4,R0,R2, LSL #+2
   \   00000018   0x61E3             STR      R3,[R4, #+28]
    219          			break;
   \   0000001A   0xE001             B.N      ??removeItsSlidingAmJoint_1
    220          		}
    221          	}
   \                     ??removeItsSlidingAmJoint_2: (+1)
   \   0000001C   0x1C52             ADDS     R2,R2,#+1
   \   0000001E   0xE7F1             B.N      ??removeItsSlidingAmJoint_0
    222          }
   \                     ??removeItsSlidingAmJoint_1: (+1)
   \   00000020   0xBC10             POP      {R4}
   \   00000022   0x4770             BX       LR               ;; return
    223          

   \                                 In section .text, align 2, keep-with-next
    224          void RobotArmManager::clearItsSlidingArmJoint() {
    225          	for (int pos = 0; pos < 2; ++pos) {
   \                     _ZN15RobotArmManager23clearItsSlidingArmJointEv: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \                     ??clearItsSlidingArmJoint_0: (+1)
   \   00000002   0x2902             CMP      R1,#+2
   \   00000004   0xDA05             BGE.N    ??clearItsSlidingArmJoint_1
    226          		this->itsSlidingArmJoint[pos] = nullptr;
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0xEB00 0x0381      ADD      R3,R0,R1, LSL #+2
   \   0000000C   0x61DA             STR      R2,[R3, #+28]
    227          	}
   \   0000000E   0x1C49             ADDS     R1,R1,#+1
   \   00000010   0xE7F7             B.N      ??clearItsSlidingArmJoint_0
    228          }
   \                     ??clearItsSlidingArmJoint_1: (+1)
   \   00000012   0x4770             BX       LR               ;; return
    229          

   \                                 In section .text, align 2, keep-with-next
    230          unsigned int* RobotArmManager::getItsAction() {
    231          	return (unsigned int*)&(this->itsAction[0]);
   \                     _ZN15RobotArmManager12getItsActionEv: (+1)
   \   00000000   0x3024             ADDS     R0,R0,#+36
   \   00000002   0x4770             BX       LR               ;; return
    232          }
    233          

   \                                 In section .text, align 2, keep-with-next
    234          void RobotArmManager::addItsAction(Action* p_Action) {
    235          	for (int pos = 0; pos < 100; ++pos) {
   \                     _ZN15RobotArmManager12addItsActionEP6Action: (+1)
   \   00000000   0x2300             MOVS     R3,#+0
   \                     ??addItsAction_0: (+1)
   \   00000002   0x2B64             CMP      R3,#+100
   \   00000004   0xDA0A             BGE.N    ??addItsAction_1
    236          		if (!this->itsAction[pos]) {
   \   00000006   0xEB00 0x0283      ADD      R2,R0,R3, LSL #+2
   \   0000000A   0x6A52             LDR      R2,[R2, #+36]
   \   0000000C   0x2A00             CMP      R2,#+0
   \   0000000E   0xD103             BNE.N    ??addItsAction_2
    237          			this->itsAction[pos] = p_Action;
   \   00000010   0xEB00 0x0283      ADD      R2,R0,R3, LSL #+2
   \   00000014   0x6251             STR      R1,[R2, #+36]
    238          			break;
   \   00000016   0xE001             B.N      ??addItsAction_1
    239          		}
    240          	}
   \                     ??addItsAction_2: (+1)
   \   00000018   0x1C5B             ADDS     R3,R3,#+1
   \   0000001A   0xE7F2             B.N      ??addItsAction_0
    241          }
   \                     ??addItsAction_1: (+1)
   \   0000001C   0x4770             BX       LR               ;; return
    242          

   \                                 In section .text, align 2, keep-with-next
    243          void RobotArmManager::removeItsAction(Action* p_Action) {
   \                     _ZN15RobotArmManager15removeItsActionEP6Action: (+1)
   \   00000000   0xB410             PUSH     {R4}
    244          	for (int pos = 0; pos < 100; ++pos) {
   \   00000002   0x2200             MOVS     R2,#+0
   \                     ??removeItsAction_0: (+1)
   \   00000004   0x2A64             CMP      R2,#+100
   \   00000006   0xDA0B             BGE.N    ??removeItsAction_1
    245          		if (this->itsAction[pos] == p_Action) {
   \   00000008   0xEB00 0x0382      ADD      R3,R0,R2, LSL #+2
   \   0000000C   0x6A5B             LDR      R3,[R3, #+36]
   \   0000000E   0x428B             CMP      R3,R1
   \   00000010   0xD104             BNE.N    ??removeItsAction_2
    246          			this->itsAction[pos] = nullptr;
   \   00000012   0x2300             MOVS     R3,#+0
   \   00000014   0xEB00 0x0482      ADD      R4,R0,R2, LSL #+2
   \   00000018   0x6263             STR      R3,[R4, #+36]
    247          			break;
   \   0000001A   0xE001             B.N      ??removeItsAction_1
    248          		}
    249          	}
   \                     ??removeItsAction_2: (+1)
   \   0000001C   0x1C52             ADDS     R2,R2,#+1
   \   0000001E   0xE7F1             B.N      ??removeItsAction_0
    250          }
   \                     ??removeItsAction_1: (+1)
   \   00000020   0xBC10             POP      {R4}
   \   00000022   0x4770             BX       LR               ;; return
    251          

   \                                 In section .text, align 2, keep-with-next
    252          void RobotArmManager::clearItsAction() {
    253          	for (int pos = 0; pos < 100; ++pos) {
   \                     _ZN15RobotArmManager14clearItsActionEv: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \                     ??clearItsAction_0: (+1)
   \   00000002   0x2964             CMP      R1,#+100
   \   00000004   0xDA05             BGE.N    ??clearItsAction_1
    254          		this->itsAction[pos] = nullptr;
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0xEB00 0x0381      ADD      R3,R0,R1, LSL #+2
   \   0000000C   0x625A             STR      R2,[R3, #+36]
    255          	}
   \   0000000E   0x1C49             ADDS     R1,R1,#+1
   \   00000010   0xE7F7             B.N      ??clearItsAction_0
    256          }
   \                     ??clearItsAction_1: (+1)
   \   00000012   0x4770             BX       LR               ;; return

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   RobotArmManager::addItsAction(Action *)
       0   RobotArmManager::addItsRotatingArmJoint(RotatingArmJoint *)
       0   RobotArmManager::addItsSlidingArmJoint(SlidingArmJoint *)
       0   RobotArmManager::clearItsAction()
       0   RobotArmManager::clearItsRotatingArmJoint()
       0   RobotArmManager::clearItsSlidingArmJoint()
     120   RobotArmManager::computeTrajectory(int, int, int, int)
       120   -> RobotArmManager::addItsAction(Action *)
       120   -> RobotArmManager::clearItsAction()
      32   RobotArmManager::executeStep()
        32   -> GraspingManipulator::close()
        32   -> GraspingManipulator::open()
        32   -> GraspingManipulator::setMaxForce(int)
        32   -> RotatingArmJoint::rotate(int)
        32   -> SlidingArmJoint::setLength(int)
       0   RobotArmManager::getItsAction()
       0   RobotArmManager::getItsGraspingManipulator()
       0   RobotArmManager::getItsRotatingArmJoint()
       0   RobotArmManager::getItsSlidingArmJoint()
      32   RobotArmManager::graspAt(int, int, int, int)
        32   -> RobotArmManager::computeTrajectory(int, int, int, int)
        32   -> RobotArmManager::executeStep()
        32   -> RobotArmManager::zero()
       4   RobotArmManager::removeItsAction(Action *)
       4   RobotArmManager::removeItsRotatingArmJoint(RotatingArmJoint *)
       4   RobotArmManager::removeItsSlidingAmJoint(SlidingArmJoint *)
       0   RobotArmManager::setItsGraspingManipulator(GraspingManipulator *)
      16   RobotArmManager::zero()
        16   -> GraspingManipulator::open()
        16   -> RotatingArmJoint::zero()
        16   -> SlidingArmJoint::zero()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      30  RobotArmManager::addItsAction(Action *)
      30  RobotArmManager::addItsRotatingArmJoint(RotatingArmJoint *)
      30  RobotArmManager::addItsSlidingArmJoint(SlidingArmJoint *)
      20  RobotArmManager::clearItsAction()
      20  RobotArmManager::clearItsRotatingArmJoint()
      20  RobotArmManager::clearItsSlidingArmJoint()
     150  RobotArmManager::computeTrajectory(int, int, int, int)
     256  RobotArmManager::executeStep()
       4  RobotArmManager::getItsAction()
       4  RobotArmManager::getItsGraspingManipulator()
       4  RobotArmManager::getItsRotatingArmJoint()
       4  RobotArmManager::getItsSlidingArmJoint()
     104  RobotArmManager::graspAt(int, int, int, int)
      36  RobotArmManager::removeItsAction(Action *)
      36  RobotArmManager::removeItsRotatingArmJoint(RotatingArmJoint *)
      36  RobotArmManager::removeItsSlidingAmJoint(SlidingArmJoint *)
       4  RobotArmManager::setItsGraspingManipulator(GraspingManipulator *)
     128  RobotArmManager::zero()

 
 916 bytes in section .text
 
 916 bytes of CODE memory

Errors: none
Warnings: 1

###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.2.15995/W32 for ARM       19/Apr/2018  09:35:43
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\Container\Code\C\main.c
#    Command line =  
#        -f C:\Users\Tim\AppData\Local\Temp\EW961D.tmp
#        (C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\Container\Code\C\main.c
#        -lC
#        C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\Container\Code\C\Debug\List
#        -lA
#        C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\Container\Code\C\Debug\List
#        -o
#        C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\Container\Code\C\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 --fpu=None --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\INC\c\DLib_Config_Normal.h" -On)
#    Locale       =  C
#    List file    =  
#        C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\Container\Code\C\Debug\List\main.lst
#    Object file  =  
#        C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\Container\Code\C\Debug\Obj\main.o
#
###############################################################################

C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\Container\Code\C\main.c
      1          /* C approximation */
      2          
      3          #include <stdio.h>
      4          #include <stdlib.h>
      5          
      6          typedef struct int_container int_container;
      7          struct int_container {
      8          	int* data;
      9          	unsigned len;
     10          };
     11          

   \                                 In section .text, align 2, keep-with-next
     12          void int_container_create (int_container* this, const int* data_in, unsigned len_in) {
   \                     int_container_create: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     13          	this->data = (int*)malloc(len_in * sizeof(int));
   \   00000008   0x00B0             LSLS     R0,R6,#+2
   \   0000000A   0x.... 0x....      BL       malloc
   \   0000000E   0x6020             STR      R0,[R4, #+0]
     14          	this->len = (this->data == 0) ? 0 : len_in;
   \   00000010   0x6820             LDR      R0,[R4, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD101             BNE.N    ??int_container_create_0
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xE000             B.N      ??int_container_create_1
   \                     ??int_container_create_0: (+1)
   \   0000001A   0x0030             MOVS     R0,R6
   \                     ??int_container_create_1: (+1)
   \   0000001C   0x6060             STR      R0,[R4, #+4]
     15          		
     16          	for (unsigned n = 0; n < len_in; ++n) {
   \   0000001E   0x2000             MOVS     R0,#+0
   \                     ??int_container_create_2: (+1)
   \   00000020   0x42B0             CMP      R0,R6
   \   00000022   0xD206             BCS.N    ??int_container_create_3
     17          		this->data[n] = data_in[n];
   \   00000024   0xF855 0x1020      LDR      R1,[R5, R0, LSL #+2]
   \   00000028   0x6822             LDR      R2,[R4, #+0]
   \   0000002A   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
     18          	}
   \   0000002E   0x1C40             ADDS     R0,R0,#+1
   \   00000030   0xE7F6             B.N      ??int_container_create_2
     19          }
   \                     ??int_container_create_3: (+1)
   \   00000032   0xBD70             POP      {R4-R6,PC}       ;; return
     20          	

   \                                 In section .text, align 2, keep-with-next
     21          void int_container_destroy (int_container* this) {
   \                     int_container_destroy: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     22          	free(this->data);
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x.... 0x....      BL       free
     23          }
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
     24          	

   \                                 In section .text, align 2, keep-with-next
     25          int int_container_value (int_container* this, int index) {
     26          	return ((index >= 0 && ((unsigned)index) < this->len) ? this->data[index] : 0);
   \                     int_container_value: (+1)
   \   00000000   0x2900             CMP      R1,#+0
   \   00000002   0xD406             BMI.N    ??int_container_value_0
   \   00000004   0x6842             LDR      R2,[R0, #+4]
   \   00000006   0x4291             CMP      R1,R2
   \   00000008   0xD203             BCS.N    ??int_container_value_0
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000010   0xE000             B.N      ??int_container_value_1
   \                     ??int_container_value_0: (+1)
   \   00000012   0x2000             MOVS     R0,#+0
   \                     ??int_container_value_1: (+1)
   \   00000014   0x4770             BX       LR               ;; return
     27          }
     28          

   \                                 In section .text, align 2, keep-with-next
     29          int main(void)
     30          {
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
     31          	int my_data[4] = {0,1,2,3};
   \   00000004   0xA802             ADD      R0,SP,#+8
   \   00000006   0x....             LDR.N    R1,??DataTable1_1
   \   00000008   0x2210             MOVS     R2,#+16
   \   0000000A   0x.... 0x....      BL       __aeabi_memcpy4
     32          	int_container container;
     33          	
     34          	int_container_create(&container,my_data,4);
   \   0000000E   0x2204             MOVS     R2,#+4
   \   00000010   0xA902             ADD      R1,SP,#+8
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x.... 0x....      BL       int_container_create
     35          	
     36          	printf("%d", int_container_value(&container,2));
   \   00000018   0x2102             MOVS     R1,#+2
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x.... 0x....      BL       int_container_value
   \   00000020   0x0001             MOVS     R1,R0
   \   00000022   0x....             ADR.N    R0,??DataTable1  ;; 0x25, 0x64, 0x00, 0x00
   \   00000024   0x.... 0x....      BL       printf
     37          	
     38          	int_container_destroy(&container);
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x.... 0x....      BL       int_container_destroy
     39          	
     40          	while (1)
   \                     ??main_0: (+1)
   \   0000002E   0xE7FE             B.N      ??main_0
     41          	{
     42          		
     43          	}
     44          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x25 0x64          DC8      0x25, 0x64, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x00000000         DC32 0, 1, 2, 3
   \              0x00000001   
   \              0x00000002   
   \              0x00000003   

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x64          DC8 "%d"
   \              0x00         
   \   00000003   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   int_container_create
        16   -> malloc
       8   int_container_destroy
         8   -> free
       0   int_container_value
      32   main
        32   -> __aeabi_memcpy4
        32   -> int_container_create
        32   -> int_container_destroy
        32   -> int_container_value
        32   -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
      16  ?_0
       4  ?_1
      52  int_container_create
      12  int_container_destroy
      22  int_container_value
      48  main

 
  20 bytes in section .rodata
 142 bytes in section .text
 
 142 bytes of CODE  memory
  20 bytes of CONST memory

Errors: none
Warnings: none

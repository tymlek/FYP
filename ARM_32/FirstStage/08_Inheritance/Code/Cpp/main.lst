###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.2.15995/W32 for ARM       18/Apr/2018  15:44:44
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\Inheritance\Code\Cpp\main.cpp
#    Command line =  
#        -f C:\Users\Tim\AppData\Local\Temp\EW6444.tmp
#        (C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\Inheritance\Code\Cpp\main.cpp
#        -lC
#        C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\Inheritance\Code\Cpp\Debug\List
#        -lA
#        C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\Inheritance\Code\Cpp\Debug\List
#        -o
#        C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\Inheritance\Code\Cpp\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 --fpu=None --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\INC\c\DLib_Config_Normal.h" -On
#        --c++ --no_exceptions --no_rtti --no_static_destruction)
#    Locale       =  C
#    List file    =  
#        C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\Inheritance\Code\Cpp\Debug\List\main.lst
#    Object file  =  
#        C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\Inheritance\Code\Cpp\Debug\Obj\main.o
#
###############################################################################

C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\Inheritance\Code\Cpp\main.cpp
      1          /* Simple inheritance in C++ */
      2          
      3          class Parent {
      4          	public:
      5          	Parent();
      6          	int f();
      7          	private:
      8          	int value;
      9          };
     10          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp Parent::subobject Parent()
   \                     _ZN6ParentC2Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN6ParentC1Ev
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     11          Parent::Parent() {
     12          	value = 1;
   \                     _ZN6ParentC1Ev: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x6001             STR      R1,[R0, #+0]
     13          }
   \   00000004   0x4770             BX       LR               ;; return
     14          

   \                                 In section .text, align 2, keep-with-next
     15          int Parent::f() {
     16          	return value;
   \                     _ZN6Parent1fEv: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x4770             BX       LR               ;; return
     17          }
     18          
     19          class Child : public Parent {
     20          	public:
     21          	Child();
     22          	int g();
     23          	private:
     24          	int sec_value;
     25          };
     26          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp Child::subobject Child()
   \                     _ZN5ChildC2Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN5ChildC1Ev
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     27          Child::Child() {
   \                     _ZN5ChildC1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN6ParentC2Ev
     28          	sec_value = 2;
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x6060             STR      R0,[R4, #+4]
     29          }
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
     30          

   \                                 In section .text, align 2, keep-with-next
     31          int Child::g() {
     32          	return sec_value;
   \                     _ZN5Child1gEv: (+1)
   \   00000000   0x6840             LDR      R0,[R0, #+4]
   \   00000002   0x4770             BX       LR               ;; return
     33          }
     34          

   \                                 In section .text, align 2, keep-with-next
     35          int main() {
   \                     main: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     36          	Child child;
   \   00000002   0x4668             MOV      R0,SP
   \   00000004   0x.... 0x....      BL       _ZN5ChildC1Ev
     37          	child.f();
   \   00000008   0x.... 0x....      BL       _ZN6Parent1fEv
     38          	child.g();
   \   0000000C   0x4668             MOV      R0,SP
   \   0000000E   0x.... 0x....      BL       _ZN5Child1gEv
     39          	
     40          	while (1) {
   \                     ??main_0: (+1)
   \   00000012   0xE7FE             B.N      ??main_0
     41          		
     42          	}
     43          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Child::Child()
         8   -> Parent::subobject Parent()
       0   Child::g()
       8   Child::subobject Child()
         8   -> Child::Child()
       0   Parent::Parent()
       0   Parent::f()
       8   Parent::subobject Parent()
         8   -> Parent::Parent()
      16   main
        16   -> Child::Child()
        16   -> Child::g()
        16   -> Parent::f()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      18  Child::Child()
       4  Child::g()
      12  Child::subobject Child()
       6  Parent::Parent()
       4  Parent::f()
      12  Parent::subobject Parent()
      20  main

 
 76 bytes in section .text
 
 76 bytes of CODE memory

Errors: none
Warnings: none

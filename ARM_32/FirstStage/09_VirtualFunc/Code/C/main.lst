###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.2.15995/W32 for ARM       18/Apr/2018  18:22:05
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\VirtualFunc\Code\C\main.c
#    Command line =  
#        -f C:\Users\Tim\AppData\Local\Temp\EW7827.tmp
#        (C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\VirtualFunc\Code\C\main.c
#        -lC
#        C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\VirtualFunc\Code\C\Debug\List
#        -lA
#        C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\VirtualFunc\Code\C\Debug\List
#        -o
#        C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\VirtualFunc\Code\C\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 --fpu=None --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\INC\c\DLib_Config_Normal.h" -On)
#    Locale       =  C
#    List file    =  
#        C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\VirtualFunc\Code\C\Debug\List\main.lst
#    Object file  =  
#        C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\VirtualFunc\Code\C\Debug\Obj\main.o
#
###############################################################################

C:\Users\Tim\Programming\Code\ARM_32\SimpleFeatures\VirtualFunc\Code\C\main.c
      1          /* C approximation */
      2          
      3          typedef struct A A;
      4          struct A {
      5          	void** vTable;
      6          	int value;
      7          };
      8          

   \                                 In section .text, align 2, keep-with-next
      9          int f_A(A* this) {
   \                     f_A: (+1)
   \   00000000   0x0001             MOVS     R1,R0
     10          	return 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x4770             BX       LR               ;; return
     11          }
     12          

   \                                 In section .data, align 4
     13          void* vTable_A[] = {
   \                     vTable_A:
   \   00000000   0x........         DC32 f_A
     14          	(void*) &f_A
     15          };
     16          

   \                                 In section .text, align 2, keep-with-next
     17          void constructor_A(A* this) {
     18          	this->vTable = vTable_A;
   \                     constructor_A: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable2
   \   00000002   0x6001             STR      R1,[R0, #+0]
     19          	this->value = 0;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6041             STR      R1,[R0, #+4]
     20          }
   \   00000008   0x4770             BX       LR               ;; return
     21          
     22          typedef struct B B;
     23          struct B {
     24          	A a;
     25          };
     26          

   \                                 In section .text, align 2, keep-with-next
     27          int f_B(B* this) {
   \                     f_B: (+1)
   \   00000000   0x0001             MOVS     R1,R0
     28          	return 1;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x4770             BX       LR               ;; return
     29          }
     30          

   \                                 In section .data, align 4
     31          void* vTable_B[] = {
   \                     vTable_B:
   \   00000000   0x........         DC32 f_B
     32          	(void*) &f_B
     33          };
     34          

   \                                 In section .text, align 2, keep-with-next
     35          void constructor_B(B* this) {
   \                     constructor_B: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     36          	constructor_A((A*) this);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       constructor_A
     37          	this->a.vTable = vTable_B;
   \   0000000A   0x....             LDR.N    R0,??DataTable2_1
   \   0000000C   0x6020             STR      R0,[R4, #+0]
     38          }
   \   0000000E   0xBD10             POP      {R4,PC}          ;; return
     39          

   \                                 In section .text, align 2, keep-with-next
     40          int main(void)
     41          {
   \                     main: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
     42          	B b;
     43          	A* aPtr;
     44          	
     45          	constructor_B(&b);
   \   00000002   0x4668             MOV      R0,SP
   \   00000004   0x.... 0x....      BL       constructor_B
     46          	typedef void (*f_A_Type) (A*);
     47          	
     48          	aPtr = (A*) &b;
   \   00000008   0x466C             MOV      R4,SP
     49          	((f_A_Type) aPtr->vTable[0]) (aPtr);
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x6821             LDR      R1,[R4, #+0]
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0x4788             BLX      R1
     50          	
     51          	while (1)
   \                     ??main_0: (+1)
   \   00000012   0xE7FE             B.N      ??main_0
     52          	{
     53          		
     54          	}
     55          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     vTable_A

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     vTable_B

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   constructor_A
       8   constructor_B
         8   -> constructor_A
       0   f_A
       0   f_B
      16   main
        16   -- Indirect call
        16   -> constructor_B


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
      10  constructor_A
      16  constructor_B
       6  f_A
       6  f_B
      20  main
       4  vTable_A
       4  vTable_B

 
  8 bytes in section .data
 66 bytes in section .text
 
 66 bytes of CODE memory
  8 bytes of DATA memory

Errors: none
Warnings: none
